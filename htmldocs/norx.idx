nimTitle	norx	norx.html	module src/norx		0
nim	ORX_VERSION_STRING	norx.html#ORX_VERSION_STRING	const ORX_VERSION_STRING		108
nim	ORX_VERSION_FULL_STRING	norx.html#ORX_VERSION_FULL_STRING	const ORX_VERSION_FULL_STRING		109
nim	ORX_VERSION	norx.html#ORX_VERSION	const ORX_VERSION		116
nim	orxFALSE	norx.html#orxFALSE	const orxFALSE		122
nim	orxTRUE	norx.html#orxTRUE	const orxTRUE		123
nim	toBool	norx.html#toBool.c,orxBOOL	converter toBool(x: orxBOOL): bool		125
nim	toOrxBOOL	norx.html#toOrxBOOL.c,bool	converter toOrxBOOL(x: bool): orxBOOL		128
nim	eventGetFlag	norx.html#eventGetFlag.t,untyped	template eventGetFlag(ID: untyped): untyped		132
nim	getPointer	norx.html#getPointer,pointer,orxSTRUCTURE_ID	proc getPointer(pStructure: pointer; eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE		136
nim	debugInitMacro	norx.html#debugInitMacro.t	template debugInitMacro(): void		150
nim	debugExitMacro	norx.html#debugExitMacro.t	template debugExitMacro(): untyped		166
nim	eventSendMacro	norx.html#eventSendMacro.t,untyped,untyped,untyped,untyped,untyped	template eventSendMacro(TYPE, ID, SENDER, RECIPIENT, PAYLOAD: untyped): void		169
nim	sbStopByEvent	norx.html#sbStopByEvent_2	var sbStopByEvent		180
nim	mainSetup	norx.html#mainSetup	proc mainSetup()		182
nim	defaultEventHandler	norx.html#defaultEventHandler,ptr.orxEVENT	proc defaultEventHandler(pstEvent: ptr orxEVENT): orxSTATUS		188
nim	execute	norx.html#execute,proc),proc),proc)	proc execute(initProc: proc (): orxSTATUS {.cdecl.};\n        runProc: proc (): orxSTATUS {.cdecl.}; exitProc: proc () {.cdecl.})		258
