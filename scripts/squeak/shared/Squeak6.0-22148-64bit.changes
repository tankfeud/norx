'From Squeak6.0 of 15 January 2024 [latest update: #22148] on 17 January 2024 at 6:44:55 pm'!CompiledCode variableByteSubclass: #CompiledMethod	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Methods'!!CompiledMethod methodsFor: 'literals' stamp: 'mt 12/15/2023 10:58'!allLiteralsDo: aBlock scanForSpecial: aBoolean	"Overwritten to skip certain (raw) literals."			"Exclude method selector (or properties) and the method's class. Include code literals."	1 to: self numLiterals - 2 do: [:index |		(self literalAt: index) allLiteralsDo: aBlock scanForSpecial: aBoolean].	"Enumerate the implicit literals in bytecodes of the receiver."	aBoolean ifTrue: [self implicitLiteralsDo: aBlock].	"Enumerate method selector only through additional method state."	self penultimateLiteral isMethodProperties		ifTrue: [self penultimateLiteral allLiteralsDo: aBlock scanForSpecial: aBoolean]! !BookMorph subclass: #StoryboardBookMorph	instanceVariableNames: 'alansSliders panAndTiltFactor zoomFactor zoomController'	classVariableNames: ''	poolDictionaries: ''	category: 'MorphicExtras-Books'!!StoryboardBookMorph methodsFor: 'initialization' stamp: 'ct 6/16/2022 17:46' prior: 91247064!intoWorld: world	zoomController openInWorld.! !AbstractSound subclass: #SampledSound	instanceVariableNames: 'initialCount count samples originalSamplingRate samplesSize scaledIndex indexHighBits scaledIncrement'	classVariableNames: 'CoffeeCupClink DefaultSampleTable IncrementFractionBits IncrementScaleFactor NominalSamplePitch ScaledIndexOverflow SoundLibrary'	poolDictionaries: ''	category: 'Sound-Synthesis'!!SampledSound methodsFor: 'file i/o' stamp: 'ct 9/25/2023 20:06' prior: 85832181!storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream	"Store my samples on the given stream at the current SoundPlayer sampling rate. If bigFlag is true, then each 16-bit sample is stored most-significant byte first (AIFF files), otherwise it is stored least-significant byte first (WAV files)."	self samplingRate ~= originalSamplingRate ifTrue: [		^ super storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream].		"optimization: if sampling rates match, just store my buffer"	^ self storeSamples: samples count: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream! !TestCase subclass: #BorderedMorphTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MorphicTests-Basic'!!BorderedMorphTests methodsFor: 'tests' stamp: 'mt 11/23/2023 11:39' prior: 19155851!test01OldInstVarRefs	"Only BorderedMorph should reference the (deprecated) borderWidth and borderColor isntance variables."		self		assert: 3		equals: (SystemNavigation default allAccessesTo: #borderWidth from: BorderedMorph) size.			self		assert: 3		equals: (SystemNavigation default allAccessesTo: #borderColor from: BorderedMorph) size.! !BooklikeMorph subclass: #BookMorph	instanceVariableNames: 'pages currentPage'	classVariableNames: 'MethodHolders VersionNames VersionTimes'	poolDictionaries: ''	category: 'MorphicExtras-Books'!!BookMorph methodsFor: 'insert and delete' stamp: 'pre 8/2/2023 12:02' prior: 18831179!insertPageLabel: labelString morphs: morphList	| m c labelAllowance |	self insertPage.	labelString 		ifNotNil: [			m := labelString asMorph.			m				lock;				position: currentPage position + (((currentPage width - m width) // 2) @ 5).			currentPage addMorph: m.			labelAllowance := 40]		ifNil: [labelAllowance := 0].	"use a column to align the given morphs, then add them to the page"	c := AlignmentMorph newColumn wrapCentering: #center; cellPositioning: #topCenter.	c addAllMorphs: morphList.	c position: currentPage position + (0 @ labelAllowance).	c fullBounds. "enforce layouting"	currentPage addAllMorphs: morphList.	^ currentPage! !Notification subclass: #TTCharacterMappingUnsupported	instanceVariableNames: 'cmapFmt'	classVariableNames: ''	poolDictionaries: ''	category: 'TrueType-Support'!!TTCharacterMappingUnsupported methodsFor: 'accessing' stamp: 'mt 8/4/2022 11:12'!cmapFmt	^ cmapFmt! !!TTCharacterMappingUnsupported methodsFor: 'accessing' stamp: 'mt 8/4/2022 11:12'!cmapFmt: anObject	cmapFmt := anObject.! !!TTCharacterMappingUnsupported methodsFor: 'priv handling' stamp: 'mt 8/4/2022 11:12'!defaultAction	Transcript showln: '[TTFontReader] Unsupported format of cmap: ', cmapFmt.	^ true! !GIFReadWriter class	instanceVariableNames: ''!!GIFReadWriter class methodsFor: 'image reading/writing' stamp: 'mt 1/23/2023 13:20' prior: 30969666!formsFromFileNamed: aFilePath	^ self formsFromStream: (FileStream readOnlyFileNamed: aFilePath)! !!GIFReadWriter class methodsFor: 'image reading/writing' stamp: 'mt 1/23/2023 13:20' prior: 30970081!formsFromStream: aBinaryStream	| result |	self flag: #misnomer. "mt: This message does NOT return a collection of forms."	result := (self on: aBinaryStream)		readHeader;		readBody;		yourself.		self flag: #workaround. "mt: Avoid leaking open file handles."	result close.		^ result! !ClassTestCase subclass: #BitBltTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GraphicsTests-Primitives'!!BitBltTest methodsFor: 'tests' stamp: 'nice 2/27/2023 17:02' prior: 18415251!testAllAlphasRgbMul	"self run: #testAllAlphasRgbMul"	| sourceForm destForm blt correctAlphas |	<timeout: 10>     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 37.	"rgbMul"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (((destAlpha) * (sourceAlpha) / 255) rounded)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !Object subclass: #MIMEDocument	instanceVariableNames: 'mainType subType content fields url parts'	classVariableNames: 'MIMEdatabase'	poolDictionaries: ''	category: 'Network-Url'!!MIMEDocument methodsFor: 'serializing' stamp: 'ct 6/4/2023 21:09' prior: 54249147!asSendableBodyText	| sendableBodyText |	sendableBodyText := (self isMultipart and: [self attachmentSeparator notNil])		ifTrue: [self sendableMultipartBodyText]		ifFalse: [(self isPlaintext or: [self isHTML]) 					ifTrue: [self class tryToEncodeBody: self contents as: self charset]					ifFalse: [self contents]].		^ (self hasFieldNamed: 'content-transfer-encoding')		ifFalse: [sendableBodyText]		ifTrue: [ | transferEncoding |			transferEncoding := self contentTransferEncoding.			((MimeConverter forEncoding: transferEncoding) mimeEncode: sendableBodyText readStream) contents ]  ! !!MIMEDocument methodsFor: 'initialize-release' stamp: 'ct 5/8/2023 18:09' prior: 54254770!initializeFromString: aString	"This can only be used for MIME documents which are not multipart."	| parseStream contentType bodyText contentTransferEncoding text |	text := aString withoutTrailingBlanks, String cr, String cr.	parseStream := ReadStream on: text.	contentType := 'text/plain'.	contentTransferEncoding := nil.	fields := Dictionary new.	"Extract information out of the header fields"	self fieldsFrom: parseStream do: 		[:fName :fValue | 		"NB: fName is all lowercase"		fName = 'content-type' ifTrue: [contentType := fValue asLowercase].		fName = 'content-transfer-encoding' ifTrue: [contentTransferEncoding := fValue asLowercase].		(fields at: fName ifAbsentPut: [OrderedCollection new: 1])			add: (MIMEHeaderValue forField: fName fromString: fValue)].	"Extract the body of the message"	bodyText := parseStream upToEnd.	bodyText := (MimeConverter forEncoding: contentTransferEncoding) 		mimeDecode: (ReadStream on: bodyText) as: String.	bodyText := self class tryToDecodeBody: bodyText as: self charset.		self isMultipart ifTrue:		[self attachmentSeparator ifNotNil:			[:separator |			parts := self class parseParts: bodyText withSeparator: separator.			^ self]].	content := bodyText.! !MIMEDocument class	instanceVariableNames: ''!!MIMEDocument class methodsFor: 'instance creation' stamp: 'ct 5/11/2023 19:23' prior: 54271507!parseParts: bodyText withSeparator: separator	"private -- parse the parts of the message and store them into a collection"	| parseStream msgStream messages  normalizedSeparator |		parseStream := ReadStream on: bodyText.		msgStream := LimitingLineStreamWrapper on: parseStream delimiter: separator.	normalizedSeparator := separator asLowercase.	msgStream limitingBlock: [:aLine | | normalizedLine |		normalizedLine := aLine withoutTrailingBlanks asLowercase.		normalizedLine = normalizedSeparator or:	"Match the separator"		[normalizedLine = ('--',normalizedSeparator)] or:	"or the separator after --"		[normalizedLine = (normalizedSeparator, '--')] or:	"or the final separator before --"		[normalizedLine = ('--',normalizedSeparator, '--')]].	"or the final separator before and after --"	"Throw away everything up to and including the first separator"	msgStream upToEnd.	msgStream skipThisLine.	"Extract each of the multi-parts as strings"	messages := OrderedCollection new.	[parseStream atEnd]		whileFalse: 			[messages add: msgStream upToEnd.			msgStream skipThisLine].	^ messages collect: [:e | MIMEDocument fromPartString: e]! !Object subclass: #MCRepository	instanceVariableNames: 'creationTemplate storeDiffs'	classVariableNames: 'Settings'	poolDictionaries: ''	category: 'Monticello-Repositories'!!MCRepository methodsFor: 'versions' stamp: 'mt 7/18/2022 14:44' prior: 53360778!copyImageVersions	"For each package contained in the receiver, copy the version of that package which is currently loaded in this image.  If no version of a package is loaded in the image, nothing is copied for that package."	MCRepository trunk = self ifTrue: [^ self error: 'Must not copy over to Trunk repository' translated].	MCRepository inbox = self ifTrue: [^ self error: 'Must not copy over to Inbox repository' translated].	MCRepository treated = self ifTrue: [^ self error: 'Must not copy over to Treated repository' translated].	self cacheAllFileNamesDuring:		[ self allPackageNames do:			[ : eachPkgName | MCWorkingCopy allManagers				detect: [ : each | each packageName = eachPkgName ]				ifFound:					[ : loaded | loaded ancestors do:						[ : infoToCopy | (self includesVersionNamed: infoToCopy versionName) ifFalse:							[ (MCRepositoryGroup default versionWithInfo: infoToCopy)								ifNil: [ Warning signal: infoToCopy name , ' not found in RepositoryGroup default.' ]								ifNotNil:									[ : ver | self storeVersion: ver ] ] ] ]				ifNone: [ "Image specifies no version to copy." ] ] ]! !Morph subclass: #BorderedMorph	instanceVariableNames: 'borderWidth borderColor'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Kernel'!!BorderedMorph methodsFor: 'objects from disk' stamp: 'mt 8/9/2023 14:05'!readDataFrom: aDataStream size: varsOnDisk	| bc bw |	super readDataFrom: aDataStream size: varsOnDisk.		"Update borderStyle for older versions of the receiver. Use temps because of side-effects."	bc := borderColor. bw := borderWidth.	self borderColor: bc.	self borderWidth: bw.		self flag: #todo. "mt: If we were to remove those instVars at some point, we need to increase the receivers version and add a proper conversion method via SmartRefStream. Still, this might break compatbility with foreign subclasses that rely on inst-var access."! !Installer class	instanceVariableNames: 'localRepository'!!Installer class methodsFor: 'scripts' stamp: 'mt 10/21/2022 13:24' prior: 33143458!ensureRecentMetacello	"Copied and adapted from https://github.com/Metacello/metacello/blob/master/README.md"		| metacello |	((Smalltalk classNamed: #WebClient)		ifNil: [ false ]		ifNotNil: [ :webClient | 			[ (webClient httpHead: 'https://github.com') isSuccess ] 				on: Error				do: [ false ] ])		ifFalse: [ ^self inform: 'Could not connect to "https://github.com".\\You need an internet connection and SSL support\to install (or update) Metacello.\\Please fix those issues and try again.' translated withCRs ].		self isMetacelloInstalled ifFalse: [		| response |		"Download base archive of Metacello."		response := WebClient httpGet: 'https://files.squeak.org/metacello/metacello-squeak60.sar'.		response isSuccess ifFalse: [			self error: ('Could not download Metacello archive: {1}' translated format: {response status})].		"Prepare a clean environment and install it."		Smalltalk globals removeKey: #Metacello ifAbsent: ["Ignore prior attempts."].		self new installSAR: 'metacello-squeak60.sar' from: response content asByteArray readStream].	metacello := Smalltalk classNamed: #Metacello.	"Now load latest version of Metacello"	metacello new		baseline: 'Metacello';		repository: 'github://Metacello/metacello:master/repository';		get.	metacello new		baseline: 'Metacello';		repository: 'github://Metacello/metacello:master/repository';		load: #('default' 'Metacello-Help').! !!Installer class methodsFor: 'scripts' stamp: 'ct 6/4/2023 22:41' prior: 33147156!installSqueakInboxTalk	"For more information on Squeak Inbox Talk, visit https://github.com/hpi-swa-lab/squeak-inbox-talk"		(Smalltalk at: #Metacello) new		baseline: 'SqueakInboxTalk';		repository: 'github://hpi-swa-lab/squeak-inbox-talk:squeak60/packages';		load.		"Remove '(click to install)' note in 'Tools' menu."	TheWorldMainDockingBar updateInstances.! !Object subclass: #TTCharacterMappingTable	instanceVariableNames: 'platformID encodingID characterMap glyphIndexMap macLanguageID'	classVariableNames: ''	poolDictionaries: ''	category: 'TrueType-Support'!!TTCharacterMappingTable methodsFor: 'accessing' stamp: 'mt 8/4/2022 11:16' prior: 97920922!encodingNameForSqueak	"After #prepare 'ing the cmap table from the font file for squeak, we basically have mappings for Unicode code points. Those can be restricted to < 256 (i.e., 'Latin1' or encodingID = 0). Windows' symbol fonts can also have the speciality that its symbols are also available from 16r20 to 16rFF (i.e., 'Symbol' or encoding ID = 1). Other than that, we distinguish the basic multilingual plane (short: BMP) and full Unicode support. Note that those encodings are not relevant for mapping code points to glyphs as missing code points are automatically mapped to the fallback glyph, that is, the glyph index 0. See TTGlyph >> #isFallback."		^ #('Latin1' 'Symbol' 'Unicode BMP' 'Unicode Full' 'Deprecated') at: encodingID + 1! !!TTCharacterMappingTable methodsFor: 'initialization' stamp: 'mt 8/4/2022 11:17' prior: 97935907!prepareFromUnicode	"Nothing to do. #characterMap is already organized in Unicode code points. See TTFontReader >> #cmapArrayOfSize:."	encodingID < 3 ifTrue: [		TTCharacterMappingDeprecated new			mappingTable: self;			signal].		platformID := -1. "Squeak"	encodingID := encodingID < 3		ifTrue: [4 "Deprecated"] ifFalse: [			encodingID = 3 ifTrue: [2 "BMP"] ifFalse: [3"Full"]].	macLanguageID := nil.! !Object subclass: #AbstractSound	instanceVariableNames: 'envelopes mSecsSinceStart samplesUntilNextControl scaledVol scaledVolIncr scaledVolLimit'	classVariableNames: 'FloatScaleFactor MaxScaledValue PitchesForBottomOctave ScaleFactor Sounds TopOfBottomOctave UnloadedSnd'	poolDictionaries: ''	category: 'Sound-Synthesis'!!AbstractSound methodsFor: 'file i/o' stamp: 'tpr 1/1/2023 15:07' prior: 16998439!storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream	"Store my samples on the given stream at the current SoundPlayer sampling rate. If bigFlag is true, then each 16-bit sample is stored most-significant byte first (AIFF files), otherwise it is stored least-significant byte first (WAV files). If self isStereo is true, both channels are stored, creating a stereo file. Otherwise, only the left channel is stored, creating a mono file."	| bufSize stereoBuffer reverseBytes streamDirect |	self reset.	bufSize := (2 * self samplingRate rounded) min: samplesToStore.  "two second buffer"	stereoBuffer := SoundBuffer newStereoSampleCount: bufSize.	streamDirect := aBinaryStream isKindOf: StandardFileStream.	reverseBytes := (bigEndianFlag xor: Smalltalk isBigEndian) xor: streamDirect not.	'Storing audio...'		displayProgressFrom: 0 to: samplesToStore during: [:bar | | remaining out |			remaining := samplesToStore.			[remaining > 0] whileTrue: [				bar value: samplesToStore - remaining.				stereoBuffer primFill: 0.  "clear the buffer"				self playSampleCount: (bufSize min: remaining) into: stereoBuffer startingAt: 1.				out := self isStereo						ifTrue: [stereoBuffer]						ifFalse: [stereoBuffer extractLeftChannel].				reverseBytes ifTrue: [out reverseEndianness].				streamDirect					ifTrue:  "optimization for files: write sound buffer directly to file"						[aBinaryStream next: (out size // 2 min: remaining// 2) putAll: out startingAt: 1]  "size in words"					ifFalse:  "for non-file streams:"						[1 to: (out monoSampleCount min: remaining) do: [:i | aBinaryStream int16: (out at: i)]].				remaining := remaining - bufSize]].! !!AbstractSound methodsFor: 'file i/o' stamp: 'mt 1/15/2024 18:33' prior: 33570530!storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream	"Store my samples on the given stream at the current SoundPlayer sampling rate. If bigFlag is true, then each 16-bit sample is stored most-significant byte first (AIFF files), otherwise it is stored least-significant byte first (WAV files). If self isStereo is true, both channels are stored, creating a stereo file. Otherwise, only the left channel is stored, creating a mono file."	| bufSize stereoBuffer reverseBytes streamDirect |	self reset.	bufSize := (2 * self samplingRate rounded) min: samplesToStore.  "two second buffer"	stereoBuffer := SoundBuffer newStereoSampleCount: bufSize.	streamDirect := aBinaryStream isKindOf: StandardFileStream.	reverseBytes := (bigEndianFlag xor: Smalltalk isBigEndian) xor: streamDirect not.	'Storing audio...'		displayProgressFrom: 0 to: samplesToStore during: [:bar | | remaining out |			remaining := samplesToStore.			[remaining > 0] whileTrue: [				bar value: samplesToStore - remaining.				stereoBuffer primFill: 0.  "clear the buffer"				self playSampleCount: (bufSize min: remaining) into: stereoBuffer startingAt: 1.				out := self isStereo						ifTrue: [stereoBuffer]						ifFalse: [stereoBuffer extractLeftChannel].				reverseBytes ifTrue: [out reverseEndianness].				streamDirect					ifTrue:  "optimization for files: write sound buffer directly to file"						[aBinaryStream next: (out size // 2 min: remaining) putAll: out startingAt: 1]  "size in words"					ifFalse:  "for non-file streams:"						[1 to: (out monoSampleCount min: remaining * 2) do: [:i | aBinaryStream int16: (out at: i)]].				remaining := remaining - bufSize]].! !!AbstractSound methodsFor: 'file i/o' stamp: 'ct 9/25/2023 20:06'!storeSamples: samples count: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream	| reverseBytes streamDirect |	streamDirect := aBinaryStream isKindOf: StandardFileStream.	reverseBytes := (bigEndianFlag xor: Smalltalk isBigEndian) xor: streamDirect not.	reverseBytes ifTrue: [samples reverseEndianness].	streamDirect		ifTrue:  "optimization for files: write sound buffer directly to file"			[aBinaryStream next: (samples size // 2 min: samplesToStore // 2) putAll: samples startingAt: 1]  "size in words"		ifFalse:  "for non-file streams:"			[1 to: (samples monoSampleCount min: samplesToStore) do: [:i | aBinaryStream int16: (samples at: i)]].	reverseBytes ifTrue: [samples reverseEndianness].  "restore to original endianness"! !InstructionStream variableSubclass: #Context	instanceVariableNames: 'stackp method closureOrNil receiver'	classVariableNames: 'MaxLengthForASingleDebugLogReport MaxStackDepthForASingleDebugLogReport PrimitiveFailToken QuickStep ValueIndex'	poolDictionaries: ''	category: 'Kernel-Methods'!!Context methodsFor: 'instruction decoding implicit literals' stamp: 'mt 12/20/2023 13:23'!methodReturnSpecialConstant: value	"Simulate the action of a 'return constant' bytecode whose value is the	 argument, value. This corresponds to a source expression like '^0'."	^self return: value from: self methodReturnContext! !SimpleHaloMorph subclass: #HaloMorph	instanceVariableNames: 'innerTarget angleOffset minExtent growingOrRotating directionArrowAnchor haloBox simpleMode originalExtent'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!HaloMorph methodsFor: 'private' stamp: 'mt 8/8/2022 12:04' prior: 31574163!addHandlesForWorldHalos	"Add handles for world halos, like the man said"	| box w |	w := self world ifNil:[target world].	self removeAllMorphs.  "remove old handles, if any"	self bounds: target bounds.	box := w bounds insetBy: self handleSize // 2.	target addWorldHandlesTo: self box: box.	Preferences uniqueNamesInHalos ifTrue:		[innerTarget assureExternalName].	self		addNameBeneath: box		string: innerTarget externalName.	growingOrRotating := false.	self layoutChanged.	self changed.! !!HaloMorph methodsFor: 'private' stamp: 'mt 8/8/2022 11:47' prior: 31580945!basicBox	| minSide outset anExtent aBox w |	minSide := 4 * self handleSize.	outset := (8 * RealEstateAgent scaleFactor) truncated.	anExtent := (self extent + self handleSize + outset) max: minSide asPoint.	aBox := Rectangle center: self center extent: anExtent.	w := self world ifNil:[target outermostWorldMorph].	^ w		ifNil:			[aBox]		ifNotNil:			[aBox intersect: (w viewBox insetBy: self handleSize // 2)]! !Object subclass: #Morph	instanceVariableNames: 'bounds owner submorphs fullBounds color extension'	classVariableNames: 'HaloForAll IndicateKeyboardFocus MetaMenuForAll PreferredCornerRadius UseSoftDropShadow'	poolDictionaries: ''	category: 'Morphic-Kernel'!!Morph methodsFor: '*60Deprecated-WiW support' stamp: 'mt 11/30/2023 18:06' prior: 57679243!addMorphInFrontOfLayer: aMorph	self flag: #deprecated. "Use #addMorphFrontInLayer: instead".	^ self addMorphFrontInLayer: aMorph! !SqueakSSL class	instanceVariableNames: ''!!SqueakSSL class methodsFor: 'examples' stamp: 'mt 12/13/2023 11:20' prior: 90333505!exampleCertFile	"openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj ""/CN=example.com"" -addext ""subjectAltName=DNS:example.com,DNS:*.example.com,IP:10.0.0.1"""	^'-----BEGIN PRIVATE KEY-----MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCiCX5ERZ8AHj9p+tHhW2xBhwRcAqBzP0X4mQ82sxG8u5mDy9FLBZ+9kGE7GrPkV8nsDzdoZOuXEezptD0ql2f58PLSNE2ptIONkMJ0oNckwJxIrlgs2hu/PMeBnWQHa5g1XhbGyYQKSdQ8wCgtPwwB/magnnPLwLVC+9IQ7FZK2pCXzK155JJSovr84efkrU9+6jifFtmftf8NI0CMdcMTB6oGbOaBni1o4Nb8OQ7yIwdfyS3l4scwQe56SRDG9Uu1O6fz0jbZCHvi9XxkmQDXOdJTMvyfs77JgS8zCVuNHby4czhHuahMwedUpH7NVXT4foOJwMRBbwvme8MWEaw7AgMBAAECggEAQRI75VHqMON0xuwlhfEvb783ZnXdlnqV8GgTHn3aBSd3VmCu64hWJovJKDGohW4l1kkkEKXaoF/f+thZafXEmTCEaxr7B0hJPjwggzKmQ4mgGWX+XgC2/Nz9J5WbuokgZmojDnCVuIX+l+j5GXaErXZLI3yOdwgsIrq7GPW4D7XDjLrQHnvHgu148C8JMQ6fG5n6CEG8jxuOawbLorq6DK1kNs5mnbTRvkL0R8GTuXW7TRXGMlR33IwZhCyDLF5018WjsbWzVjCAffSsfokgEPqZgquIvfRB2e7XjthvvRFM5NYoRdoqnO8uXhsCwnFY/TB0Xi9RH0PUWedtvpT77QKBgQDFuoWKCogw8uizE2jpgpbXWoVr/lijpJMdeFw9yg7zMAtNYMvxZcGgLXzvjc9KXHeIkoaLtbXt3FpzsPNUfYhVHQ0pvjcqFZ9gD2EVs1UysaF4PMFkZ6NpfmSWi6xZ2iJF3Oy+spQPr6ZswjIkjAr+T3TUDH9WnxFUUG0/AF4YZQKBgQDRykDSe+ofSqPCZJFrXRDKwFsJd88m+Al+U3kdityeLYJ/jiWKxHNTVMzUKPp2SWzdkaDRPJXSIm2fwZFPWvZPr8oJqrXDvSwao+Q3bUqbude6b5JgHSE3Xc9as2BO4gHPwFBCrHGQeKISvQmb0z+QqQOZyDmArI46umddo4JYHwKBgCfFUqLnZ2lhEokieFGvoKOEY53LNQ0FR0oAMZ2EDOnBWiSgOaU+cGnFfIG6pl0wqCJiRonHbOaBEfh/ORJfhZKJG2KwDex7GOl7bm2s+pANxoqmvcdySR4o/BaD1ZDlHUusGjppNPrKu9DYZrmPKY7pcHhOYzaLHDM3UiH/8u05AoGAN/VT7xEAdRJKtgpvQ40ScpJ2dgMQLVvR5HFNiBTHHiYTfgSjfO1DucGP1TONA0o4kK1MkSMw71khlpBiOyGPO9gu8v8m9qwZ/I0kzagIU5txsJgcGikK+CK8sXvRP5lHVGv+vJoUvK2AxbDIxFjHxsVeYYGn3OuqEH4yHicEGI8CgYAZLitj9q/W00FEWkG/FWmoejWGiNUl/ai7En8K8NLqeIcLia2hC9r+xe8xc+0OM1S3KGinDHmgZPcPRo85Hz4JyozuzSOMDI7g/3lhRBqg8W3FTeoUEXbsVoBNHfjeX9kIq5c78suOVIEiSZwAwnKF1LSOcZq8PTyAYbSrZhasrw==-----END PRIVATE KEY----------BEGIN CERTIFICATE-----MIIDOzCCAiOgAwIBAgIUL+Mi0YdB/8S6zFrHgPLOJptOtHMwDQYJKoZIhvcNAQELBQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wHhcNMjMxMjEzMTAwOTM5WhcNMzMxMjEwMTAwOTM5WjAWMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKIJfkRFnwAeP2n60eFbbEGHBFwCoHM/RfiZDzazEby7mYPL0UsFn72QYTsas+RXyewPN2hk65cR7Om0PSqXZ/nw8tI0Tam0g42QwnSg1yTAnEiuWCzaG788x4GdZAdrmDVeFsbJhApJ1DzAKC0/DAH+ZqCec8vAtUL70hDsVkrakJfMrXnkklKi+vzh5+StT37qOJ8W2Z+1/w0jQIx1wxMHqgZs5oGeLWjg1vw5DvIjB1/JLeXixzBB7npJEMb1S7U7p/PSNtkIe+L1fGSZANc50lMy/J+zvsmBLzMJW40dvLhzOEe5qEzB51Skfs1VdPh+g4nAxEFvC+Z7wxYRrDsCAwEAAaOBgDB+MB0GA1UdDgQWBBTc4pCPjpb59wQPZ/6fioWD5rOf/DAfBgNVHSMEGDAWgBTc4pCPjpb59wQPZ/6fioWD5rOf/DAPBgNVHRMBAf8EBTADAQH/MCsGA1UdEQQkMCKCC2V4YW1wbGUuY29tgg0qLmV4YW1wbGUuY29thwQKAAABMA0GCSqGSIb3DQEBCwUAA4IBAQAjaaietK4UT/GyAq02axPfnNU51QbtPYpSwqVKDALGDDALFga+uI/dKqrgpjCOMqtxLl9OddOSGbBL8m0n1G3BFiMi1MRmlUwkODnh83sLNYM4QrDY9mMyBG9vG44JSc3570w5bw1xvgtI9M/xakeS7zO9EsmxLNRKY6+TQO/CDLcmb9yluIToEEqlybH0FpYfpa9MdhesTFEicVuWC1g8STEnwWl7UQTkyOsm3CZ25o2zXLVco23RBm2uj8c7X2ZBHGodpEafx1ZipkaMgbx1bXoZfP6iB7FBQWnkpHD/mmyUfR1Lgqj1iNNJhLy0WfUekox/ArlEcQSL3FVa9MsX-----END CERTIFICATE-----'! !!SqueakSSL class methodsFor: 'examples' stamp: 'mt 12/13/2023 11:21' prior: 90335506!exampleCertPFX	"openssl pkcs12 -export -out example.pfx -inkey key.pem -in cert.pem"	^ #[48 130 10 15 2 1 3 48 130 9 197 6 9 42 134 72 134 247 13 1 7 1 160 130 9 182 4 130 9 178 48 130 9 174 48 130 4 34 6 9 42 134 72 134 247 13 1 7 6 160 130 4 19 48 130 4 15 2 1 0 48 130 4 8 6 9 42 134 72 134 247 13 1 7 1 48 87 6 9 42 134 72 134 247 13 1 5 13 48 74 48 41 6 9 42 134 72 134 247 13 1 5 12 48 28 4 8 103 18 77 220 159 29 113 68 2 2 8 0 48 12 6 8 42 134 72 134 247 13 2 9 5 0 48 29 6 9 96 134 72 1 101 3 4 1 42 4 16 183 181 167 126 79 22 105 231 21 42 71 183 214 234 94 208 128 130 3 160 156 160 56 66 21 77 52 200 121 35 133 211 210 201 62 138 231 226 58 235 35 51 57 178 148 172 38 84 184 159 164 73 37 190 174 42 34 137 82 163 82 43 194 88 227 214 225 120 27 88 80 22 35 235 15 67 106 200 221 41 80 206 76 1 246 203 42 187 3 210 108 4 29 197 31 185 201 91 211 139 231 102 246 74 93 233 185 188 35 245 134 116 233 24 186 31 204 122 103 143 174 235 193 98 180 243 168 141 221 208 202 201 171 164 114 134 69 236 2 253 197 127 150 66 30 102 198 96 25 31 225 136 227 192 70 125 115 131 21 146 105 26 243 200 33 116 197 61 126 104 213 133 95 177 247 164 152 18 25 31 180 63 61 147 110 31 74 70 51 171 104 80 90 211 151 231 240 162 189 158 108 160 67 27 243 63 16 245 108 240 34 107 167 153 104 223 252 162 227 234 123 198 164 238 22 242 67 152 234 50 10 146 56 13 191 154 66 81 200 249 181 53 46 196 202 234 27 18 152 166 252 188 168 101 157 232 60 156 225 19 129 41 158 96 207 16 188 3 56 131 22 205 63 243 10 186 202 139 135 95 1 90 45 48 66 226 233 66 179 114 73 69 79 115 190 146 89 235 164 15 210 165 101 252 31 18 55 172 120 22 170 171 167 98 89 33 26 24 17 209 131 139 54 115 160 161 83 241 211 137 99 24 29 240 177 210 197 46 141 129 223 33 196 199 237 230 181 55 221 246 94 175 171 81 241 172 253 144 40 84 186 88 60 149 231 31 96 120 182 82 29 134 4 248 226 180 216 157 242 173 98 7 207 140 217 109 110 122 71 250 85 62 77 43 229 107 149 255 182 244 129 230 43 73 10 205 103 55 113 0 63 45 75 214 7 28 207 1 174 217 183 33 18 254 247 131 41 224 231 181 207 91 178 187 204 159 111 165 226 63 193 43 27 4 146 4 49 102 220 113 68 59 219 147 168 223 68 115 65 131 174 126 127 12 244 76 112 68 115 57 74 33 210 69 207 69 34 97 67 119 190 33 148 84 29 42 250 42 155 186 6 158 79 11 92 70 71 101 206 76 138 169 21 167 16 62 51 100 5 159 215 204 199 22 227 175 232 161 255 194 13 217 160 245 255 164 85 156 178 246 162 26 136 62 159 119 124 44 241 244 97 178 170 127 140 167 168 91 18 4 154 40 64 95 11 42 176 92 169 56 105 156 14 19 144 201 17 96 115 70 89 159 221 240 98 83 55 79 225 145 137 171 233 214 245 147 67 55 25 110 149 42 50 204 77 163 131 45 33 185 216 143 120 17 91 99 116 87 23 95 150 158 183 44 197 198 121 172 201 151 198 219 91 167 147 194 109 250 183 4 85 139 126 110 91 131 195 192 211 3 138 220 185 43 81 198 97 48 248 10 189 13 164 107 158 247 243 156 223 164 61 51 219 252 79 107 126 14 123 140 34 126 49 180 76 14 86 255 30 77 98 37 114 55 231 140 174 54 80 78 126 177 94 70 99 71 2 78 250 100 133 68 139 2 219 192 198 75 203 199 186 3 35 104 195 38 55 118 215 168 52 254 81 38 233 94 87 40 145 44 57 115 142 19 167 25 9 20 145 96 103 176 65 191 60 185 98 24 207 220 29 176 34 13 177 153 104 52 239 58 237 60 117 188 165 222 97 252 88 218 59 214 194 53 241 222 241 121 68 38 142 159 177 229 117 140 139 82 13 233 53 188 12 23 23 144 93 126 254 240 107 2 178 14 60 112 85 12 40 187 201 94 50 2 126 199 219 68 226 163 0 100 88 10 29 58 195 207 215 202 245 239 158 105 149 174 201 98 21 184 92 144 187 32 250 141 142 41 40 200 198 70 9 249 204 106 92 169 113 62 44 101 236 137 100 64 149 6 117 106 243 193 65 155 82 32 156 232 215 179 9 137 60 4 98 4 1 196 169 126 40 118 121 223 98 253 250 229 131 161 216 1 1 127 77 63 157 83 176 138 75 250 225 71 108 234 201 9 104 32 222 240 148 80 39 93 74 85 165 170 207 190 133 66 229 230 240 37 150 248 94 77 228 251 243 191 179 72 48 130 5 132 6 9 42 134 72 134 247 13 1 7 1 160 130 5 117 4 130 5 113 48 130 5 109 48 130 5 105 6 11 42 134 72 134 247 13 1 12 10 1 2 160 130 5 49 48 130 5 45 48 87 6 9 42 134 72 134 247 13 1 5 13 48 74 48 41 6 9 42 134 72 134 247 13 1 5 12 48 28 4 8 180 145 14 150 64 7 15 30 2 2 8 0 48 12 6 8 42 134 72 134 247 13 2 9 5 0 48 29 6 9 96 134 72 1 101 3 4 1 42 4 16 255 227 244 162 147 9 240 210 41 151 69 214 59 186 183 215 4 130 4 208 177 154 79 226 105 127 179 131 99 30 205 41 84 80 234 191 90 61 225 104 204 78 12 63 144 84 50 6 201 246 52 40 170 170 96 138 168 86 141 120 219 151 7 225 52 30 100 87 104 205 163 227 217 210 126 78 179 151 33 192 244 227 120 50 248 179 94 10 204 184 177 198 243 78 22 186 58 18 115 194 96 109 116 53 110 120 147 69 200 104 25 206 72 171 255 71 206 8 92 57 70 12 152 208 189 157 225 106 195 170 76 227 104 149 23 119 117 153 94 160 44 160 168 107 243 51 107 4 225 65 97 60 127 95 163 183 38 250 229 110 181 218 103 115 222 43 247 213 126 12 84 0 201 41 143 18 237 93 23 57 188 148 155 102 226 106 223 90 188 63 105 134 248 128 3 239 104 142 120 200 38 196 162 228 134 242 189 206 253 70 13 113 10 76 167 123 53 210 42 167 41 187 86 136 12 197 239 175 56 21 12 127 69 246 15 86 203 252 242 58 213 100 156 176 101 140 10 19 11 86 137 181 184 169 207 57 37 95 203 36 205 136 69 165 149 181 208 73 181 60 197 232 5 246 228 230 59 47 56 133 180 206 59 233 173 83 6 179 218 159 152 82 140 206 248 220 90 180 203 24 99 197 208 58 205 58 25 95 201 251 59 36 41 202 28 197 140 134 181 121 249 23 246 165 172 223 21 62 25 191 19 74 235 177 47 78 52 137 107 207 190 229 1 118 103 217 134 39 63 4 143 141 157 41 69 216 103 111 10 208 176 146 150 43 150 244 51 240 6 191 29 229 28 207 234 233 48 204 131 127 30 243 53 187 112 113 145 91 225 35 27 187 15 220 3 24 173 28 105 23 254 35 184 191 86 8 48 101 26 86 51 3 124 82 242 200 234 147 241 173 166 57 50 200 52 149 240 206 42 71 84 210 151 26 180 67 218 226 213 158 193 169 174 225 103 124 187 171 1 3 196 109 174 151 213 245 16 179 241 237 38 237 247 78 64 32 62 87 154 30 12 174 217 168 239 152 255 154 233 199 196 234 164 67 236 227 83 31 134 133 141 226 205 46 105 72 58 255 160 121 140 49 221 1 88 144 47 228 2 23 238 249 8 190 78 156 1 232 100 213 29 176 248 152 231 253 125 253 70 147 44 233 79 72 214 160 21 247 162 11 93 146 85 63 78 237 75 50 244 210 151 241 46 45 35 206 178 2 214 7 225 115 143 142 190 128 38 33 157 208 242 101 81 69 204 44 82 254 37 254 4 2 241 179 39 18 162 187 185 160 235 155 47 24 99 7 85 57 66 182 172 97 220 84 31 163 50 137 7 67 114 156 185 78 193 206 191 109 204 204 168 30 0 87 66 142 193 169 33 248 141 155 222 225 198 240 201 238 221 255 182 232 253 0 22 110 112 30 180 210 157 198 240 206 238 39 55 67 231 34 89 167 209 100 121 200 193 221 125 201 104 162 29 231 109 132 163 28 231 62 124 133 179 131 89 27 41 86 125 173 163 249 136 182 36 245 203 231 63 228 67 211 201 254 230 110 29 187 54 212 147 244 73 56 22 168 175 249 160 194 230 120 134 90 3 203 53 173 198 151 80 226 173 89 9 109 51 181 144 71 138 33 169 69 115 120 74 214 66 49 216 55 107 211 89 104 217 30 164 167 96 74 126 106 186 128 2 151 122 148 200 70 206 15 29 50 162 146 160 84 173 161 72 172 136 114 246 170 60 91 206 82 151 231 243 43 210 96 237 7 187 28 32 96 74 182 98 93 29 244 90 10 59 163 184 23 223 185 102 244 131 42 133 197 240 20 0 3 118 155 141 243 133 232 40 240 204 224 107 2 74 249 189 190 198 160 178 177 92 129 115 149 31 199 194 216 162 55 151 126 78 137 57 76 57 6 217 206 25 219 158 203 62 66 77 165 27 204 195 198 81 124 13 4 23 228 16 2 110 97 154 91 112 170 181 118 186 241 103 239 249 113 38 236 27 78 245 53 224 114 155 1 146 23 227 22 55 57 64 116 85 35 33 56 248 115 197 88 223 245 166 197 248 66 164 251 7 208 129 204 212 34 184 178 223 243 195 40 64 95 230 40 218 48 130 114 7 177 82 36 253 170 2 213 5 90 166 55 180 201 135 252 217 115 120 234 74 40 44 191 35 193 190 63 150 33 150 82 252 236 177 164 81 157 165 51 233 214 195 239 194 183 34 232 139 42 204 139 232 80 24 101 151 118 205 148 68 124 46 81 141 63 230 26 165 230 213 232 75 75 196 215 183 118 223 244 32 167 118 58 237 78 141 196 80 250 214 63 26 120 78 89 94 113 45 129 42 97 125 78 192 232 246 214 182 174 41 193 124 11 244 246 139 75 249 133 151 183 78 112 246 239 65 67 217 123 75 20 123 249 73 222 101 28 215 193 254 201 74 50 147 208 162 100 158 162 95 44 16 123 50 47 99 238 169 92 116 175 44 63 55 111 232 151 212 7 231 248 231 181 137 245 222 116 23 244 154 141 201 159 37 238 132 170 2 81 69 129 169 126 201 126 39 225 98 62 2 231 110 247 82 135 27 177 121 150 67 16 168 210 114 45 141 202 194 69 1 169 56 215 255 34 46 68 13 92 203 159 141 205 151 60 158 204 190 226 95 66 220 192 229 39 12 248 204 54 102 116 188 124 138 168 254 100 190 179 179 81 216 31 33 87 143 157 211 68 205 34 203 86 70 128 206 232 148 125 151 83 223 169 51 157 24 157 84 30 228 133 197 1 255 170 49 37 48 35 6 9 42 134 72 134 247 13 1 9 21 49 22 4 20 87 124 160 84 181 56 24 233 231 180 24 109 231 144 46 141 63 77 152 193 48 65 48 49 48 13 6 9 96 134 72 1 101 3 4 2 1 5 0 4 32 220 213 8 186 204 89 159 141 190 205 136 33 124 205 208 233 171 19 20 144 93 188 171 145 6 85 166 126 72 53 118 181 4 8 60 42 49 100 104 27 8 58 2 2 8 0]! !InstructionClient subclass: #ImplicitLiteralFinder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Methods'!!ImplicitLiteralFinder methodsFor: 'instruction decoding - implicit literals' stamp: 'mt 12/20/2023 13:19'!methodReturnSpecialConstant: value	^value! !InstructionStream subclass: #Decompiler	instanceVariableNames: 'constructor method instVars tempVars constTable stack statements lastPc exit caseExits lastJumpPc lastReturnPc limit hasValue blockStackBase numLocalTemps blockStartsToTempVars tempVarCount lastJumpIfPcStack tempReadCounts'	classVariableNames: 'ArgumentFlag CascadeFlag CaseFlag IfNilFlag OtherwiseFlag'	poolDictionaries: ''	category: 'Compiler-Kernel'!!Decompiler methodsFor: 'instruction decoding' stamp: 'mt 12/20/2023 13:24'!methodReturnSpecialConstant: value	^self methodReturnConstant: value! !StringMorph subclass: #MenuItemMorph	instanceVariableNames: 'isEnabled subMenu isSelected target selector arguments icon'	classVariableNames: 'SubMenuMarker'	poolDictionaries: ''	category: 'Morphic-Menus'!!MenuItemMorph methodsFor: 'drawing' stamp: 'mt 10/11/2022 10:07' prior: 55161671!drawLabelOn: aCanvas 	| stringBounds |		stringBounds := self bounds.		self hasIcon ifTrue: [		stringBounds := stringBounds left: stringBounds left + self iconForm width + (2 * RealEstateAgent scaleFactor) truncated ].	self hasMarker ifTrue: [		stringBounds := stringBounds left: stringBounds left + self submorphBounds width + (8 * RealEstateAgent scaleFactor) truncated ].		aCanvas		drawString: self contents		at: stringBounds left @ (stringBounds center y - (self fontToUse height // 2))		font: self fontToUse		color: self colorToUse.! !!MenuItemMorph methodsFor: 'initialization' stamp: 'mt 10/11/2022 10:07' prior: 55175936!defaultBounds"answer the default bounds for the receiver"	^ 0 @ 0 extent: (10 @ 10 * RealEstateAgent scaleFactor) truncated! !!MenuItemMorph methodsFor: 'layout' stamp: 'mt 10/11/2022 10:07' prior: 55178534!minHeight	| iconHeight |	iconHeight := self hasIcon				ifTrue: [self icon height + (2 * RealEstateAgent scaleFactor) truncated]				ifFalse: [0].	^ self fontToUse lineGridForMorphs max: iconHeight! !!MenuItemMorph methodsFor: 'layout' stamp: 'mt 10/11/2022 10:08' prior: 55179814!minWidth	| subMenuWidth iconWidth markerWidth |	subMenuWidth := self hasSubMenu		ifTrue: [ 10 ]		ifFalse: [ 0 ].	iconWidth := self hasIcon		ifTrue: [ self icon width + (2 * RealEstateAgent scaleFactor) truncated ]		ifFalse: [ 0 ].	markerWidth := self hasMarker		ifTrue: [ self submorphBounds width + (8 * RealEstateAgent scaleFactor) truncated ]		ifFalse: [ 0 ].	^(self fontToUse widthOfString: contents)		+ subMenuWidth + iconWidth + markerWidth + self stringMargin! !Collection subclass: #HashedCollection	instanceVariableNames: 'tally array'	classVariableNames: 'GoodPrimes'	poolDictionaries: ''	category: 'Collections-Abstract'!!HashedCollection methodsFor: 'objects from disk' stamp: 'mt 9/28/2023 10:24' prior: 31861973!comeFullyUpOnReload: smartRefStream	"Symbols have new hashes in this image."	self rehash! !SHTextStyler subclass: #SHTextStylerST80	instanceVariableNames: 'classOrMetaClass workspace font parser formatAssignments environment sourceMap processedSourceMap pixelHeight attributesByPixelHeight parseAMethod context'	classVariableNames: 'EnforceItalicEmphasisInComments SyntaxHighlightingAsYouTypeAnsiAssignment SyntaxHighlightingAsYouTypeLeftArrowAssignment TextAttributesByPixelHeight'	poolDictionaries: ''	category: 'ShoutCore-Styling'!!SHTextStylerST80 methodsFor: 'style table' stamp: 'mt 7/3/2022 11:58' prior: 85155933!createTextAttributesForPixelHeight: aNumber	| result |	 	result := IdentityDictionary new.	result at: #default put: {}. "Required as fall-back for non-existing attributes."		self class themeProperties do: [:each |		| spec element emphasis font color |		element := each first.		spec := self userInterfaceTheme perform: element.		spec isArray ifFalse: [spec := {spec}]. "Support color-only hints."				color := spec first ifNotNil: [:colorSpec | Color colorFrom: colorSpec].		emphasis := spec at: 2 ifAbsent:[nil].		font := spec at: 3 ifAbsent: [nil].				(element == #comment and: [self class enforceItalicEmphasisInComments])			ifTrue: [				emphasis					ifNil: [emphasis := TextEmphasis italic]					ifNotNil: [						emphasis isArray							ifFalse: [emphasis := {emphasis}, {TextEmphasis italic}]							ifTrue: [emphasis := emphasis, {TextEmphasis italic}].				emphasis := emphasis asSet asArray "no double italic"]].				"Support for named text styles."		font isString ifTrue: [			| textStyle |			textStyle := TextStyle named: font.			font := textStyle ifNotNil: [textStyle fontOfSize: aNumber]].		(self createAttributeArrayForColor: color emphasis: emphasis font: font)			ifNotEmpty: [:attrArray | result at: element put: attrArray]].	^ result! !!SHTextStylerST80 commentStamp: 'tween 8/27/2004 10:55' prior: 0!I style Smalltalk methods and expressions.My 'styleTable' class instance var holds an array ofArrays which control how each token is styled/coloured. See my defaultStyleTable class method for its structure.My styleTable can be changed by either modifying the defaultStyleTable class method and then executing SHTextStylerST80 initialize ; or by giving me a new styleTable through my #styleTable: class method.My 'textAttributesByPixelSize' class instance var contains a dictionary of dictionaries.	The key is a pixelSize and the value a Dictionary from token type Symbol to TextAttribute array.	It is created/maintained automatically.	I also install these 3 preferences when my class initialize method is executed....	#syntaxHighlightingAsYouType  - controls whether methods are styled in browsers	#syntaxHighlightingAsYouTypeAnsiAssignment - controls whether assignments are formatted to be :=	#syntaxHighlightingAsYouTypeLeftArrowAssignment - controls whether assignments are formatted to be _I reimplement #unstyledTextFrom: so that TextActions are preserved in the unstyled text 					 	!SHTextStylerST80 class	instanceVariableNames: ''!!SHTextStylerST80 class methodsFor: 'preferences' stamp: 'mt 7/3/2022 11:56'!enforceItalicEmphasisInComments	<preference: 'Enforce Italic in Comments'		categoryList: #(browsing Accessibility)		description: 'When enabled, always typeset source-code comments in italic, regardless of the current UI theme. When disabled, depend on what the current UI theme prescribes as text attributes for such comments.'		type: #Boolean>	^ EnforceItalicEmphasisInComments ifNil: [true]! !!SHTextStylerST80 class methodsFor: 'preferences' stamp: 'mt 7/3/2022 11:50'!enforceItalicEmphasisInComments: aBooleanOrNil	EnforceItalicEmphasisInComments = aBooleanOrNil ifTrue: [^ self].	EnforceItalicEmphasisInComments := aBooleanOrNil.	self userInterfaceTheme apply. "Invalidate all styling caches."	! !Rectangle class	instanceVariableNames: ''!!Rectangle class methodsFor: 'instance creation' stamp: 'kfr 8/9/2022 07:05' prior: 66975971!encompassing: listOfPoints	"A number of callers of encompass: should use this method."	| topLeft bottomRight |	topLeft := bottomRight := nil.	listOfPoints do:		[:p | topLeft == nil			ifTrue: [topLeft := bottomRight := p]			ifFalse: [topLeft := topLeft min: p.					bottomRight := bottomRight max: p]].	^self origin: topLeft corner: bottomRight! !!Rectangle class methodsFor: 'instance creation' stamp: 'kfr 8/9/2022 07:03' prior: 66979164!merging: listOfRects 	"A number of callers of merge: should use this method."	| minX minY maxX maxY |	listOfRects		do: [:r | minX				ifNil: [minX := r topLeft x. minY := r topLeft y.					maxX := r bottomRight x. maxY := r bottomRight y]				ifNotNil: [minX := minX min: r topLeft x. minY := minY min: r topLeft y.					maxX := maxX max: r bottomRight x. maxY := maxY max: r bottomRight y]].	^self origin: minX@minY corner: maxX@maxY! !Time class	instanceVariableNames: ''!!Time class methodsFor: 'preferences' stamp: 'mt 2/22/2023 11:13'!useHighResClockForTiming: booleanOrNil	UseHighResClockForTiming := booleanOrNil.! !!Time class methodsFor: 'system startup' stamp: 'mt 2/22/2023 11:13' prior: 117797223!startUp: resuming	resuming ifTrue: [		LastClockTick := 0.		HighResClockTicksPerMillisecond := 0 ]! !ReferenceStream subclass: #SmartRefStream	instanceVariableNames: 'structures steady reshaped renamed renamedConv superclasses progressBar objCount classInstVars'	classVariableNames: 'ScannedObject'	poolDictionaries: ''	category: 'System-Object Storage'!!SmartRefStream methodsFor: 'read write' stamp: 'mt 3/31/2023 12:56' prior: 89015717!initKnownRenames	renamed		at: #FlasherMorph put: #Flasher;		at: #AlansTextPlusMorph put: #TextPlusMorph;		at: #Project put: #MorphicProject;		at: #Presenter put: #EtoysPresenter;		at: #InputSensor put: #EventSensor;		at: #MultiNewParagraph put: #NewParagraph;		yourself! !Morph subclass: #SketchMorph	instanceVariableNames: 'originalForm rotationStyle scalePoint framesToDwell rotatedForm keepAspectRatio'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!SketchMorph methodsFor: 'menu' stamp: 'ar 8/6/2009 20:45' prior: 88092522!reduceColorPalette: evt	"Let the user ask for a reduced number of colors in this sketch"	| str nColors |	str := UIManager default		request: 'Please enter a number greater than one.(note: this cannot be undone, so answer zeroto abort if you need to make a backup first)' translated		initialAnswer: '256'.	nColors := Integer readFrom: (ReadStream on: str).	(nColors between: 2 and: 256) ifFalse: [^ self].	originalForm := originalForm copyWithColorsReducedTo: nColors.	rotatedForm := nil.	self changed! !Object subclass: #ImplicitLiteralInstructionClientHook	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Methods'!!ImplicitLiteralInstructionClientHook methodsFor: 'instruction decoding - implicit literals' stamp: 'mt 12/20/2023 13:19'!methodReturnSpecialConstant: value	"This is a hook to allow clients to intercept implicit literal bytecodes"	^self methodReturnConstant: value! !ByteArray variableByteSubclass: #CompiledCode	instanceVariableNames: ''	classVariableNames: 'LargeFrame PreferredBytecodeSetEncoderClass PrimaryBytecodeSetEncoderClass SecondaryBytecodeSetEncoderClass SmallFrame'	poolDictionaries: ''	category: 'Kernel-Methods'!!CompiledCode methodsFor: 'literals' stamp: 'mt 12/15/2023 10:52'!allImplicitLiteralsDo: aBlock	self codeLiteralsDo: [:compiledCode |		compiledCode implicitLiteralsDo: aBlock].! !!CompiledCode methodsFor: 'literals' stamp: 'mt 12/15/2023 10:29' prior: 23559669!allLiteralsDo: aBlock	"Overwritten to really enumerate all literals. Also the implicit ones."		self		allLiteralsDo: aBlock		scanForSpecial: true.! !!CompiledCode methodsFor: 'literals' stamp: 'mt 12/15/2023 10:27'!allLiteralsDo: aBlock scanForSpecial: aBoolean	"Enumerate all literals thoroughly. Follow nested instances of CompiledCode. Do not treat compiled code as literals here."	self codeLiteralsDo: [:compiledCode |		compiledCode literalsDo: [:literal |			literal isCompiledCode ifFalse: [literal allLiteralsDo: aBlock scanForSpecial: aBoolean] ].		aBoolean ifTrue: [ "Enumerate special selectors/literals such as true/false."			compiledCode implicitLiteralsDo: aBlock] ].! !!CompiledCode methodsFor: 'literals' stamp: 'mt 12/15/2023 13:49'!hasImplicitLiteral: anImplicitLiteral	"Like #hasLiteral:, check thoroughly, whether anImplicitLiteral is in the receiver. See #allImplicitLiteralsDo:."		self allImplicitLiteralsDo: [:lit | (lit literalEqual: anImplicitLiteral) ifTrue: [^ true]].	^ false! !AlignmentMorph subclass: #PluggablePanelMorph	instanceVariableNames: 'model getChildrenSelector'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Morphic'!!PluggablePanelMorph methodsFor: 'update' stamp: 'ct 7/4/2022 18:39' prior: 63531534!update: selectorSymbolOrNil	selectorSymbolOrNil ifNil: [^ self].	selectorSymbolOrNil = getChildrenSelector ifTrue: [		self rebuildPaneAfter: [			| children |			children := self children.			self				 removeAllMorphs;				 addAllMorphs: children.			self containingWindow ifNotNil: [:window |				children do: [:child |					child adoptPaneColor: window paneColor]].						"Let my children take all the place unless my extent is described by them."			self hResizing ~~ #shrinkWrap ifTrue:				[self submorphsDo: [:m | m hResizing: #spaceFill]].			self vResizing ~~ #shrinkWrap ifTrue:				[self submorphsDo: [:m | m vResizing: #spaceFill]].						"Tell dependents about this update. There is no pluggable notification for changed submorphs."			self changed: #submorphs]].! !!PluggablePanelMorph methodsFor: 'private' stamp: 'ct 7/5/2022 09:25'!rebuildPaneAfter: replacePaneMorphsBlock	"Performance. Reset layout properties during children update to avoid intermediate relayouting."	| cellGap wantsGrips wantsPaneSplitters |	self flag: #duplication. "See PluggableSystemWindow>>#rebuildPaneAfter: and MorphicToolBuilder>>#buildPluggableWindow:."		cellGap := self cellGap.	wantsGrips := self wantsGrips.	wantsPaneSplitters := self wantsPaneSplitters.		self cellGap: 0.	self wantsPaneSplitters: false; wantsGrips: false.	self removePaneSplitters; removeGrips.		^ replacePaneMorphsBlock ensure: [		wantsPaneSplitters ifTrue: [			self wantsPaneSplitters: wantsPaneSplitters.			self addPaneSplitters].		wantsGrips ifTrue: [			self wantsGrips: wantsGrips.			self addGrips].		self cellGap: cellGap]! !ScrollPane subclass: #PluggableTextMorph	instanceVariableNames: 'textMorph getTextSelector setTextSelector getSelectionSelector hasUnacceptedEdits hasUserEdited askBeforeDiscardingEdits selectionInterval hasEditingConflicts editTextSelector wantsWrapBorder getFontSelector getTextStyleSelector'	classVariableNames: 'AdornmentCache SimpleFrameAdornments SoftLineWrap SoftLineWrapAtVisualWrapBorder VisualWrapBorder VisualWrapBorderLimit'	poolDictionaries: ''	category: 'Morphic-Pluggable Widgets'!!PluggableTextMorph methodsFor: 'drawing' stamp: 'mt 9/22/2023 14:09' prior: 63596465!drawFrameAdornment: aColor on: aCanvas 	"Indicate edit status for the text editor"	self class simpleFrameAdornments		ifTrue:			[ | adornmentWidth |			adornmentWidth := ((self valueOfProperty: #frameAdornmentWidth ifAbsent: [1])				* RealEstateAgent scaleFactor) truncated.			aCanvas				frameRectangle: self scroller bounds				width: adornmentWidth				color: aColor.			aCanvas				frameRectangle: (self scroller bounds insetBy: adornmentWidth)				width: adornmentWidth				color: (aColor alpha: aColor alpha / 3.0) ]		ifFalse:			[ | form |			"Class-side adornment cache is currently using pre-multiplied alpha, so we need to use rule 34 which works for < 32bpp, too."			form := self class adornmentWithColor: aColor.			aCanvas				image: form				at: self scroller bounds topRight - (form width @ 0)				sourceRect: form boundingBox				rule: 34 ]! !PluggableTextMorph class	instanceVariableNames: ''!!PluggableTextMorph class methodsFor: 'preferences' stamp: 'mt 7/4/2022 17:54' prior: 63708005!applyUserInterfaceTheme	self flushAdornmentCache.	TextEditor withAllSubclassesDo: [:cls |		cls initializeYellowButtonMenu.		cls initializeShiftedYellowButtonMenu].! !Morph subclass: #DialogWindow	instanceVariableNames: 'titleMorph messageMorph paneMorph buttonRow result selectedButton cancelButton timeout preferredPosition keyMap exclusive filter filterEnabled filterMorph autoCancel'	classVariableNames: 'GradientDialog IncludeCloseButton IncludeControlMenu RoundedDialogCorners UseWiggleAnimation'	poolDictionaries: ''	category: 'Morphic-Windows'!!DialogWindow methodsFor: 'initialization' stamp: 'mt 7/4/2022 18:09' prior: 26125052!setMessageParameters	| fontToUse colorToUse margins |	messageMorph ifNil: [^ self].	fontToUse := self userInterfaceTheme font ifNil: [TextStyle defaultFont].	colorToUse := self userInterfaceTheme textColor ifNil: [Color black].	margins := (TextStyle pointsToPixels: 5) truncated.	messageMorph		margins: (self wantsRoundedCorners			ifTrue: [margins @ (margins - self cornerRadius) corner: margins @ margins]			ifFalse: [margins]);		textColor: colorToUse;		textStyle: fontToUse asNewTextStyle. "Use style with other point sizes available"			"Style read-only text for copy interaction."	self flag: #todo. "mt: Duplication with PluggableTextMorph >> #setDefaultParameters"	(UserInterfaceTheme current get: #caretColor for: #PluggableTextMorph)		ifNotNil: [:c | messageMorph caretColor: c].	(UserInterfaceTheme current get: #selectionColor for: #PluggableTextMorph)		ifNotNil: [:c | 			self userInterfaceTheme color = (UserInterfaceTheme current get: #color for: #PluggableTextMorph)				ifTrue: [messageMorph selectionColor: c]				ifFalse: [					"Background is different than in a text field. Use dialog-title color to ensure contrast."					messageMorph selectionColor: self userInterfaceTheme titleColor]].! !RectangleMorph subclass: #TextMorph	instanceVariableNames: 'textStyle text wrapFlag paragraph editor container predecessor successor backgroundColor margins readOnly autoFit plainTextOnly numCharactersPerLine'	classVariableNames: 'CaretForm DefaultEditorClass'	poolDictionaries: ''	category: 'Morphic-Basic'!!TextMorph methodsFor: 'layout' stamp: 'mt 8/15/2022 12:33' prior: 99674698!minCompositionHeight	"Answer the minimal height for the receiver's composited contents. Without linebreaks, this height matches the default font's line grid. Note that we cannot use information from paragraph here, as it would require the text composition to have already happened."	^ (textStyle ifNil: [TextStyle default]) lineGrid! !!TextMorph methodsFor: 'layout' stamp: 'mt 8/15/2022 12:46' prior: 99674835!minCompositionWidth	"Answer the minimal width for the receiver's composited contents. Without specific content, this width could be zero but matches the default font's example text to avoid composition issues. Note that we cannot use information from paragraph here, as it would require the text composition to have already happened."	self flag: #todo. "mt: Fix issues in CompositionScanner to allow for 0 or at least fit a specific character to match the single-line metric in #minCompositionHeight."	^ ((textStyle ifNil: [TextStyle default]) defaultFont widthOf: $x) * 2! !!TextMorph methodsFor: 'layout' stamp: 'mt 8/15/2022 12:53' prior: 99677434!minHeight	"Answer the minimal height of the receiver to be used in Morphic layout policies. Avoid text composition if there is no paragraph yet to speed up overall layouting and avoid cyclic algorithmic dependencies. The minimal height is basically computed from text-composition metrics and extra decoration such as borders and margins."	| result |	result := (paragraph		ifNil: [self minCompositionHeight]		ifNotNil: [paragraph lines first lineHeight])			+ (self borderWidth*2).	margins ifNil: [^ result].		^ margins isRectangle		ifTrue: [result + margins top + margins bottom]		ifFalse: [margins isPoint			ifTrue: [result + margins y + margins y]			ifFalse: [result + (2*margins)]]! !!TextMorph methodsFor: 'layout' stamp: 'mt 8/15/2022 12:42' prior: 99680163!minWidth	"Answer the minimal width of the receiver to be used in Morphic layout policies. Avoid text composition if there is no paragraph yet to speed up overall layouting and avoid cyclic algorithmic dependencies. The minimal width is basically computed from text-composition metrics and extra decoration such as borders and margins."		| result |	result := self minCompositionWidth + (self borderWidth*2).	margins ifNil: [^ result].		^ margins isRectangle		ifTrue: [result + margins left + margins right]		ifFalse: [margins isPoint			ifTrue: [result + margins x + margins x]			ifFalse: [result + (2*margins)]]! !!TextMorph methodsFor: 'private' stamp: 'mt 8/15/2022 12:49' prior: 99710978!createParagraph	self setProperty: #CreatingParagraph toValue: true.	[		self setDefaultContentsIfNil.		"...Code here to recreate the paragraph..."		paragraph := (self paragraphClass new textOwner: self owner).		paragraph wantsColumnBreaks: successor notNil.		paragraph			compose: text			style: textStyle			from: self startingIndex			in: self container.		wrapFlag ifFalse:			["Was given huge container at first... now adjust"			paragraph adjustRightXDownTo: paragraph caretWidth].		paragraph focused: (self currentHand keyboardFocus == self).		paragraph			caretColor: self caretColor;			selectionColor: self selectionColor;			unfocusedSelectionColor: self unfocusedSelectionColor.				self fit.	] ensure: [self removeProperty: #CreatingParagraph].	^ paragraph! !SystemWindow subclass: #PluggableSystemWindow	instanceVariableNames: 'getLabelSelector getChildrenSelector closeWindowSelector'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Morphic'!!PluggableSystemWindow methodsFor: 'updating' stamp: 'ct 7/4/2022 18:54' prior: 63554011!update: what	what ifNil:[^self].	what == getLabelSelector ifTrue:[self setLabel: (model perform: getLabelSelector)].	what == getChildrenSelector ifTrue: [		self rebuildPaneAfter: [			paneMorphs ifNil: [paneMorphs := #()].			self removeAllMorphsIn: paneMorphs.			paneMorphs := model perform: getChildrenSelector.			self addAllMorphs: paneMorphs.			paneMorphs do: [:child |				child adoptPaneColor: self paneColor].			paneMorphs do: [:m | m hResizing: #spaceFill; vResizing: #spaceFill]]].	what == #windowColorToUse ifTrue: [		self paneColor = model windowColorToUse ifFalse:			[self refreshWindowColor]].	^super update: what! !!PluggableSystemWindow methodsFor: 'private' stamp: 'ct 7/5/2022 09:25'!rebuildPaneAfter: replacePaneMorphsBlock	"Performance. Reset layout properties during children update to avoid intermediate relayouting."	| cellGap wantsGrips wantsPaneSplitters |	self flag: #duplication. "See PluggablePanelMorph>>#rebuildPaneAfter: and MorphicToolBuilder>>#buildPluggableWindow:."		cellGap := self cellGap.	wantsGrips := self wantsGrips.	wantsPaneSplitters := self wantsPaneSplitters.		self cellGap: 0.	self wantsPaneSplitters: false; wantsGrips: false.	self removePaneSplitters; removeGrips.		^ replacePaneMorphsBlock ensure: [		wantsPaneSplitters ifTrue: [			self wantsPaneSplitters: wantsPaneSplitters.			self addPaneSplitters].		wantsGrips ifTrue: [			self wantsGrips: wantsGrips.			self addGrips].		self cellGap: cellGap]! !!PluggableSystemWindow commentStamp: 'ar 2/11/2005 20:14' prior: 0!A pluggable system window. Fixes the issues with label retrieval and adds support for changing children.!AnimatedGIFReadWriter class	instanceVariableNames: ''!!AnimatedGIFReadWriter class methodsFor: 'image reading/writing' stamp: 'mt 7/8/2022 13:34'!understandsImageFormat: aStream	^ false! !Morph subclass: #SimpleHaloMorph	instanceVariableNames: 'target positionOffset enclosesFullBounds'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!SimpleHaloMorph methodsFor: 'updating' stamp: 'mt 8/8/2022 12:00' prior: 87757073!updateBounds	self bounds: (self haloBoundsFor: self target renderedMorph).! !!SimpleHaloMorph methodsFor: 'updating' stamp: 'mt 10/14/2022 10:42' prior: 87757210!updateEnclosesFullBounds: anEvent	self enclosesFullBounds: (Preferences haloEnclosesFullBounds		xor: [anEvent isDropEvent not and: [anEvent controlKeyPressed]]).! !ToolBuilder subclass: #MorphicToolBuilder	instanceVariableNames: 'widgets panes parentMenu'	classVariableNames: 'ButtonBorderWidth ButtonMargins ListBorderWidth ListMargins TextBorderWidth TextMargins'	poolDictionaries: ''	category: 'ToolBuilder-Morphic'!!MorphicToolBuilder methodsFor: 'widgets required' stamp: 'ct 7/4/2022 18:45' prior: 58453963!buildPluggablePanel: aSpec	| widget |	widget := self panelClass new.	self register: widget id: aSpec name.	widget model: aSpec model.	"Set child dependent layout properties."	self setLayoutHintsFor: widget spec: aSpec.	widget layoutInset: (aSpec padding ifNil: [self panelPadding]).	widget wantsPaneSplitters: (aSpec wantsResizeHandles ifNil: [false]).	"widget wantsGrips: true."	widget cellGap: (aSpec spacing ifNil: [		widget wantsPaneSplitters			ifTrue: [self windowSpacing]			ifFalse: [self panelSpacing]]).		"Now create the children."	aSpec children isSymbol		ifTrue: [			widget getChildrenSelector: aSpec children.			widget update: widget getChildrenSelector]		ifFalse: [			widget rebuildPaneAfter: [				self buildAll: aSpec children in: widget]].		self setFrame: aSpec frame in: widget.	self setLayout: aSpec layout in: widget.		parent ifNotNil:[self add: widget to: parent].	widget borderWidth: 0.	self buildHelpFor: widget spec: aSpec. 	widget color: Color transparent.		^ widget! !!MorphicToolBuilder methodsFor: 'widgets required' stamp: 'ct 7/4/2022 18:39' prior: 58515854!buildPluggableWindow: aSpec	| widget |	aSpec layout == #proportional ifFalse:[		"This needs to be implemented - probably by adding a single pane and then the rest"		^self error: 'Not implemented'.	].	widget := (self windowClassFor: aSpec) new.	self register: widget id: aSpec name.		widget model: aSpec model.	"Set child dependent layout properties."	MorphicProject worldGridEnabled ifTrue: [		"Snap both #position and #extent to grid."		aSpec horizontalResizing ifNil: [aSpec horizontalResizing: #spaceFill].		aSpec verticalResizing ifNil: [aSpec verticalResizing: #spaceFill]].			self setLayoutHintsFor: widget spec: aSpec.	widget layoutInset: (aSpec padding ifNil: [self windowPadding]).	widget morphicLayerNumber: widget class windowLayer.		self flag: #todo. "ct: Below, there is a lot of duplication with #buildPluggablePanel:. Can we factor out some of this, or even just collect all children in a PluggablePanelMorph?"	widget cellGap: (aSpec spacing ifNil: [self windowSpacing]).	widget wantsGrips: true.	widget wantsPaneSplitters: (aSpec wantsResizeHandles ifNil: [true]).		"Now create the children."	panes := OrderedCollection new.	aSpec children isSymbol		ifTrue: [			widget getChildrenSelector: aSpec children.			widget update: aSpec children]		ifFalse: [			widget rebuildPaneAfter: [				self buildAll: aSpec children in: widget]].	widget setUpdatablePanesFrom: panes.	aSpec defaultFocus ifNotNil: [:name |		widget defaultFocusMorph: name].		aSpec label ifNotNil: [:label|		label isSymbol 			ifTrue:[widget getLabelSelector: label]			ifFalse:[widget setLabel: label]].	aSpec multiWindowStyle notNil ifTrue:		[widget savedMultiWindowState: (SavedMultiWindowState on: aSpec model)].	widget closeWindowSelector: aSpec closeAction.	self buildHelpFor: widget spec: aSpec. 	widget bounds: (RealEstateAgent 		initialFrameFor: widget 		initialExtent: ((aSpec extent ifNil:[widget initialExtent]) * RealEstateAgent windowScaleFactor * RealEstateAgent scaleFactor) rounded		world: self currentWorld).	widget refreshWindowColor.	^ widget! !TerseGuideHelp class	instanceVariableNames: ''!!TerseGuideHelp class methodsFor: 'pages' stamp: 'mt 7/4/2022 09:32' prior: 98475106!block	"This method was automatically generated. Edit it using:"	"TerseGuideHelp edit: #block"	<generated>	^(HelpTopic		title: 'Blocks'		contents: '"Blocks: - blocks are objects and may be assigned to a variable - value is last expression evaluated unless explicit return - blocks may be nested - specification -         [ arguments | | localvars | expressions ] - ^ expression terminates block & method (exits all nested blocks) - blocks intended for long term storage should not contain ^,	as they can not return to the sender context - use #cull: (and #cull:cull:...) if you do not know the exact number of arguments - blocks (along with polymorphism on booleans) are the basis of control structures	-> See Conditional Expressions"| x y z fac |x := [ y := 1. z := 2. ]. x value.							"simple block usage"x := [ :argOne :argTwo |   argOne, '' and '' , argTwo.].	"set up block with argument passing"Transcript show: (x value: ''First'' value: ''Second''); cr.	"use block with argument passing"x := [:e | | v | v := 1. e + v] value: 2.					"local variable in a block"fac := [ :n | n > 1 ifTrue:  [n * (fac value: n-1)] ifFalse: [1]].	"closure on block variable"fac value: 5.											"closure variable scoped to its block"!!' readStream nextChunkText)			key: #block;			shouldStyle: true;			yourself! !!TerseGuideHelp class methodsFor: 'pages' stamp: 'mt 7/4/2022 09:26'!conditionalExpression	"This method was automatically generated. Edit it using:"	"TerseGuideHelp edit: #conditionalExpression"	<generated>	^(HelpTopic		title: 'Conditional Expression'		contents: '"Conditional Expressions: - Conditional expressions, or control structures in general, use	blocks as deferred computations which can be evaluated	selectively"| x switch result |x := 11.x > 10 ifTrue: [Transcript show: ''ifTrue''; cr].		"if then"x > 10 ifFalse: [Transcript show: ''ifFalse''; cr].	"if else"x > 10											"if then else"   ifTrue: [Transcript show: ''ifTrue''; cr]   ifFalse: [Transcript show: ''ifFalse''; cr].x > 10											"if else then"   ifFalse: [Transcript show: ''ifFalse''; cr]   ifTrue: [Transcript show: ''ifTrue''; cr].Transcript   show:      (x > 10         ifTrue: [''ifTrue'']         ifFalse: [''ifFalse'']);   cr.Transcript										"nested if then else"   show:      (x > 10         ifTrue: [x > 5            ifTrue: [''A'']            ifFalse: [''B'']]         ifFalse: [''C'']);   cr.switch := Dictionary new.						"switch functionality"switch at: $A put: [Transcript show: ''Case A''; cr].switch at: $B put: [Transcript show: ''Case B''; cr].switch at: $C put: [Transcript show: ''Case C''; cr].result := (switch at: $B) value.!!' readStream nextChunkText)			key: #conditionalExpression;			shouldStyle: true;			yourself! !!TerseGuideHelp class methodsFor: 'accessing' stamp: 'mt 7/4/2022 09:25' prior: 98579526!pages	^ #( introduction transcript assignment constants boolean arithmetic		bitwise conversion block exceptionHandling methodCall conditionalExpression		iterationStatement character string symbol  array orderedCollection		sortedCollection bag set interval association dictionary internalStream		fileStream date time point rectangle pen dynamic metaclass debugging		misc )! !ScrollPane subclass: #SimpleHierarchicalListMorph	instanceVariableNames: 'selectedMorph hoveredMorph getListSelector keystrokeActionSelector autoDeselect columns columnsCache sortingSelector getSelectionSelector setSelectionSelector potentialDropMorph lineColor font textColor'	classVariableNames: 'ExpandedForm NotExpandedForm WrappedNavigation'	poolDictionaries: ''	category: 'Morphic-Explorer'!!SimpleHierarchicalListMorph methodsFor: 'layout - resizing' stamp: 'mt 9/19/2023 09:36'!resizeScroller	"For performance, skip re-layouting all items if layout only changed from the outside, which we know if our scroller still has its fullBounds. This happens, for example, when the receiver is resized via #extent:."	| doLayout |	doLayout := scroller layoutComputed not.	scroller privateBounds: self newScrollerBounds.	doLayout		ifTrue: [scroller fullBounds]		ifFalse: [scroller privateFullBounds: scroller bounds].! !Object subclass: #TTFontReader	instanceVariableNames: 'canRead stream fileName fontOffsets tableDictionary unitsPerEm bounds indexToLocFormat numGlyphs nameRecords ascender descender lineGap numHMetrics fsSelection minCodePoint maxCodePoint sTypoAscender sTypoDescender sTypoLineGap sxHeight sCapHeight cmapTables cmapTable kernTables kernPairs glyphOffsets glyphs fontDescription'	classVariableNames: 'LanguageNamesForWindows'	poolDictionaries: ''	category: 'TrueType-Fonts'!!TTFontReader methodsFor: 'reading - decode cmap' stamp: 'mt 8/4/2022 11:14' prior: 98070588!decodeCmapFmtTable	"Decode cmap table. Currently supports formats 0, 4, 6, and 12	https://docs.microsoft.com/en-us/typography/opentype/spec/cmap#format-0-byte-encoding-table"		| cmapFmt |	^ (cmapFmt := self nextUnsignedShort)		caseOf: {			[0] -> [self decodeCmapFmtTable0].			"[2] -> [ High-byte mapping through table ]"			[4] -> [self decodeCmapFmtTable4].			[6] -> [self decodeCmapFmtTable6].			"[8] -> [ Mixed 16-bit and 32-bit coverage ]"			"[10] -> [ Trimmed array ]"			[12] -> [self decodeCmapFmtTable12].			"[13] -> [ Many-to-one range mappings -- last-resort fonts ]"			"[14] -> [ Unicode variation sequences ]"		} otherwise: [			TTCharacterMappingUnsupported new				cmapFmt: cmapFmt;				signal.			{nil.nil}]! !!TTFontReader methodsFor: 'reading - tables' stamp: 'mt 8/4/2022 11:22' prior: 98095142!readCharacterMappingTable	"Read the font's character to glyph index mapping table.	If an appropriate mapping can be found then return an association	with the format identifier and the contents of the table"	| initialOffset numTables tables ourTable |	initialOffset := self offset.	self skipShort. "version"	numTables := self nextUnsignedShort.	tables := Array new: numTables.		"1) Get an overview of all included mappings."	1 to: numTables do: [:index |		| platformID encodingID offset cmap |		platformID := self nextUnsignedShort.		encodingID := self nextUnsignedShort.		offset := self nextUnsignedLong.		tables at: index put: (TTCharacterMappingTable new			platformID: platformID;			encodingID: encodingID;			characterMap: offset;			yourself)].	"2*) Read all mappings"	"tables do: [:subTable |		self			offset: initialOffset + subTable characterMap			during: [ | cmap |				cmap := self decodeCmapFmtTable.				subTable					characterMap: cmap second;					macLanguageID: cmap first]]."		"2**) Read the most useful mapping -- skip format 13 and 14 for now."	ourTable := 		tables detect: [:t | t platformID = 0 "Unicode" and: [t encodingID = 4 "Full"]] ifNone: [		tables detect: [:t | t platformID = 3 "Windows" and: [t encodingID = 10 "Full"]] ifNone: [		tables detect: [:t | t platformID = 0 and: [t encodingID = 3 "BMP"]] ifNone: [		tables detect: [:t | t platformID = 3 and: [t encodingID = 1 "BMP"]] ifNone: [		tables detect: [:t | t platformID = 0 "Unicode" and: [t encodingID < 3 "Deprecated"]] ifNone: [		tables detect: [:t | t platformID = 3 "Windows Symbol encoding?"] ifNone: [tables last] ]]]]].	self		offset: initialOffset + ourTable characterMap		during: [ | cmap |			cmap := self decodeCmapFmtTable.			ourTable				characterMap: cmap second;				macLanguageID: cmap first].	tables := {ourTable}.	"3) Finished. See #processCharacterMappingTable."	cmapTables := tables.! !ReleaseBuilder class	instanceVariableNames: ''!!ReleaseBuilder class methodsFor: 'class initialization' stamp: 'mt 7/2/2022 11:38' prior: 84068758!initialize	QAndA ifNil: [self clearQAndA].	"We have to be after AutoStart so that Morphic is up and running."	Smalltalk addToStartUpList: ReleaseBuilder after: AutoStart.	SystemVersion newVersion: 'Squeak6.0'! !DataStream class	instanceVariableNames: ''!!DataStream class methodsFor: 'class initialization' stamp: 'spfa 1/27/2023 23:55' prior: 24935661!initialize	"TypeMap maps Smalltalk classes to type ID numbers which identify the data stream primitive formats.  nextPut: writes these IDs to the data stream.  NOTE: Changing these type ID numbers will invalidate all extant data stream files.  Adding new ones is OK.  	Classes named here have special formats in the file.  If such a class has a subclass, it will use type 9 and write correctly.  It will just be slow.  (Later write the class name in the special format, then subclasses can use the type also.)	 See nextPut:, next, typeIDFor:, & ReferenceStream>>isAReferenceType:"	"DataStream initialize"	| refTypes t |	refTypes := OrderedCollection new.	t := TypeMap := WeakIdentityKeyDictionary new. "It has to be weak, because some classes may go away, leaving obsolete versions in this dictionary which may make it corrupt."	t at: UndefinedObject put: 1.   refTypes add: 0.	t at: True put: 2.   refTypes add: 0.	t at: False put: 3.   refTypes add: 0.	t at: SmallInteger put: 4.	 refTypes add: 0.	t at: ByteString put: 5.   refTypes add: 1.	t at: ByteSymbol put: 6.   refTypes add: 1.	t at: ByteArray put: 7.   refTypes add: 1.	t at: Array put: 8.   refTypes add: 1.	"(type ID 9 is for arbitrary instances of any class, cf. typeIDFor:)"		refTypes add: 1.	"(type ID 10 is for references, cf. ReferenceStream>>tryToPutReference:)"		refTypes add: 0.	t at: Bitmap put: 11.   refTypes add: 1.	t at: Metaclass put: 12.   refTypes add: 0.	"Type ID 13 is used for HyperSqueak User classes that must be reconstructed."		refTypes add: 1.	t at: Float put: 14.  refTypes add: 1.	t at: Rectangle put: 15.  refTypes add: 1.	"Allow compact Rects."	"type ID 16 is an instance with short header.  See beginInstance:size:"		refTypes add: 1.self flag: #ByteArray.	t at: ByteString put: 17.   refTypes add: 1.	"new String format, 1 or 4 bytes of length"	t at: WordArray put: 18.  refTypes add: 1.	"bitmap-like"	t at: WordArrayForSegment put: 19.  refTypes add: 1.		"bitmap-like"	t at: SoundBuffer put: 20.  refTypes add: 1.	"And all other word arrays, both 		16-bit and 32-bit.  See methods in ArrayedCollection.  Overridden in SoundBuffer."	t at: CompiledMethod put: 21.  refTypes add: 1.	"special creation method"	t at: CompiledBlock put: 21.  refTypes add: 1.	"special creation method"	"t at:  put: 22.  refTypes add: 0."	ReferenceStream refTypes: refTypes.		"save it"	"For all classes that are like WordArrays, store them the way ColorArray is stored.  As bits, and able to change endianness."	Smalltalk globals do: [:cls |		(cls isInMemory and: [			cls isBehavior and: [			cls isObsolete not and: [			cls isPointers not and: [			cls isVariable and: [			cls isWords and: [			(t includesKey: cls) not ] ] ] ] ] ]) 				ifTrue: [ t at: cls put: 20 ] ]! !Object subclass: #TheWorldMenu	instanceVariableNames: 'myProject myWorld myHand'	classVariableNames: 'OpenMenuRegistry'	poolDictionaries: ''	category: 'Morphic-Kernel'!!TheWorldMenu methodsFor: 'commands' stamp: 'mt 1/9/2023 10:46' prior: 100536554!openTranscript	Transcript open.! !MorphicModel subclass: #ScrollPane	instanceVariableNames: 'scrollBar scroller retractableScrollBar scrollBarOnLeft getMenuSelector getMenuTitleSelector hasFocus hScrollBar hScrollBarPolicy vScrollBarPolicy scrollBarThickness'	classVariableNames: 'HorizontalScrollDeltaPerMouseWheelNotch UseRetractableScrollBars VerticalScrollDeltaPerMouseWheelNotch'	poolDictionaries: ''	category: 'Morphic-Windows'!!ScrollPane methodsFor: 'event handling' stamp: 'mt 11/16/2023 15:07' prior: 86666443!handlesMouseWheel: evt	evt isWheelUp ifTrue: [^ scrollBar value > scrollBar minimumValue].	evt isWheelDown ifTrue: [^ scrollBar value < scrollBar maximumValue].	evt isWheelLeft ifTrue: [^ hScrollBar value > hScrollBar minimumValue].	evt isWheelRight ifTrue: [^ hScrollBar value < hScrollBar maximumValue].	^ false! !!ScrollPane methodsFor: 'event handling' stamp: 'mt 11/16/2023 15:06' prior: 86674243!scrollByKeyboard: event 	"Backwards compatibility. If event is ctrl+up/down then scroll and answer true. Use mouse-wheel events by default, see #mouseWheel:."		(event controlKeyPressed or: [event commandKeyPressed]) ifFalse: [^ false].		event keyCharacter = Character arrowUp ifTrue: [		^ scrollBar value > scrollBar minimumValue			ifTrue: [scrollBar scrollUp: 3. true]			ifFalse: [false] ].	event keyCharacter = Character arrowDown ifTrue: [		^ scrollBar value < scrollBar maximumValue			ifTrue: [scrollBar scrollDown: 3. true]			ifFalse: [false] ].	"	event keyCharacter = Character arrowRight ifTrue: [		^ hScrollBar value > hScrollBar minimumValue			ifTrue [hScrollBar scrollDown: 3. true]			ifFalse: [false] ].	event keyCharacter = Character arrowLeft ifTrue: [		^ hScrollBar value < hScrollBar maximumValue			ifTrue: [hScrollBar scrollUp: 3. true]			ifFalse: [false] ].	"		^ false! !!ScrollPane methodsFor: 'geometry' stamp: 'mt 10/11/2022 10:09' prior: 86681513!scrollDeltaHeight	"Return the increment in pixels which this pane should be scrolled (normally a subclass responsibility)."	^ (10 * RealEstateAgent scaleFactor) truncated! !!ScrollPane methodsFor: 'geometry' stamp: 'mt 10/11/2022 10:09' prior: 86681713!scrollDeltaWidth	"Return the increment in pixels which this pane should be scrolled (normally a subclass responsibility)."	^ (10 * RealEstateAgent scaleFactor) truncated! !!ScrollPane methodsFor: 'initialization' stamp: 'mt 10/11/2022 10:09' prior: 86688872!defaultExtent	^ ((150 @ 120) * RealEstateAgent scaleFactor) truncated! !!ScrollPane methodsFor: 'initialization' stamp: 'mt 11/16/2023 14:56' prior: 86690824!initialize		"initialize the state of the receiver"	super initialize.	""	self initializePreferences.	hasFocus := false.	self initializeScrollBars.	""		self extent: self defaultExtent.	self updateMinimumExtent.		self setDefaultParameters.	self addKeyboardBubbleFilter: self.! !!ScrollPane methodsFor: 'layout' stamp: 'mt 9/20/2023 11:10'!newScrollerBounds	"Answer the new bounds for the receiver's scrolling area. Should be called after a #layoutChanged."	| inner bottomOffset leftOffset rightOffset |	(retractableScrollBar or: [self vIsScrollbarShowing not])		ifTrue: [leftOffset := rightOffset := 0]		ifFalse: [			scrollBarOnLeft				ifTrue: [					leftOffset := self scrollBarThickness - self borderWidth.					rightOffset := 0.]				ifFalse: [					leftOffset := 0.					rightOffset := self scrollBarThickness - self borderWidth]].				(retractableScrollBar or: [self hIsScrollbarShowing not])		ifTrue: [bottomOffset := 0]		ifFalse: [bottomOffset := self scrollBarThickness - self borderWidth].		self flag: #todo. "mt: Make layoutInset appear outside all scrollbars, not just the scroller."	inner := self layoutBounds.	^ (inner left + leftOffset) @ (inner top "+ topOffset")		corner: (inner right - rightOffset) @ (inner bottom - bottomOffset)! !!ScrollPane methodsFor: 'layout' stamp: 'mt 9/27/2023 15:09' prior: 86725703!submorphBoundsForShrinkWrap	"Like #newScrollerBounds but uses the current scroller bounds, which were already shrink-wrapped at this point. See #hResizing: and #vResizing:."	| inner bottomOffset leftOffset rightOffset |	(retractableScrollBar or: [self vIsScrollbarShowing not])		ifTrue: [leftOffset := rightOffset := 0]		ifFalse: [			scrollBarOnLeft				ifTrue: [					leftOffset := self scrollBarThickness - self borderWidth.					rightOffset := 0.]				ifFalse: [					leftOffset := 0.					rightOffset := self scrollBarThickness - self borderWidth]].				(retractableScrollBar or: [self hIsScrollbarShowing not])		ifTrue: [bottomOffset := 0]		ifFalse: [bottomOffset := self scrollBarThickness - self borderWidth].		inner := scroller bounds.	^ (inner left - leftOffset) @ (inner top "+ topOffset")		corner: (inner right + rightOffset) @ (inner bottom + bottomOffset)! !!ScrollPane methodsFor: 'event filtering' stamp: 'mt 11/16/2023 15:07' prior: 86744549!filterEvent: aKeyboardEvent for: morphOrNil	"See #initialize. This filter should be installed as keyboard event filter during the bubbling phase to support nested scroll panes from innermost to outermost, like the default #mouseWheel: support does because of normal event dispatching."	(aKeyboardEvent isKeystroke		and: [self scrollByKeyboard: aKeyboardEvent])			ifTrue: [aKeyboardEvent ignore].	^ aKeyboardEvent! !!ScrollPane methodsFor: 'layout - resizing' stamp: 'mt 9/19/2023 09:34' prior: 86764646!resizeScroller	scroller		bounds: self newScrollerBounds;		fullBounds. "To make #shrinkWrap work."! !StringMorph subclass: #UpdatingStringMorph	instanceVariableNames: 'format target lastValue getSelector putSelector floatPrecision growable stepTime autoAcceptOnFocusLoss minimumWidth maximumWidth'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!UpdatingStringMorph methodsFor: 'accessing' stamp: 'ct 10/7/2022 15:50' prior: 119851975!minWidth	"Answer the minimum width that the receiver can have.  A nonzero value here keeps the receiver from degenerating into something that cannot ever be seen or touched again!!  Obeyed by fitContents."	^ minimumWidth ifNil: [minimumWidth := self defaultMinimumWidth]! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'ct 10/7/2022 15:52' prior: 119861045!doneWithEdits	"If in a SyntaxMorph, shrink min width after editing"	| editor |	super doneWithEdits.	(owner respondsTo: #parseNode) ifTrue: [minimumWidth := self defaultMinimumWidth].	editor := (submorphs detect: [ :sm | sm isKindOf: StringMorphEditor ] ifNone: [ ^self ]).	editor delete.! !!UpdatingStringMorph methodsFor: 'event handling' stamp: 'mt 10/11/2022 10:10' prior: 119867328!mouseDown: evt	"The mouse went down over the receiver.  If appropriate, launch a mini-editor so that the user can commence text-editing here"	(owner wantsKeyboardFocusFor: self) ifTrue:		[self userEditsAllowed ifTrue:			[(owner respondsTo: #parseNode)					ifTrue: 	"leave space for editing"						[minimumWidth := ((49 * RealEstateAgent scaleFactor) truncated max: minimumWidth)].			self launchMiniEditor: evt]]! !!UpdatingStringMorph methodsFor: 'initialization' stamp: 'mt 10/11/2022 10:09'!defaultMaximumWidth	^ (366 * RealEstateAgent scaleFactor) truncated! !!UpdatingStringMorph methodsFor: 'initialization' stamp: 'mt 10/11/2022 10:09'!defaultMinimumWidth	^ (8 * RealEstateAgent scaleFactor) truncated! !!UpdatingStringMorph methodsFor: 'initialization' stamp: 'ct 10/7/2022 15:51' prior: 119870247!initialize	"Initialize the receiver to have default values in its instance variables."	super initialize.""	format := #default.	"formats: #string, #default"	target := getSelector := putSelector := nil.	floatPrecision := 1.	growable := true.	stepTime := nil.	autoAcceptOnFocusLoss := true.	minimumWidth := self defaultMinimumWidth.	maximumWidth := self defaultMaximumWidth.! !AbstractSound subclass: #LoopedSampledSound	instanceVariableNames: 'initialCount count releaseCount sampleCountForRelease leftSamples rightSamples originalSamplingRate perceivedPitch gain firstSample lastSample loopEnd scaledLoopLength scaledIndex scaledIndexIncr'	classVariableNames: 'FloatLoopIndexScaleFactor LoopIndexFractionMask LoopIndexScaleFactor'	poolDictionaries: ''	category: 'Sound-Synthesis'!!LoopedSampledSound methodsFor: 'file i/o' stamp: 'ct 9/25/2023 23:15' prior: 52458793!storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream	"Store my samples on the given stream at the current SoundPlayer sampling rate. If bigFlag is true, then each 16-bit sample is stored most-significant byte first (AIFF files), otherwise it is stored least-significant byte first (WAV files). If self isStereo is true, both channels are stored, creating a stereo file. Otherwise, only the left channel is stored, creating a mono file."	(self isStereo or: [scaledIndexIncr ~= LoopIndexScaleFactor]) ifTrue: [		^ super storeSampleCount: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream].	"optimization: if I'm not stereo and sampling rates match, just store my buffer"	^ self storeSamples: leftSamples count: samplesToStore bigEndian: bigEndianFlag on: aBinaryStream! !Object subclass: #AbstractFont	instanceVariableNames: ''	classVariableNames: 'ForceNonSubPixelCount'	poolDictionaries: ''	category: 'Graphics-Fonts'!!AbstractFont methodsFor: 'example' stamp: 'mt 2/19/2022 19:32' prior: 16906199!symbolSample	"Variation of Text class >> #symbolSample, which uses the receiver's available code points. This is important for fonts such as Wingdings."		^ String streamContents: [:stream | | codePoint lineLength maxLineLength character numLines |		lineLength := numLines := 0.		codePoint := self minCodePoint max: 16r1000.		maxLineLength := (TextStyle defaultFont widthOf: $x) * 45.		[numLines > 20 or: [codePoint > self maxCodePoint]] whileFalse: [			(self hasGlyphOf: (character := Character value: codePoint))				ifTrue: [					stream nextPut: character.					((lineLength := lineLength + (self widthOf: character)) > maxLineLength) ifTrue: [						lineLength := 0.						numLines := numLines + 1.						stream cr]].			codePoint := codePoint + 1 ]]! !TestCase subclass: #SoundTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tests-Sound'!!SoundTest methodsFor: 'tests' stamp: 'mt 12/1/2023 11:11' prior: 89846080!testStoreSamples	| sound fileName arrayBytes fileBytes |	sound := PluckedSound default.	fileName := 'tempPluck.wav'.		"Write to file"	fileBytes := [		sound storeWAVOnFileNamed: fileName.		FileStream oldFileNamed: fileName do: [:stream |			stream binary contents]] ensure: [				FileDirectory default deleteFileNamed: fileName].		"Write to array"	arrayBytes := ByteArray streamContents: [:stream |		sound storeWAVSamplesOn: stream].		"Compare"	self assert: fileBytes equals: arrayBytes.! !UpdatingStringMorph subclass: #NameStringInHalo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!NameStringInHalo methodsFor: 'private' stamp: 'mt 10/11/2022 10:09' prior: 58912780!placeContents	| namePosition |	(owner notNil and: [owner isInWorld]) ifTrue:		[namePosition := owner basicBox bottomCenter -			((self width // 2) @ (owner handleSize negated // 2 - "1 * "RealEstateAgent scaleFactor truncated)).		namePosition := namePosition min: self world viewBox bottomRight - self extent y + (2 * RealEstateAgent scaleFactor) truncated.		self bounds: (namePosition extent: self extent)]! !ProtoObject subclass: #Object	instanceVariableNames: ''	classVariableNames: 'DependentsFields'	poolDictionaries: ''	category: 'Kernel-Objects'!!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 12:17' prior: 59943761!allLiteralsDo: aBlock	"Enumerate all literals in the receiver. Note that subclasses may override this to expose the literals they hold such as Array or Pragma. Also note that CompiledCode, being the typical entry point for such an operation, will rather call #allLiteralsDo:#scanForSpecial: on all code literals (and regular literals) to avoid expensive byte-code scanning if possible."	self flag: #discuss. "mt: Better implement this only on Symbol, Array, Number, Binding, etc. instead of Object?"	aBlock value: self.! !!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 10:22'!allLiteralsDo: aBlock scanForSpecial: aBoolean	"Backstop. Avoid bytecode scanning in CompiledCode and below. See #hasLiteral:scanForSpecial:."		self allLiteralsDo: aBlock.! !!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 12:11' prior: 59943983!hasLiteral: literal	^ self		hasLiteralSuchThat: [:lit | lit literalEqual: literal]		scanForSpecial: (BytecodeEncoder canBeSpecialLiteral: literal)! !!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 10:35'!hasLiteral: literal scanForSpecial: aBoolean	^ self		hasLiteralSuchThat: [:lit | lit literalEqual: literal]		scanForSpecial: aBoolean! !!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 12:13' prior: 59944317!hasLiteralSuchThat: testBlock	"Also see #hasLiteral:. Do not scan for implicit (i.e. special) literals by default to get a faster response."	^ self hasLiteralSuchThat: testBlock scanForSpecial: false! !!Object methodsFor: 'literals' stamp: 'mt 12/15/2023 10:23'!hasLiteralSuchThat: testBlock scanForSpecial: aBoolean	"Backstop. Avoid bytecode scanning in CompiledCode and below. See #hasLiteral:scanForSpecial:."	self		allLiteralsDo: [:literal | (testBlock value: literal) ifTrue: [^ true]]		scanForSpecial: aBoolean.		^ false! !Object subclass: #TheWorldMainDockingBar	instanceVariableNames: ''	classVariableNames: 'Instance ShowSecondsInClock TS TwentyFourHourClock'	poolDictionaries: ''	category: 'Morphic-Kernel'!!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'mt 1/9/2023 10:53' prior: 100211920!transcriptMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Transcript' translated;			help: 'Open the Transcript' translated;			icon: (self colorIcon: Transcript windowColorToUse);			target: [ (Smalltalk at: #Transcript) open ];			selector: #value ].! !Object subclass: #SystemVersion	instanceVariableNames: 'version date highestUpdate updates'	classVariableNames: 'Current'	poolDictionaries: ''	category: 'System-Support'!!SystemVersion methodsFor: 'continuous integration' stamp: 'mt 12/20/2022 09:27' prior: 97442161!ciStatusBadgeUrl		^ 'https://raster.shields.io/github/actions/workflow/status/squeak-smalltalk/squeak-app/{1}?branch={2}&style=flat&logo=github&label='		format: {self ciWorkflow encodeForHTTP. self ciBranch}! !!SystemVersion methodsFor: 'continuous integration' stamp: 'mt 7/4/2022 17:29' prior: 97443498!ciStatusPageUrl	^ 'https://github.com/squeak-smalltalk/squeak-app/actions/workflows/{1}?query=branch%3A{2}{3}{4}'		format: {			self ciWorkflow.			self ciBranch.			'+is%3Acompleted'. "Show only completed runs."			self isRelease				ifTrue: ['' "Only Trunk has daily builds"]				ifFalse: ['+event%3Aschedule']}! !!SystemVersion methodsFor: 'continuous integration' stamp: 'mt 7/4/2022 10:12' prior: 97446315!ciStatusTimestamp	"Slow. Fetch HTML page, extract first occurrence of		... <time-ago datetime='2021-08-04T14:24:20Z' ... "	| statusResponse statusPage begin end dateAndTime |	statusResponse := WebClient httpGet: self ciStatusPageUrl.	statusResponse isSuccess ifFalse: [^ nil].	statusPage := statusResponse content.	begin := statusPage findString: 'datetime' startingAt: 100000. "Skip the first X bytes decoration."	begin = 0 ifTrue: [^ nil].	end := statusPage findString: 'Z' startingAt: begin.	end = 0 ifTrue: [^ nil].	dateAndTime := DateAndTime readFrom: (statusPage copyFrom: begin + 10 to: end) readStream.	^ String streamContents: [:s |		dateAndTime asDate = Date today			ifTrue: [s nextPutAll: 'Today' translated, ',']			ifFalse: [dateAndTime asDate = Date yesterday				ifTrue: [s nextPutAll: 'Yesterday' translated, ',']				ifFalse: [dateAndTime printYMDOn: s]].		s space.		dateAndTime printHMOn: s]! !Object subclass: #MCMcmUpdater	instanceVariableNames: 'repository updateMapName lastUpdateMap'	classVariableNames: 'DefaultUpdateMap DefaultUpdateURL Registry SkipPackages UpdateFromServerAtStartup UpdateMissingPackages'	poolDictionaries: ''	category: 'MonticelloConfigurations'!!MCMcmUpdater methodsFor: 'accessing' stamp: 'mt 7/2/2022 11:17'!lastUpdateMapAt: repoDescription		^ self lastUpdateMap		at: repoDescription		ifAbsent: [			self lastUpdateMap				at: (self class alternativeDescriptionOf: repoDescription)				ifAbsent: [0]]! !!MCMcmUpdater methodsFor: 'accessing' stamp: 'mt 7/2/2022 11:19'!lastUpdateMapAt: repoDescription put: lastUpdate		self lastUpdateMap at: repoDescription put: lastUpdate.	self lastUpdateMap at: (self class alternativeDescriptionOf: repoDescription) put: lastUpdate.! !!MCMcmUpdater methodsFor: 'updating' stamp: 'mt 7/2/2022 11:00' prior: 53029764!refreshUpdateMapFor: r with: updateList	"Update the lastUpdateMap and answer a possibly reduced updateList"	| config |	(self lastUpdateMapAt: r description) = 0 ifTrue: [		"No update has ever been loaded from this repo. If no package is		present in the image either, we can skip right to the latest config"		config := r versionNamed: updateList last value.		(config dependencies anySatisfy: [:dep | dep package hasWorkingCopy])			ifFalse: [(self useLatestPackagesFrom: r)					ifTrue: [self lastUpdateMapAt: r description put: updateList last key].				updateList isEmpty					ifTrue: [^ #()]					ifFalse: [^ updateList last: 1]]].	^ updateList! !!MCMcmUpdater methodsFor: 'updating' stamp: 'mt 7/2/2022 11:01' prior: 53032870!updateFromRepository	| config repo |	repo := self getRepositoryFromRepositoryGroup.	repo cacheAllFileNamesDuring: [ | updateList |		updateList := self updateListFor: repo.		"Proceed only if there are updates available at all."		updateList ifNotEmpty: [			updateList := self refreshUpdateMapFor: repo with: updateList.			"Now process each update file. Check if we have all dependencies and if not,			load the entire configuration (this is mostly to skip older updates quickly)"			updateList do:[:assoc|				ProgressNotification signal: '' extra: ('Processing {1}' translated format: {assoc value}).				config := repo versionNamed: assoc value.				self updateFromConfig: config.				self lastUpdateMapAt: repo description put: assoc key.			] displayingProgress: 'Processing configurations' translated.			"We've loaded all the provided update configurations.			Use the latest configuration to update all the remaining packages."			(self useLatestPackagesFrom: repo) ifTrue: [				config updateFromRepositories.				config upgrade].		]].	^ config! !!MCMcmUpdater methodsFor: 'updating' stamp: 'mt 7/2/2022 11:01' prior: 53034943!updateFromRepository: repository upTo: versionNumber	| config |	config := nil.	repository cacheAllFileNamesDuring: [ | updateList |		updateList := self updateListFor: repository.		"Proceed only if there are updates available at all."		updateList ifNotEmpty: [			updateList := self refreshUpdateMapFor: repository with: updateList.			"Now process each update file. Check if we have all dependencies and if not,			load the entire configuration (this is mostly to skip older updates quickly)"			updateList do:[:assoc|				assoc key > versionNumber ifTrue: [^config].				ProgressNotification signal: '' extra: ('Processing ' translated format: {assoc value}).				config := repository versionNamed: assoc value.				self updateFromConfig: config.				self lastUpdateMapAt: repository description put: assoc key.			] displayingProgress: 'Processing configurations' translated.		]].	^config! !!MCMcmUpdater methodsFor: 'private' stamp: 'mt 7/2/2022 11:01' prior: 53038788!updateListFor: repo	| updateList allNames minVersion |	updateList := OrderedCollection new.	minVersion := self lastUpdateMapAt: repo description.	"Find all the update-*.mcm files"	allNames := ('Checking {1}' translated format: {repo description})		displayProgressFrom: 0 to: 1 during: [:bar| 			bar value: 0.			repo allFileNamesOrCache ].	allNames do: [:fileName | | version |		((fileName endsWith: '.mcm')			and: [fileName packageAndBranchName = self updateMapName				and: [(version := fileName versionNumber) >= minVersion]]) 					ifTrue: [updateList add: version -> fileName]].	^updateList sort! !!MCMcmUpdater methodsFor: 'private' stamp: 'mt 11/23/2023 11:14' prior: 53043282!updateMessageFor: previousUpdateLevel	| ciTemplate ciStamp |	ciTemplate := '<br>CI status: <a href="{8}"><img src="{7}" /> {9}</{10}>'.	ciStamp := SystemVersion current ciStatusTimestamp		ifNil: [SystemVersion current isRelease			ifTrue: [ciTemplate := '' "Drop outdated/unavailable CI info for releases"]			ifFalse: ['(build inaccessible!!)' translated]].	^ ('Update completed.<br><br>Version: {1}<br>Update: {3}<b>{2}</b><br><br>Url: <a href="{4}">{4}</{10}><br>Map: ''{5}''', ciTemplate,'{6}' translated format: {			SystemVersion current version.			SystemVersion current highestUpdate.			previousUpdateLevel = SystemVersion current highestUpdate				ifTrue: ['']				ifFalse: [previousUpdateLevel asString, ' -> '].			self repository.			MCMcmUpdater updateMapName.			SystemVersion current description ifEmpty: [''] ifNotEmpty: [:d |				'<br><br><font face="{2}" size="{3}">{1}</font>'					format: {						d.						Preferences standardButtonFont familyName.						Preferences standardButtonFont pointSize.					}].			SystemVersion current ciStatusBadgeUrl.			SystemVersion current ciStatusPageUrl.			ciStamp.			"mt: Avoid triggering the Windows Defender. See http://lists.squeakfoundation.org/pipermail/squeak-dev/2021-December/217346.html"			'a'.				}) asTextFromHtml! !MCMcmUpdater class	instanceVariableNames: ''!!MCMcmUpdater class methodsFor: 'registry' stamp: 'mt 7/2/2022 11:17' prior: 53068296!forRepository: repository updateMap: basename	"Answer the requested updater from the repository, or nil of not found"	"MCMcmUpdater forRepository: 'http://source.squeak.org/trunk' updateMap: 'update'"	"MCMcmUpdater forRepository: 'foo' updateMap: 'bar'"	^ ((Registry ifNil: [Registry := Dictionary new])		at: repository		ifAbsent: [Registry at: (self alternativeDescriptionOf: repository) ifAbsent: [^nil]])			at: basename			ifAbsent: [^nil]! !!MCMcmUpdater class methodsFor: 'utilities' stamp: 'mt 7/2/2022 11:16'!alternativeDescriptionOf: repoDescription	"Treat HTTP and HTTPS as the same repository."	(repoDescription beginsWith: 'http:')		ifTrue: [^ 'https', (repoDescription allButFirst: 4)].	(repoDescription beginsWith: 'https:')		ifTrue: [^ 'http', (repoDescription allButFirst: 5)].	^ repoDescription! !MCTool subclass: #MCWorkingCopyBrowser	instanceVariableNames: 'workingCopy workingCopyWrapper repository defaults'	classVariableNames: 'CheckForNewerVersionsBeforeSave ExternalMenuEntries'	poolDictionaries: ''	category: 'Monticello-UI'!!MCWorkingCopyBrowser methodsFor: 'actions' stamp: 'mt 7/18/2022 14:41'!copyImageVersionsSafely	(Project current uiManager confirm: ('Do you really want to copy the loaded version of each of <b>{1} packages</b> to <b>{2}</b>?' translated format: {MCWorkingCopy allManagers size. self repository description}) asTextFromHtml title: 'Copy Image Versions' translated) ifFalse: [^ self].	self copyImageVersions.! !!MCWorkingCopyBrowser methodsFor: 'actions' stamp: 'mt 11/27/2023 14:21' prior: 53880800!flushCachedVersions	| beforeBytes afterBytes beforeVersions afterVersions |	Cursor wait showWhile: [		Smalltalk garbageCollect.		beforeBytes := Smalltalk bytesLeft: true.		beforeVersions := MCVersion allSubInstances size.		MCFileBasedRepository flushAllCaches.		afterBytes := Smalltalk bytesLeft: true.		afterVersions := MCVersion allSubInstances size.	].	^self inform: ('{1} versions flushed\{2} bytes reclaimed' translated withCRs format: {beforeVersions - afterVersions. beforeBytes - afterBytes})! !!MCWorkingCopyBrowser methodsFor: 'morphic ui' stamp: 'mt 7/18/2022 14:35' prior: 53916879!repositoryListMenu: aMenu	"first add repository-specific commands"	self repository ifNotNil:		[ self			fillMenu: aMenu			fromSpecs:				#(('open repository' #openRepository)				('edit repository info' #editRepository)				('add to package...' #addRepositoryToPackage)				('remove repository' #removeRepository)				('demote to bottom' #demoteRepository)				('copy image versions here' #copyImageVersionsSafely)).		aMenu			add:				(self repository alwaysStoreDiffs					ifTrue: ['store full versions']					ifFalse: ['store diffs'])				target: self				selector: #toggleDiffs ;			addLine ].	"then the non-specific commands"	^self fillMenu: aMenu fromSpecs:		#(	('load repositories' #loadRepositories)		 	('save repositories' #saveRepositories)			('flush cached versions' #flushCachedVersions))! !SoundPlayer class	instanceVariableNames: ''!!SoundPlayer class methodsFor: 'preferences' stamp: 'eem 8/9/2022 19:08' prior: 89767255!soundQuickStart		<preference: 'Quickstart Sounds'		category: 'media'		description: 'If true, attempt to start playing sounds immediately rather than waiting for the next chance to fill the sound buffers"'		type: #Boolean>		^SoundsShouldStartQuick ifNil: [self defaultQuickStartForPlatform]! !Notification subclass: #TTCharacterMappingDeprecated	instanceVariableNames: 'mappingTable'	classVariableNames: ''	poolDictionaries: ''	category: 'TrueType-Support'!!TTCharacterMappingDeprecated methodsFor: 'priv handling' stamp: 'mt 8/4/2022 11:13'!defaultAction	Transcript showln: '[TTFontReader] Character mapping is deprecated: ', mappingTable.	^ true! !!TTCharacterMappingDeprecated methodsFor: 'accessing' stamp: 'mt 8/4/2022 11:11'!mappingTable	^ mappingTable! !!TTCharacterMappingDeprecated methodsFor: 'accessing' stamp: 'mt 8/4/2022 11:11'!mappingTable: anObject	mappingTable := anObject.! !Object subclass: #InstructionStream	instanceVariableNames: 'sender pc'	classVariableNames: 'SpecialConstants'	poolDictionaries: ''	category: 'Kernel-Methods'!!InstructionStream methodsFor: 'decoding - private - v3 plus closures' stamp: 'mt 12/20/2023 13:20' prior: 33333096!interpretNextV3ClosuresInstructionFor: client 	"Send to the argument, client, a message that specifies the type of the 	 next instruction."	| byte type offset method |	method := self method.  	byte := method at: pc.	type := byte // 16.  	offset := byte \\ 16.  	pc := pc+1.	"We do an inline binary search on each of the possible 16 values of type."	type < 8 ifTrue:		[type < 4 ifTrue:			[type < 2 ifTrue:				[type = 0 ifTrue:					[^ client pushReceiverVariable: offset].				^ client pushTemporaryVariable: offset].				"type = 1"			type = 2 ifTrue: 				[^ client pushConstant: (method literalAt: offset + 1)].			^ client pushConstant: (method literalAt: offset + 17)].		"type = 3"		type < 6 ifTrue:			[type = 4 ifTrue:				[^ client pushLiteralVariable: (method literalAt: offset + 1)].			^ client pushLiteralVariable: (method literalAt: offset + 17)]."type = 5"		type = 6 ifTrue:			[offset < 8 ifTrue:				[^ client popIntoReceiverVariable: offset].			^ client popIntoTemporaryVariable: offset - 8].		"type = 7"		offset = 0 ifTrue: [^ client pushReceiver].		offset < 8 ifTrue: [^ client pushSpecialConstant: (SpecialConstants at: offset)].		offset = 8 ifTrue: [^ client methodReturnReceiver].		offset < 12 ifTrue: [^ client methodReturnSpecialConstant: (SpecialConstants at: offset - 8)].		offset = 12 ifTrue: [^ client methodReturnTop].		offset = 13 ifTrue: [^ client blockReturnTop].		^ self unusedBytecode: client at: pc - 1]. "offset = 14 & offset = 15, 126 & 127"	type < 12 ifTrue:		[type < 10 ifTrue:			[type = 8 ifTrue:				[^ self					interpretV3ClosuresExtension: offset					in: method					for: client].			"type = 9 (short jumps)"			offset < 8 ifTrue: [^ client jump: offset + 1].			^ client jump: offset - 8 + 1 if: false].		type = 10 ifTrue: "(long jumps)"			[byte := method at: pc.			pc := pc + 1.			offset < 8 ifTrue: [^ client jump: offset - 4 * 256 + byte].			^ client jump: (offset bitAnd: 3) * 256 + byte if: offset < 12].		"type = 11; arithmetic special selector sends"		^ client			sendSpecial: (Smalltalk specialSelectorAt: offset + 1)			numArgs: (Smalltalk specialNargsAt: offset + 1)].		type = 12 ifTrue: "non-arithmetic special selector sends"			[^ client				sendSpecial: (Smalltalk specialSelectorAt: offset + 17)				numArgs: (Smalltalk specialNargsAt: offset + 17)].	"type = 13, 14 or 15"	^ client		send: (method literalAt: offset + 1)		super: false		numArgs: type - 13 "0, 1 & 2"! !!InstructionStream methodsFor: 'decoding - private - v3 plus closures' stamp: 'mt 12/20/2023 13:20' prior: 33340799!interpretNextV3InstructionFor: client 	"Send to the argument, client, a message that specifies the type of the 	 next instruction."	| byte type offset method |	method := self method.  	byte := method at: pc.	type := byte // 16.  	offset := byte \\ 16.  	pc := pc+1.	"We do an inline binary search on each of the possible 16 values of type."	type < 8 ifTrue:		[type < 4 ifTrue:			[type < 2 ifTrue:				[type = 0 ifTrue:					[^ client pushReceiverVariable: offset].				^ client pushTemporaryVariable: offset].				"type = 1"			type = 2 ifTrue: 				[^ client pushConstant: (method literalAt: offset + 1)].			^ client pushConstant: (method literalAt: offset + 17)].		"type = 3"		type < 6 ifTrue:			[type = 4 ifTrue:				[^ client pushLiteralVariable: (method literalAt: offset + 1)].			^ client pushLiteralVariable: (method literalAt: offset + 17)]."type = 5"		type = 6 ifTrue:			[offset < 8 ifTrue:				[^ client popIntoReceiverVariable: offset].			^ client popIntoTemporaryVariable: offset - 8].		"type = 7"		offset = 0 ifTrue: [^ client pushReceiver].		offset < 8 ifTrue: [^ client pushSpecialConstant: (SpecialConstants at: offset)].		offset = 8 ifTrue: [^ client methodReturnReceiver].		offset < 12 ifTrue: [^ client methodReturnSpecialConstant: (SpecialConstants at: offset - 8)].		offset = 12 ifTrue: [^ client methodReturnTop].		offset = 13 ifTrue: [^ client blockReturnTop].		^ self unusedBytecode: client at: pc - 1]. "offset = 14 & offset = 15, 126 & 127"	type < 12 ifTrue:		[type < 10 ifTrue:			[type = 8 ifTrue:				[^ self					interpretV3Extension: offset					in: method					for: client].			"type = 9 (short jumps)"			offset < 8 ifTrue: [^ client jump: offset + 1].			^ client jump: offset - 8 + 1 if: false].		type = 10 ifTrue: "(long jumps)"			[byte := method at: pc.			pc := pc + 1.			offset < 8 ifTrue: [^ client jump: offset - 4 * 256 + byte].			^ client jump: (offset bitAnd: 3) * 256 + byte if: offset < 12].		"type = 11; arithmetic special selector sends"		^ client			sendSpecial: (Smalltalk specialSelectorAt: offset + 1)			numArgs: (Smalltalk specialNargsAt: offset + 1)].		type = 12 ifTrue: "non-arithmetic special selector sends"			[^ client				sendSpecial: (Smalltalk specialSelectorAt: offset + 17)				numArgs: (Smalltalk specialNargsAt: offset + 17)].	"type = 13, 14 or 15"	^ client		send: (method literalAt: offset + 1)		super: false		numArgs: type - 13 "0, 1 & 2"! !!InstructionStream methodsFor: 'decoding - private - sista v1' stamp: 'mt 12/20/2023 13:20' prior: 33370958!interpretNextSistaV1InstructionFor: client	"Send to the argument, client, a message that specifies the next instruction."	| byte div16 offset method extA extB savedPC |	method := self method.	"For a table of the bytecode set, see EncoderForSistaV1's class comment."	"consume and compute any extensions first."	extA := extB := 0.	savedPC := pc.	[byte := self method at: pc.	 pc := pc + 1.	 byte >= 16rE0 and: [byte <= 16rE1]] whileTrue:		[| extByte |		 extByte := self method at: pc.		 pc := pc + 1.		 byte = 16rE0			ifTrue:				[extA := (extA bitShift: 8) + extByte]			ifFalse:				[extB := (extB = 0 and: [extByte > 127])							ifTrue: [extByte - 256]							ifFalse: [(extB bitShift: 8) + extByte]]].	div16 := byte // 16.	offset := byte \\ 16.	"We do an inline quasi-binary search on each of the possible 16 values of div16"	div16 < 11 ifTrue:		[div16 < 6 ifTrue:			[div16 < 4 ifTrue:				[div16 < 2 ifTrue:					[div16 = 0 ifTrue:						 [^client pushReceiverVariable: offset].					^client pushLiteralVariable: (method literalAt: offset + 1)]. "div16 = 1"				 ^client pushConstant: (method literalAt: byte \\ 32 + 1)].			 div16 = 4 ifTrue:				[offset < 12 ifTrue:					[^client pushTemporaryVariable: offset].				 offset = 12 ifTrue:					[^client pushReceiver].				 offset = 13 ifTrue:					[^client pushSpecialConstant: true].				 offset = 14 ifTrue:					[^client pushSpecialConstant: false].				 offset = 15 ifTrue:					[^client pushSpecialConstant: nil]].			"div16 = 5"			 offset < 2 ifTrue:				[^client pushSpecialConstant: offset].			 offset = 2 ifTrue:				[^self interpretSistaV1ExtendedPush: extB for: client].			 offset = 3 ifTrue:				[^client doDup].			 offset = 8 ifTrue:				[^client methodReturnReceiver].			 offset = 9 ifTrue:				[^client methodReturnSpecialConstant: true].			 offset = 10 ifTrue:				[^client methodReturnSpecialConstant: false].			 offset = 11 ifTrue:				[^client methodReturnSpecialConstant: nil].			 offset = 12 ifTrue:				[^client methodReturnTop].			 offset = 13 ifTrue:				[^client blockReturnConstant: nil].			 offset = 14 ifTrue:				[^client blockReturnTop].			 offset = 15 ifTrue:				[^client doNop].			 ^self unusedBytecode: client at: savedPC].		"short sends"		div16 = 6 ifTrue:			[^client				sendSpecial: (Smalltalk specialSelectorAt: offset + 1)				numArgs: (Smalltalk specialNargsAt: offset + 1)].		 div16 = 7 ifTrue:			[^client				sendSpecial: (Smalltalk specialSelectorAt: offset + 17)				numArgs: (Smalltalk specialNargsAt: offset + 17)].		^client			send: (method literalAt: offset + 1)			super: false			numArgs: div16 - 8].	"div16 >= 11; bytecode >= 176"	div16 < 14 ifTrue:		[div16 = 11 ifTrue:			[offset < 8 ifTrue:				[^client jump: offset + 1].			 ^client jump: offset - 7 if: true].		 div16 = 12 ifTrue:			[offset < 8 ifTrue:				[^client jump: offset + 1 if: false].			 ^client popIntoReceiverVariable: offset - 8].		 "div16 = 13"		 offset < 8 ifTrue:		 	[^client popIntoTemporaryVariable: offset].		 offset = 8 ifTrue:			[^client doPop].		 offset = 9 ifTrue:			[^client trap].		 ^self unusedBytecode: client at: savedPC].	"2 byte and 3 byte codes"	byte < 248 ifTrue:		[^self interpretNext2ByteSistaV1Instruction: byte for: client extA: extA extB: extB startPC: savedPC].	^self interpretNext3ByteSistaV1Instruction: byte for: client extA: extA extB: extB startPC: savedPC! !----SNAPSHOT----{17 January 2024 . 6:44:55 pm} Squeak.image priorSource: 108817!----QUIT----{17 January 2024 . 6:44:55 pm} Squeak.image priorSource: 108817!