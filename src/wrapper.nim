# This was generated by futhark, and should not be edited directly.

## This file should not be imported/included directly, instead import `norx`.

type
  enum_orxSEEK_OFFSET_WHENCE_t* {.size: sizeof(cuint).} = enum
    SEEK_OFFSET_WHENCE_NONE = -1, SEEK_OFFSET_WHENCE_START = 0,
    SEEK_OFFSET_WHENCE_CURRENT = 1, SEEK_OFFSET_WHENCE_END = 2,
    SEEK_OFFSET_WHENCE_NUMBER = 3
type
  enum_orxCOLORSPACE_t* {.size: sizeof(cuint).} = enum
    COLORSPACE_NONE = -1, COLORSPACE_COMPONENT = 0, COLORSPACE_HSL = 1,
    COLORSPACE_HSV = 2, COLORSPACE_RGB = 3, COLORSPACE_NUMBER = 4
type
  enum_orxSTATUS_t* {.size: sizeof(cuint).} = enum
    STATUS_NONE = -1, STATUS_FAILURE = 0, STATUS_SUCCESS = 1, STATUS_NUMBER = 2
type
  enum_orxMODULE_ID_t* {.size: sizeof(cuint).} = enum
    MODULE_ID_NONE = -1, MODULE_ID_ANIM = 0, MODULE_ID_ANIMPOINTER = 1,
    MODULE_ID_ANIMSET = 2, MODULE_ID_BANK = 3, MODULE_ID_BODY = 4,
    MODULE_ID_CAMERA = 5, MODULE_ID_CLOCK = 6, MODULE_ID_COMMAND = 7,
    MODULE_ID_CONFIG = 8, MODULE_ID_CONSOLE = 9, MODULE_ID_DISPLAY = 10,
    MODULE_ID_EVENT = 11, MODULE_ID_FILE = 12, MODULE_ID_FONT = 13,
    MODULE_ID_FPS = 14, MODULE_ID_FRAME = 15, MODULE_ID_FX = 16,
    MODULE_ID_FXPOINTER = 17, MODULE_ID_GRAPHIC = 18, MODULE_ID_INPUT = 19,
    MODULE_ID_JOYSTICK = 20, MODULE_ID_KEYBOARD = 21, MODULE_ID_LOCALE = 22,
    MODULE_ID_MAIN = 23, MODULE_ID_MEMORY = 24, MODULE_ID_MOUSE = 25,
    MODULE_ID_OBJECT = 26, MODULE_ID_PARAM = 27, MODULE_ID_PHYSICS = 28,
    MODULE_ID_PLUGIN = 29, MODULE_ID_PROFILER = 30, MODULE_ID_RENDER = 31,
    MODULE_ID_RESOURCE = 32, MODULE_ID_SCREENSHOT = 33, MODULE_ID_SHADER = 34,
    MODULE_ID_SHADERPOINTER = 35, MODULE_ID_SOUND = 36,
    MODULE_ID_SOUNDPOINTER = 37, MODULE_ID_SOUNDSYSTEM = 38,
    MODULE_ID_SPAWNER = 39, MODULE_ID_STRING = 40, MODULE_ID_STRUCTURE = 41,
    MODULE_ID_SYSTEM = 42, MODULE_ID_TEXT = 43, MODULE_ID_TEXTURE = 44,
    MODULE_ID_THREAD = 45, MODULE_ID_TIMELINE = 46, MODULE_ID_TRIGGER = 47,
    MODULE_ID_VIEWPORT = 48, MODULE_ID_CORE_NUMBER = 49,
    MODULE_ID_TOTAL_NUMBER = 64
const
  MODULE_ID_USER_DEFINED* = enum_orxMODULE_ID_t.MODULE_ID_CORE_NUMBER
type
  enum_orxDEBUG_LEVEL_t* {.size: sizeof(cuint).} = enum
    DEBUG_LEVEL_ALL = -2, DEBUG_LEVEL_NONE = -1, DEBUG_LEVEL_ANIM = 0,
    DEBUG_LEVEL_CLOCK = 1, DEBUG_LEVEL_COMMAND = 2, DEBUG_LEVEL_CONFIG = 3,
    DEBUG_LEVEL_DISPLAY = 4, DEBUG_LEVEL_FILE = 5, DEBUG_LEVEL_INPUT = 6,
    DEBUG_LEVEL_JOYSTICK = 7, DEBUG_LEVEL_KEYBOARD = 8, DEBUG_LEVEL_MEMORY = 9,
    DEBUG_LEVEL_MOUSE = 10, DEBUG_LEVEL_OBJECT = 11, DEBUG_LEVEL_PARAM = 12,
    DEBUG_LEVEL_PHYSICS = 13, DEBUG_LEVEL_PLUGIN = 14,
    DEBUG_LEVEL_PROFILER = 15, DEBUG_LEVEL_RENDER = 16,
    DEBUG_LEVEL_SCREENSHOT = 17, DEBUG_LEVEL_SOUND = 18,
    DEBUG_LEVEL_SYSTEM = 19, DEBUG_LEVEL_TIMER = 20, DEBUG_LEVEL_LOG = 21,
    DEBUG_LEVEL_ASSERT = 22, DEBUG_LEVEL_USER = 23, DEBUG_LEVEL_NUMBER = 24,
    DEBUG_LEVEL_MAX_NUMBER = 32
type
  enum_orxMEMORY_TYPE_t* {.size: sizeof(cuint).} = enum
    MEMORY_TYPE_NONE = -1, MEMORY_TYPE_MAIN = 0, MEMORY_TYPE_AUDIO = 1,
    MEMORY_TYPE_CONFIG = 2, MEMORY_TYPE_DEBUG = 3, MEMORY_TYPE_PHYSICS = 4,
    MEMORY_TYPE_SYSTEM = 5, MEMORY_TYPE_TEMP = 6, MEMORY_TYPE_TEXT = 7,
    MEMORY_TYPE_VIDEO = 8, MEMORY_TYPE_NUMBER = 9
type
  enum_orxSYSTEM_EVENT_t* {.size: sizeof(cuint).} = enum
    SYSTEM_EVENT_NONE = -1, SYSTEM_EVENT_CLOSE = 0,
    SYSTEM_EVENT_FOCUS_GAINED = 1, SYSTEM_EVENT_FOCUS_LOST = 2,
    SYSTEM_EVENT_BACKGROUND = 3, SYSTEM_EVENT_FOREGROUND = 4,
    SYSTEM_EVENT_GAME_LOOP_START = 5, SYSTEM_EVENT_GAME_LOOP_STOP = 6,
    SYSTEM_EVENT_TOUCH_BEGIN = 7, SYSTEM_EVENT_TOUCH_MOVE = 8,
    SYSTEM_EVENT_TOUCH_END = 9, SYSTEM_EVENT_ACCELERATE = 10,
    SYSTEM_EVENT_MOTION_SHAKE = 11, SYSTEM_EVENT_DROP = 12,
    SYSTEM_EVENT_CLIPBOARD = 13, SYSTEM_EVENT_PARAM_READY = 14,
    SYSTEM_EVENT_PARAM_DISPLAY = 15, SYSTEM_EVENT_NUMBER = 16
type
  enum_orxCLOCK_MODIFIER_t* {.size: sizeof(cuint).} = enum
    CLOCK_MODIFIER_NONE = -1, CLOCK_MODIFIER_FIXED = 0,
    CLOCK_MODIFIER_MULTIPLY = 1, CLOCK_MODIFIER_MAXED = 2,
    CLOCK_MODIFIER_AVERAGE = 3, CLOCK_MODIFIER_NUMBER = 4
type
  enum_orxCLOCK_PRIORITY_t* {.size: sizeof(cuint).} = enum
    CLOCK_PRIORITY_NONE = -1, CLOCK_PRIORITY_LOWEST = 0,
    CLOCK_PRIORITY_LOWER = 1, CLOCK_PRIORITY_LOW = 2, CLOCK_PRIORITY_NORMAL = 3,
    CLOCK_PRIORITY_HIGH = 4, CLOCK_PRIORITY_HIGHER = 5,
    CLOCK_PRIORITY_HIGHEST = 6, CLOCK_PRIORITY_NUMBER = 7
type
  enum_orxCLOCK_EVENT_t* {.size: sizeof(cuint).} = enum
    CLOCK_EVENT_NONE = -1, CLOCK_EVENT_RESTART = 0, CLOCK_EVENT_RESYNC = 1,
    CLOCK_EVENT_PAUSE = 2, CLOCK_EVENT_UNPAUSE = 3, CLOCK_EVENT_NUMBER = 4
type
  enum_orxSTRUCTURE_ID_t* {.size: sizeof(cuint).} = enum
    STRUCTURE_ID_NONE = -1, STRUCTURE_ID_ANIMPOINTER = 0, STRUCTURE_ID_BODY = 1,
    STRUCTURE_ID_CLOCK = 2, STRUCTURE_ID_FRAME = 3, STRUCTURE_ID_FXPOINTER = 4,
    STRUCTURE_ID_GRAPHIC = 5, STRUCTURE_ID_SHADERPOINTER = 6,
    STRUCTURE_ID_SOUNDPOINTER = 7, STRUCTURE_ID_SPAWNER = 8,
    STRUCTURE_ID_TIMELINE = 9, STRUCTURE_ID_TRIGGER = 10,
    STRUCTURE_ID_LINKABLE_NUMBER = 11, STRUCTURE_ID_ANIMSET = 12,
    STRUCTURE_ID_CAMERA = 13, STRUCTURE_ID_FONT = 14, STRUCTURE_ID_FX = 15,
    STRUCTURE_ID_OBJECT = 16, STRUCTURE_ID_SHADER = 17, STRUCTURE_ID_SOUND = 18,
    STRUCTURE_ID_TEXT = 19, STRUCTURE_ID_TEXTURE = 20,
    STRUCTURE_ID_VIEWPORT = 21, STRUCTURE_ID_NUMBER = 22
const
  STRUCTURE_ID_ANIM* = enum_orxSTRUCTURE_ID_t.STRUCTURE_ID_LINKABLE_NUMBER
type
  enum_orxSTRUCTURE_STORAGE_TYPE_t* {.size: sizeof(cuint).} = enum
    STRUCTURE_STORAGE_TYPE_NONE = -1, STRUCTURE_STORAGE_TYPE_LINKLIST = 0,
    STRUCTURE_STORAGE_TYPE_TREE = 1, STRUCTURE_STORAGE_TYPE_NUMBER = 2
type
  enum_orxANIM_EVENT_t* {.size: sizeof(cuint).} = enum
    ANIM_EVENT_NONE = -1, ANIM_EVENT_START = 0, ANIM_EVENT_STOP = 1,
    ANIM_EVENT_CUT = 2, ANIM_EVENT_LOOP = 3, ANIM_EVENT_UPDATE = 4,
    ANIM_EVENT_CUSTOM_EVENT = 5, ANIM_EVENT_NUMBER = 6
type
  enum_orxCOMMAND_VAR_TYPE_t* {.size: sizeof(cuint).} = enum
    COMMAND_VAR_TYPE_NONE = -1, COMMAND_VAR_TYPE_STRING = 0,
    COMMAND_VAR_TYPE_FLOAT = 1, COMMAND_VAR_TYPE_S32 = 2,
    COMMAND_VAR_TYPE_U32 = 3, COMMAND_VAR_TYPE_S64 = 4,
    COMMAND_VAR_TYPE_U64 = 5, COMMAND_VAR_TYPE_BOOL = 6,
    COMMAND_VAR_TYPE_VECTOR = 7, COMMAND_VAR_TYPE_NUMERIC = 8,
    COMMAND_VAR_TYPE_NUMBER = 9
type
  enum_orxCONFIG_EVENT_t* {.size: sizeof(cuint).} = enum
    CONFIG_EVENT_NONE = -1, CONFIG_EVENT_RELOAD_START = 0,
    CONFIG_EVENT_RELOAD_STOP = 1, CONFIG_EVENT_NUMBER = 2
type
  enum_orxPLUGIN_FUNCTION_ID_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_ID_NONE = -1
type
  enum_orxPLUGIN_CORE_ID_t* {.size: sizeof(cuint).} = enum
    PLUGIN_CORE_ID_NONE = -1, PLUGIN_CORE_ID_DISPLAY = 0,
    PLUGIN_CORE_ID_JOYSTICK = 1, PLUGIN_CORE_ID_KEYBOARD = 2,
    PLUGIN_CORE_ID_MOUSE = 3, PLUGIN_CORE_ID_PHYSICS = 4,
    PLUGIN_CORE_ID_RENDER = 5, PLUGIN_CORE_ID_SOUNDSYSTEM = 6,
    PLUGIN_CORE_ID_NUMBER = 7
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_DISPLAY_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SWAP = 2,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_SCREEN_BITMAP = 3,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_SCREEN_SIZE = 4,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_CREATE_BITMAP = 5,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DELETE_BITMAP = 6,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_LOAD_BITMAP = 7,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SAVE_BITMAP = 8,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_TEMP_BITMAP = 9,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_TEMP_BITMAP = 10,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_DESTINATION_BITMAPS = 11,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_CLEAR_BITMAP = 12,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_BLEND_MODE = 13,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_BITMAP_CLIPPING = 14,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_BITMAP_DATA = 15,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_BITMAP_DATA = 16,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_PARTIAL_BITMAP_DATA = 17,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_BITMAP_SIZE = 18,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_BITMAP_ID = 19,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_TRANSFORM_BITMAP = 20,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_TRANSFORM_TEXT = 21,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_LINE = 22,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_POLYLINE = 23,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_POLYGON = 24,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_CIRCLE = 25,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_OBOX = 26,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DRAW_MESH = 27,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_HAS_SHADER_SUPPORT = 28,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_CREATE_SHADER = 29,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_DELETE_SHADER = 30,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_START_SHADER = 31,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_STOP_SHADER = 32,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_PARAMETER_ID = 33,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_SHADER_BITMAP = 34,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_SHADER_FLOAT = 35,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_SHADER_VECTOR = 36,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_SHADER_ID = 37,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_ENABLE_VSYNC = 38,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_IS_VSYNC_ENABLED = 39,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_FULL_SCREEN = 40,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_IS_FULL_SCREEN = 41,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_VIDEO_MODE_COUNT = 42,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_GET_VIDEO_MODE = 43,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_SET_VIDEO_MODE = 44,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_IS_VIDEO_MODE_AVAILABLE = 45,
    PLUGIN_FUNCTION_BASE_ID_DISPLAY_NUMBER = 46
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_JOYSTICK_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_GET_AXIS_VALUE = 2,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_IS_BUTTON_PRESSED = 3,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_IS_CONNECTED = 4,
    PLUGIN_FUNCTION_BASE_ID_JOYSTICK_NUMBER = 5
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_KEYBOARD_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_IS_KEY_PRESSED = 2,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_GET_KEY_DISPLAY_NAME = 3,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_READ_KEY = 4,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_READ_STRING = 5,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_CLEAR_BUFFER = 6,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_SHOW = 7,
    PLUGIN_FUNCTION_BASE_ID_KEYBOARD_NUMBER = 8
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_MOUSE_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_MOUSE_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_SET_POSITION = 2,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_GET_POSITION = 3,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_IS_BUTTON_PRESSED = 4,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_GET_MOVE_DELTA = 5,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_GET_WHEEL_DELTA = 6,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_SHOW_CURSOR = 7,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_GRAB = 8,
    PLUGIN_FUNCTION_BASE_ID_MOUSE_NUMBER = 9
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_PHYSICS_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_GRAVITY = 2,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_GRAVITY = 3,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_CREATE_BODY = 4,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_DELETE_BODY = 5,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_CREATE_PART = 6,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_DELETE_PART = 7,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_CREATE_JOINT = 8,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_DELETE_JOINT = 9,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_POSITION = 10,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_ROTATION = 11,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_SPEED = 12,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_ANGULAR_VELOCITY = 13,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_CUSTOM_GRAVITY = 14,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_FIXED_ROTATION = 15,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_DYNAMIC = 16,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_ALLOW_MOVING = 17,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_POSITION = 18,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_ROTATION = 19,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_SPEED = 20,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_SPEED_AT_WORLD_POSITION = 21,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_ANGULAR_VELOCITY = 22,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_CUSTOM_GRAVITY = 23,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_IS_FIXED_ROTATION = 24,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_MASS = 25,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_MASS_CENTER = 26,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_LINEAR_DAMPING = 27,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_ANGULAR_DAMPING = 28,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_LINEAR_DAMPING = 29,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_ANGULAR_DAMPING = 30,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_APPLY_TORQUE = 31,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_APPLY_FORCE = 32,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_APPLY_IMPULSE = 33,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_SELF_FLAGS = 34,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_CHECK_MASK = 35,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_PART_SELF_FLAGS = 36,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_PART_CHECK_MASK = 37,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_SOLID = 38,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_IS_PART_SOLID = 39,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_FRICTION = 40,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_PART_FRICTION = 41,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_RESTITUTION = 42,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_PART_RESTITUTION = 43,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_PART_DENSITY = 44,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_PART_DENSITY = 45,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_IS_INSIDE_PART = 46,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_ENABLE_MOTOR = 47,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_JOINT_MOTOR_SPEED = 48,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_SET_JOINT_MAX_MOTOR_TORQUE = 49,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_JOINT_REACTION_FORCE = 50,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_GET_JOINT_REACTION_TORQUE = 51,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_RAYCAST = 52,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_BOX_PICK = 53,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_ENABLE_SIMULATION = 54,
    PLUGIN_FUNCTION_BASE_ID_PHYSICS_NUMBER = 55
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_RENDER_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_RENDER_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_RENDER_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_RENDER_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_RENDER_GET_WORLD_POSITION = 2,
    PLUGIN_FUNCTION_BASE_ID_RENDER_GET_SCREEN_POSITION = 3,
    PLUGIN_FUNCTION_BASE_ID_RENDER_NUMBER = 4
type
  enum_orxPLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_t* {.size: sizeof(cuint).} = enum
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_NONE = -1,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_INIT = 0,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_EXIT = 1,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_CREATE_SAMPLE = 2,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_LOAD_SAMPLE = 3,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_DELETE_SAMPLE = 4,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_SAMPLE_INFO = 5,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_SAMPLE_DATA = 6,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_CREATE_FROM_SAMPLE = 7,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_CREATE_STREAM = 8,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_LOAD_STREAM = 9,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_DELETE = 10,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_PLAY = 11,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_PAUSE = 12,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_STOP = 13,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_ADD_FILTER = 14,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_REMOVE_LAST_FILTER = 15,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_REMOVE_ALL_FILTERS = 16,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_CREATE_BUS = 17,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_DELETE_BUS = 18,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_BUS = 19,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_BUS_PARENT = 20,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_ADD_BUS_FILTER = 21,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_REMOVE_LAST_BUS_FILTER = 22,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_REMOVE_ALL_BUS_FILTERS = 23,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_START_RECORDING = 24,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_STOP_RECORDING = 25,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_HAS_RECORDING_SUPPORT = 26,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_VOLUME = 27,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_PITCH = 28,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_TIME = 29,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_POSITION = 30,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_SPATIALIZATION = 31,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_PANNING = 32,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_LOOP = 33,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_VOLUME = 34,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_PITCH = 35,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_TIME = 36,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_POSITION = 37,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_SPATIALIZATION = 38,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_PANNING = 39,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_IS_LOOPING = 40,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_DURATION = 41,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_STATUS = 42,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_GLOBAL_VOLUME = 43,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_GLOBAL_VOLUME = 44,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_LISTENER_COUNT = 45,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_ENABLE_LISTENER = 46,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_IS_LISTENER_ENABLED = 47,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_SET_LISTENER_POSITION = 48,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_GET_LISTENER_POSITION = 49,
    PLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_NUMBER = 50
type
  enum_orxDISPLAY_PRIMITIVE_t* {.size: sizeof(cuint).} = enum
    DISPLAY_PRIMITIVE_NONE = -1, DISPLAY_PRIMITIVE_POINTS = 0,
    DISPLAY_PRIMITIVE_LINES = 1, DISPLAY_PRIMITIVE_LINE_LOOP = 2,
    DISPLAY_PRIMITIVE_LINE_STRIP = 3, DISPLAY_PRIMITIVE_TRIANGLES = 4,
    DISPLAY_PRIMITIVE_TRIANGLE_STRIP = 5, DISPLAY_PRIMITIVE_TRIANGLE_FAN = 6,
    DISPLAY_PRIMITIVE_NUMBER = 7
type
  enum_orxDISPLAY_SMOOTHING_t* {.size: sizeof(cuint).} = enum
    DISPLAY_SMOOTHING_NONE = -1, DISPLAY_SMOOTHING_DEFAULT = 0,
    DISPLAY_SMOOTHING_ON = 1, DISPLAY_SMOOTHING_OFF = 2,
    DISPLAY_SMOOTHING_NUMBER = 3
type
  enum_orxDISPLAY_BLEND_MODE_t* {.size: sizeof(cuint).} = enum
    DISPLAY_BLEND_MODE_NONE = -1, DISPLAY_BLEND_MODE_ALPHA = 0,
    DISPLAY_BLEND_MODE_MULTIPLY = 1, DISPLAY_BLEND_MODE_ADD = 2,
    DISPLAY_BLEND_MODE_PREMUL = 3, DISPLAY_BLEND_MODE_NUMBER = 4
type
  enum_orxDISPLAY_EVENT_t* {.size: sizeof(cuint).} = enum
    DISPLAY_EVENT_NONE = -1, DISPLAY_EVENT_SET_VIDEO_MODE = 0,
    DISPLAY_EVENT_LOAD_BITMAP = 1, DISPLAY_EVENT_NUMBER = 2
type
  enum_orxTEXTURE_EVENT_t* {.size: sizeof(cuint).} = enum
    TEXTURE_EVENT_NONE = -1, TEXTURE_EVENT_CREATE = 0, TEXTURE_EVENT_DELETE = 1,
    TEXTURE_EVENT_LOAD = 2, TEXTURE_EVENT_NUMBER = 3
type
  enum_orxJOYSTICK_BUTTON_t* {.size: sizeof(cuint).} = enum
    JOYSTICK_BUTTON_NONE = -1, JOYSTICK_BUTTON_A_1 = 0, JOYSTICK_BUTTON_B_1 = 1,
    JOYSTICK_BUTTON_X_1 = 2, JOYSTICK_BUTTON_Y_1 = 3,
    JOYSTICK_BUTTON_LBUMPER_1 = 4, JOYSTICK_BUTTON_RBUMPER_1 = 5,
    JOYSTICK_BUTTON_BACK_1 = 6, JOYSTICK_BUTTON_START_1 = 7,
    JOYSTICK_BUTTON_GUIDE_1 = 8, JOYSTICK_BUTTON_LTHUMB_1 = 9,
    JOYSTICK_BUTTON_RTHUMB_1 = 10, JOYSTICK_BUTTON_UP_1 = 11,
    JOYSTICK_BUTTON_RIGHT_1 = 12, JOYSTICK_BUTTON_DOWN_1 = 13,
    JOYSTICK_BUTTON_LEFT_1 = 14, JOYSTICK_BUTTON_1_1 = 15,
    JOYSTICK_BUTTON_2_1 = 16, JOYSTICK_BUTTON_3_1 = 17,
    JOYSTICK_BUTTON_4_1 = 18, JOYSTICK_BUTTON_5_1 = 19,
    JOYSTICK_BUTTON_6_1 = 20, JOYSTICK_BUTTON_7_1 = 21,
    JOYSTICK_BUTTON_8_1 = 22, JOYSTICK_BUTTON_9_1 = 23,
    JOYSTICK_BUTTON_10_1 = 24, JOYSTICK_BUTTON_11_1 = 25,
    JOYSTICK_BUTTON_12_1 = 26, JOYSTICK_BUTTON_13_1 = 27,
    JOYSTICK_BUTTON_14_1 = 28, JOYSTICK_BUTTON_15_1 = 29,
    JOYSTICK_BUTTON_16_1 = 30, JOYSTICK_BUTTON_17_1 = 31,
    JOYSTICK_BUTTON_18_1 = 32, JOYSTICK_BUTTON_19_1 = 33,
    JOYSTICK_BUTTON_20_1 = 34, JOYSTICK_BUTTON_21_1 = 35,
    JOYSTICK_BUTTON_22_1 = 36, JOYSTICK_BUTTON_23_1 = 37,
    JOYSTICK_BUTTON_24_1 = 38, JOYSTICK_BUTTON_25_1 = 39,
    JOYSTICK_BUTTON_SINGLE_NUMBER = 40, JOYSTICK_BUTTON_B_2 = 41,
    JOYSTICK_BUTTON_X_2 = 42, JOYSTICK_BUTTON_Y_2 = 43,
    JOYSTICK_BUTTON_LBUMPER_2 = 44, JOYSTICK_BUTTON_RBUMPER_2 = 45,
    JOYSTICK_BUTTON_BACK_2 = 46, JOYSTICK_BUTTON_START_2 = 47,
    JOYSTICK_BUTTON_GUIDE_2 = 48, JOYSTICK_BUTTON_LTHUMB_2 = 49,
    JOYSTICK_BUTTON_RTHUMB_2 = 50, JOYSTICK_BUTTON_UP_2 = 51,
    JOYSTICK_BUTTON_RIGHT_2 = 52, JOYSTICK_BUTTON_DOWN_2 = 53,
    JOYSTICK_BUTTON_LEFT_2 = 54, JOYSTICK_BUTTON_1_2 = 55,
    JOYSTICK_BUTTON_2_2 = 56, JOYSTICK_BUTTON_3_2 = 57,
    JOYSTICK_BUTTON_4_2 = 58, JOYSTICK_BUTTON_5_2 = 59,
    JOYSTICK_BUTTON_6_2 = 60, JOYSTICK_BUTTON_7_2 = 61,
    JOYSTICK_BUTTON_8_2 = 62, JOYSTICK_BUTTON_9_2 = 63,
    JOYSTICK_BUTTON_10_2 = 64, JOYSTICK_BUTTON_11_2 = 65,
    JOYSTICK_BUTTON_12_2 = 66, JOYSTICK_BUTTON_13_2 = 67,
    JOYSTICK_BUTTON_14_2 = 68, JOYSTICK_BUTTON_15_2 = 69,
    JOYSTICK_BUTTON_16_2 = 70, JOYSTICK_BUTTON_17_2 = 71,
    JOYSTICK_BUTTON_18_2 = 72, JOYSTICK_BUTTON_19_2 = 73,
    JOYSTICK_BUTTON_20_2 = 74, JOYSTICK_BUTTON_21_2 = 75,
    JOYSTICK_BUTTON_22_2 = 76, JOYSTICK_BUTTON_23_2 = 77,
    JOYSTICK_BUTTON_24_2 = 78, JOYSTICK_BUTTON_25_2 = 79,
    JOYSTICK_BUTTON_A_3 = 80, JOYSTICK_BUTTON_B_3 = 81,
    JOYSTICK_BUTTON_X_3 = 82, JOYSTICK_BUTTON_Y_3 = 83,
    JOYSTICK_BUTTON_LBUMPER_3 = 84, JOYSTICK_BUTTON_RBUMPER_3 = 85,
    JOYSTICK_BUTTON_BACK_3 = 86, JOYSTICK_BUTTON_START_3 = 87,
    JOYSTICK_BUTTON_GUIDE_3 = 88, JOYSTICK_BUTTON_LTHUMB_3 = 89,
    JOYSTICK_BUTTON_RTHUMB_3 = 90, JOYSTICK_BUTTON_UP_3 = 91,
    JOYSTICK_BUTTON_RIGHT_3 = 92, JOYSTICK_BUTTON_DOWN_3 = 93,
    JOYSTICK_BUTTON_LEFT_3 = 94, JOYSTICK_BUTTON_1_3 = 95,
    JOYSTICK_BUTTON_2_3 = 96, JOYSTICK_BUTTON_3_3 = 97,
    JOYSTICK_BUTTON_4_3 = 98, JOYSTICK_BUTTON_5_3 = 99,
    JOYSTICK_BUTTON_6_3 = 100, JOYSTICK_BUTTON_7_3 = 101,
    JOYSTICK_BUTTON_8_3 = 102, JOYSTICK_BUTTON_9_3 = 103,
    JOYSTICK_BUTTON_10_3 = 104, JOYSTICK_BUTTON_11_3 = 105,
    JOYSTICK_BUTTON_12_3 = 106, JOYSTICK_BUTTON_13_3 = 107,
    JOYSTICK_BUTTON_14_3 = 108, JOYSTICK_BUTTON_15_3 = 109,
    JOYSTICK_BUTTON_16_3 = 110, JOYSTICK_BUTTON_17_3 = 111,
    JOYSTICK_BUTTON_18_3 = 112, JOYSTICK_BUTTON_19_3 = 113,
    JOYSTICK_BUTTON_20_3 = 114, JOYSTICK_BUTTON_21_3 = 115,
    JOYSTICK_BUTTON_22_3 = 116, JOYSTICK_BUTTON_23_3 = 117,
    JOYSTICK_BUTTON_24_3 = 118, JOYSTICK_BUTTON_25_3 = 119,
    JOYSTICK_BUTTON_A_4 = 120, JOYSTICK_BUTTON_B_4 = 121,
    JOYSTICK_BUTTON_X_4 = 122, JOYSTICK_BUTTON_Y_4 = 123,
    JOYSTICK_BUTTON_LBUMPER_4 = 124, JOYSTICK_BUTTON_RBUMPER_4 = 125,
    JOYSTICK_BUTTON_BACK_4 = 126, JOYSTICK_BUTTON_START_4 = 127,
    JOYSTICK_BUTTON_GUIDE_4 = 128, JOYSTICK_BUTTON_LTHUMB_4 = 129,
    JOYSTICK_BUTTON_RTHUMB_4 = 130, JOYSTICK_BUTTON_UP_4 = 131,
    JOYSTICK_BUTTON_RIGHT_4 = 132, JOYSTICK_BUTTON_DOWN_4 = 133,
    JOYSTICK_BUTTON_LEFT_4 = 134, JOYSTICK_BUTTON_1_4 = 135,
    JOYSTICK_BUTTON_2_4 = 136, JOYSTICK_BUTTON_3_4 = 137,
    JOYSTICK_BUTTON_4_4 = 138, JOYSTICK_BUTTON_5_4 = 139,
    JOYSTICK_BUTTON_6_4 = 140, JOYSTICK_BUTTON_7_4 = 141,
    JOYSTICK_BUTTON_8_4 = 142, JOYSTICK_BUTTON_9_4 = 143,
    JOYSTICK_BUTTON_10_4 = 144, JOYSTICK_BUTTON_11_4 = 145,
    JOYSTICK_BUTTON_12_4 = 146, JOYSTICK_BUTTON_13_4 = 147,
    JOYSTICK_BUTTON_14_4 = 148, JOYSTICK_BUTTON_15_4 = 149,
    JOYSTICK_BUTTON_16_4 = 150, JOYSTICK_BUTTON_17_4 = 151,
    JOYSTICK_BUTTON_18_4 = 152, JOYSTICK_BUTTON_19_4 = 153,
    JOYSTICK_BUTTON_20_4 = 154, JOYSTICK_BUTTON_21_4 = 155,
    JOYSTICK_BUTTON_22_4 = 156, JOYSTICK_BUTTON_23_4 = 157,
    JOYSTICK_BUTTON_24_4 = 158, JOYSTICK_BUTTON_25_4 = 159,
    JOYSTICK_BUTTON_A_5 = 160, JOYSTICK_BUTTON_B_5 = 161,
    JOYSTICK_BUTTON_X_5 = 162, JOYSTICK_BUTTON_Y_5 = 163,
    JOYSTICK_BUTTON_LBUMPER_5 = 164, JOYSTICK_BUTTON_RBUMPER_5 = 165,
    JOYSTICK_BUTTON_BACK_5 = 166, JOYSTICK_BUTTON_START_5 = 167,
    JOYSTICK_BUTTON_GUIDE_5 = 168, JOYSTICK_BUTTON_LTHUMB_5 = 169,
    JOYSTICK_BUTTON_RTHUMB_5 = 170, JOYSTICK_BUTTON_UP_5 = 171,
    JOYSTICK_BUTTON_RIGHT_5 = 172, JOYSTICK_BUTTON_DOWN_5 = 173,
    JOYSTICK_BUTTON_LEFT_5 = 174, JOYSTICK_BUTTON_1_5 = 175,
    JOYSTICK_BUTTON_2_5 = 176, JOYSTICK_BUTTON_3_5 = 177,
    JOYSTICK_BUTTON_4_5 = 178, JOYSTICK_BUTTON_5_5 = 179,
    JOYSTICK_BUTTON_6_5 = 180, JOYSTICK_BUTTON_7_5 = 181,
    JOYSTICK_BUTTON_8_5 = 182, JOYSTICK_BUTTON_9_5 = 183,
    JOYSTICK_BUTTON_10_5 = 184, JOYSTICK_BUTTON_11_5 = 185,
    JOYSTICK_BUTTON_12_5 = 186, JOYSTICK_BUTTON_13_5 = 187,
    JOYSTICK_BUTTON_14_5 = 188, JOYSTICK_BUTTON_15_5 = 189,
    JOYSTICK_BUTTON_16_5 = 190, JOYSTICK_BUTTON_17_5 = 191,
    JOYSTICK_BUTTON_18_5 = 192, JOYSTICK_BUTTON_19_5 = 193,
    JOYSTICK_BUTTON_20_5 = 194, JOYSTICK_BUTTON_21_5 = 195,
    JOYSTICK_BUTTON_22_5 = 196, JOYSTICK_BUTTON_23_5 = 197,
    JOYSTICK_BUTTON_24_5 = 198, JOYSTICK_BUTTON_25_5 = 199,
    JOYSTICK_BUTTON_A_6 = 200, JOYSTICK_BUTTON_B_6 = 201,
    JOYSTICK_BUTTON_X_6 = 202, JOYSTICK_BUTTON_Y_6 = 203,
    JOYSTICK_BUTTON_LBUMPER_6 = 204, JOYSTICK_BUTTON_RBUMPER_6 = 205,
    JOYSTICK_BUTTON_BACK_6 = 206, JOYSTICK_BUTTON_START_6 = 207,
    JOYSTICK_BUTTON_GUIDE_6 = 208, JOYSTICK_BUTTON_LTHUMB_6 = 209,
    JOYSTICK_BUTTON_RTHUMB_6 = 210, JOYSTICK_BUTTON_UP_6 = 211,
    JOYSTICK_BUTTON_RIGHT_6 = 212, JOYSTICK_BUTTON_DOWN_6 = 213,
    JOYSTICK_BUTTON_LEFT_6 = 214, JOYSTICK_BUTTON_1_6 = 215,
    JOYSTICK_BUTTON_2_6 = 216, JOYSTICK_BUTTON_3_6 = 217,
    JOYSTICK_BUTTON_4_6 = 218, JOYSTICK_BUTTON_5_6 = 219,
    JOYSTICK_BUTTON_6_6 = 220, JOYSTICK_BUTTON_7_6 = 221,
    JOYSTICK_BUTTON_8_6 = 222, JOYSTICK_BUTTON_9_6 = 223,
    JOYSTICK_BUTTON_10_6 = 224, JOYSTICK_BUTTON_11_6 = 225,
    JOYSTICK_BUTTON_12_6 = 226, JOYSTICK_BUTTON_13_6 = 227,
    JOYSTICK_BUTTON_14_6 = 228, JOYSTICK_BUTTON_15_6 = 229,
    JOYSTICK_BUTTON_16_6 = 230, JOYSTICK_BUTTON_17_6 = 231,
    JOYSTICK_BUTTON_18_6 = 232, JOYSTICK_BUTTON_19_6 = 233,
    JOYSTICK_BUTTON_20_6 = 234, JOYSTICK_BUTTON_21_6 = 235,
    JOYSTICK_BUTTON_22_6 = 236, JOYSTICK_BUTTON_23_6 = 237,
    JOYSTICK_BUTTON_24_6 = 238, JOYSTICK_BUTTON_25_6 = 239,
    JOYSTICK_BUTTON_A_7 = 240, JOYSTICK_BUTTON_B_7 = 241,
    JOYSTICK_BUTTON_X_7 = 242, JOYSTICK_BUTTON_Y_7 = 243,
    JOYSTICK_BUTTON_LBUMPER_7 = 244, JOYSTICK_BUTTON_RBUMPER_7 = 245,
    JOYSTICK_BUTTON_BACK_7 = 246, JOYSTICK_BUTTON_START_7 = 247,
    JOYSTICK_BUTTON_GUIDE_7 = 248, JOYSTICK_BUTTON_LTHUMB_7 = 249,
    JOYSTICK_BUTTON_RTHUMB_7 = 250, JOYSTICK_BUTTON_UP_7 = 251,
    JOYSTICK_BUTTON_RIGHT_7 = 252, JOYSTICK_BUTTON_DOWN_7 = 253,
    JOYSTICK_BUTTON_LEFT_7 = 254, JOYSTICK_BUTTON_1_7 = 255,
    JOYSTICK_BUTTON_2_7 = 256, JOYSTICK_BUTTON_3_7 = 257,
    JOYSTICK_BUTTON_4_7 = 258, JOYSTICK_BUTTON_5_7 = 259,
    JOYSTICK_BUTTON_6_7 = 260, JOYSTICK_BUTTON_7_7 = 261,
    JOYSTICK_BUTTON_8_7 = 262, JOYSTICK_BUTTON_9_7 = 263,
    JOYSTICK_BUTTON_10_7 = 264, JOYSTICK_BUTTON_11_7 = 265,
    JOYSTICK_BUTTON_12_7 = 266, JOYSTICK_BUTTON_13_7 = 267,
    JOYSTICK_BUTTON_14_7 = 268, JOYSTICK_BUTTON_15_7 = 269,
    JOYSTICK_BUTTON_16_7 = 270, JOYSTICK_BUTTON_17_7 = 271,
    JOYSTICK_BUTTON_18_7 = 272, JOYSTICK_BUTTON_19_7 = 273,
    JOYSTICK_BUTTON_20_7 = 274, JOYSTICK_BUTTON_21_7 = 275,
    JOYSTICK_BUTTON_22_7 = 276, JOYSTICK_BUTTON_23_7 = 277,
    JOYSTICK_BUTTON_24_7 = 278, JOYSTICK_BUTTON_25_7 = 279,
    JOYSTICK_BUTTON_A_8 = 280, JOYSTICK_BUTTON_B_8 = 281,
    JOYSTICK_BUTTON_X_8 = 282, JOYSTICK_BUTTON_Y_8 = 283,
    JOYSTICK_BUTTON_LBUMPER_8 = 284, JOYSTICK_BUTTON_RBUMPER_8 = 285,
    JOYSTICK_BUTTON_BACK_8 = 286, JOYSTICK_BUTTON_START_8 = 287,
    JOYSTICK_BUTTON_GUIDE_8 = 288, JOYSTICK_BUTTON_LTHUMB_8 = 289,
    JOYSTICK_BUTTON_RTHUMB_8 = 290, JOYSTICK_BUTTON_UP_8 = 291,
    JOYSTICK_BUTTON_RIGHT_8 = 292, JOYSTICK_BUTTON_DOWN_8 = 293,
    JOYSTICK_BUTTON_LEFT_8 = 294, JOYSTICK_BUTTON_1_8 = 295,
    JOYSTICK_BUTTON_2_8 = 296, JOYSTICK_BUTTON_3_8 = 297,
    JOYSTICK_BUTTON_4_8 = 298, JOYSTICK_BUTTON_5_8 = 299,
    JOYSTICK_BUTTON_6_8 = 300, JOYSTICK_BUTTON_7_8 = 301,
    JOYSTICK_BUTTON_8_8 = 302, JOYSTICK_BUTTON_9_8 = 303,
    JOYSTICK_BUTTON_10_8 = 304, JOYSTICK_BUTTON_11_8 = 305,
    JOYSTICK_BUTTON_12_8 = 306, JOYSTICK_BUTTON_13_8 = 307,
    JOYSTICK_BUTTON_14_8 = 308, JOYSTICK_BUTTON_15_8 = 309,
    JOYSTICK_BUTTON_16_8 = 310, JOYSTICK_BUTTON_17_8 = 311,
    JOYSTICK_BUTTON_18_8 = 312, JOYSTICK_BUTTON_19_8 = 313,
    JOYSTICK_BUTTON_20_8 = 314, JOYSTICK_BUTTON_21_8 = 315,
    JOYSTICK_BUTTON_22_8 = 316, JOYSTICK_BUTTON_23_8 = 317,
    JOYSTICK_BUTTON_24_8 = 318, JOYSTICK_BUTTON_25_8 = 319,
    JOYSTICK_BUTTON_A_9 = 320, JOYSTICK_BUTTON_B_9 = 321,
    JOYSTICK_BUTTON_X_9 = 322, JOYSTICK_BUTTON_Y_9 = 323,
    JOYSTICK_BUTTON_LBUMPER_9 = 324, JOYSTICK_BUTTON_RBUMPER_9 = 325,
    JOYSTICK_BUTTON_BACK_9 = 326, JOYSTICK_BUTTON_START_9 = 327,
    JOYSTICK_BUTTON_GUIDE_9 = 328, JOYSTICK_BUTTON_LTHUMB_9 = 329,
    JOYSTICK_BUTTON_RTHUMB_9 = 330, JOYSTICK_BUTTON_UP_9 = 331,
    JOYSTICK_BUTTON_RIGHT_9 = 332, JOYSTICK_BUTTON_DOWN_9 = 333,
    JOYSTICK_BUTTON_LEFT_9 = 334, JOYSTICK_BUTTON_1_9 = 335,
    JOYSTICK_BUTTON_2_9 = 336, JOYSTICK_BUTTON_3_9 = 337,
    JOYSTICK_BUTTON_4_9 = 338, JOYSTICK_BUTTON_5_9 = 339,
    JOYSTICK_BUTTON_6_9 = 340, JOYSTICK_BUTTON_7_9 = 341,
    JOYSTICK_BUTTON_8_9 = 342, JOYSTICK_BUTTON_9_9 = 343,
    JOYSTICK_BUTTON_10_9 = 344, JOYSTICK_BUTTON_11_9 = 345,
    JOYSTICK_BUTTON_12_9 = 346, JOYSTICK_BUTTON_13_9 = 347,
    JOYSTICK_BUTTON_14_9 = 348, JOYSTICK_BUTTON_15_9 = 349,
    JOYSTICK_BUTTON_16_9 = 350, JOYSTICK_BUTTON_17_9 = 351,
    JOYSTICK_BUTTON_18_9 = 352, JOYSTICK_BUTTON_19_9 = 353,
    JOYSTICK_BUTTON_20_9 = 354, JOYSTICK_BUTTON_21_9 = 355,
    JOYSTICK_BUTTON_22_9 = 356, JOYSTICK_BUTTON_23_9 = 357,
    JOYSTICK_BUTTON_24_9 = 358, JOYSTICK_BUTTON_25_9 = 359,
    JOYSTICK_BUTTON_A_10 = 360, JOYSTICK_BUTTON_B_10 = 361,
    JOYSTICK_BUTTON_X_10 = 362, JOYSTICK_BUTTON_Y_10 = 363,
    JOYSTICK_BUTTON_LBUMPER_10 = 364, JOYSTICK_BUTTON_RBUMPER_10 = 365,
    JOYSTICK_BUTTON_BACK_10 = 366, JOYSTICK_BUTTON_START_10 = 367,
    JOYSTICK_BUTTON_GUIDE_10 = 368, JOYSTICK_BUTTON_LTHUMB_10 = 369,
    JOYSTICK_BUTTON_RTHUMB_10 = 370, JOYSTICK_BUTTON_UP_10 = 371,
    JOYSTICK_BUTTON_RIGHT_10 = 372, JOYSTICK_BUTTON_DOWN_10 = 373,
    JOYSTICK_BUTTON_LEFT_10 = 374, JOYSTICK_BUTTON_1_10 = 375,
    JOYSTICK_BUTTON_2_10 = 376, JOYSTICK_BUTTON_3_10 = 377,
    JOYSTICK_BUTTON_4_10 = 378, JOYSTICK_BUTTON_5_10 = 379,
    JOYSTICK_BUTTON_6_10 = 380, JOYSTICK_BUTTON_7_10 = 381,
    JOYSTICK_BUTTON_8_10 = 382, JOYSTICK_BUTTON_9_10 = 383,
    JOYSTICK_BUTTON_10_10 = 384, JOYSTICK_BUTTON_11_10 = 385,
    JOYSTICK_BUTTON_12_10 = 386, JOYSTICK_BUTTON_13_10 = 387,
    JOYSTICK_BUTTON_14_10 = 388, JOYSTICK_BUTTON_15_10 = 389,
    JOYSTICK_BUTTON_16_10 = 390, JOYSTICK_BUTTON_17_10 = 391,
    JOYSTICK_BUTTON_18_10 = 392, JOYSTICK_BUTTON_19_10 = 393,
    JOYSTICK_BUTTON_20_10 = 394, JOYSTICK_BUTTON_21_10 = 395,
    JOYSTICK_BUTTON_22_10 = 396, JOYSTICK_BUTTON_23_10 = 397,
    JOYSTICK_BUTTON_24_10 = 398, JOYSTICK_BUTTON_25_10 = 399,
    JOYSTICK_BUTTON_A_11 = 400, JOYSTICK_BUTTON_B_11 = 401,
    JOYSTICK_BUTTON_X_11 = 402, JOYSTICK_BUTTON_Y_11 = 403,
    JOYSTICK_BUTTON_LBUMPER_11 = 404, JOYSTICK_BUTTON_RBUMPER_11 = 405,
    JOYSTICK_BUTTON_BACK_11 = 406, JOYSTICK_BUTTON_START_11 = 407,
    JOYSTICK_BUTTON_GUIDE_11 = 408, JOYSTICK_BUTTON_LTHUMB_11 = 409,
    JOYSTICK_BUTTON_RTHUMB_11 = 410, JOYSTICK_BUTTON_UP_11 = 411,
    JOYSTICK_BUTTON_RIGHT_11 = 412, JOYSTICK_BUTTON_DOWN_11 = 413,
    JOYSTICK_BUTTON_LEFT_11 = 414, JOYSTICK_BUTTON_1_11_enumval = 415,
    JOYSTICK_BUTTON_2_11_enumval = 416, JOYSTICK_BUTTON_3_11 = 417,
    JOYSTICK_BUTTON_4_11 = 418, JOYSTICK_BUTTON_5_11 = 419,
    JOYSTICK_BUTTON_6_11 = 420, JOYSTICK_BUTTON_7_11 = 421,
    JOYSTICK_BUTTON_8_11 = 422, JOYSTICK_BUTTON_9_11 = 423,
    JOYSTICK_BUTTON_10_11 = 424, JOYSTICK_BUTTON_11_11 = 425,
    JOYSTICK_BUTTON_12_11 = 426, JOYSTICK_BUTTON_13_11 = 427,
    JOYSTICK_BUTTON_14_11 = 428, JOYSTICK_BUTTON_15_11 = 429,
    JOYSTICK_BUTTON_16_11 = 430, JOYSTICK_BUTTON_17_11 = 431,
    JOYSTICK_BUTTON_18_11 = 432, JOYSTICK_BUTTON_19_11 = 433,
    JOYSTICK_BUTTON_20_11 = 434, JOYSTICK_BUTTON_21_11 = 435,
    JOYSTICK_BUTTON_22_11 = 436, JOYSTICK_BUTTON_23_11 = 437,
    JOYSTICK_BUTTON_24_11 = 438, JOYSTICK_BUTTON_25_11 = 439,
    JOYSTICK_BUTTON_A_12 = 440, JOYSTICK_BUTTON_B_12 = 441,
    JOYSTICK_BUTTON_X_12 = 442, JOYSTICK_BUTTON_Y_12 = 443,
    JOYSTICK_BUTTON_LBUMPER_12 = 444, JOYSTICK_BUTTON_RBUMPER_12 = 445,
    JOYSTICK_BUTTON_BACK_12 = 446, JOYSTICK_BUTTON_START_12 = 447,
    JOYSTICK_BUTTON_GUIDE_12 = 448, JOYSTICK_BUTTON_LTHUMB_12 = 449,
    JOYSTICK_BUTTON_RTHUMB_12 = 450, JOYSTICK_BUTTON_UP_12 = 451,
    JOYSTICK_BUTTON_RIGHT_12 = 452, JOYSTICK_BUTTON_DOWN_12 = 453,
    JOYSTICK_BUTTON_LEFT_12 = 454, JOYSTICK_BUTTON_1_12_enumval = 455,
    JOYSTICK_BUTTON_2_12_enumval = 456, JOYSTICK_BUTTON_3_12 = 457,
    JOYSTICK_BUTTON_4_12 = 458, JOYSTICK_BUTTON_5_12 = 459,
    JOYSTICK_BUTTON_6_12 = 460, JOYSTICK_BUTTON_7_12 = 461,
    JOYSTICK_BUTTON_8_12 = 462, JOYSTICK_BUTTON_9_12 = 463,
    JOYSTICK_BUTTON_10_12 = 464, JOYSTICK_BUTTON_11_12 = 465,
    JOYSTICK_BUTTON_12_12 = 466, JOYSTICK_BUTTON_13_12 = 467,
    JOYSTICK_BUTTON_14_12 = 468, JOYSTICK_BUTTON_15_12 = 469,
    JOYSTICK_BUTTON_16_12 = 470, JOYSTICK_BUTTON_17_12 = 471,
    JOYSTICK_BUTTON_18_12 = 472, JOYSTICK_BUTTON_19_12 = 473,
    JOYSTICK_BUTTON_20_12 = 474, JOYSTICK_BUTTON_21_12 = 475,
    JOYSTICK_BUTTON_22_12 = 476, JOYSTICK_BUTTON_23_12 = 477,
    JOYSTICK_BUTTON_24_12 = 478, JOYSTICK_BUTTON_25_12 = 479,
    JOYSTICK_BUTTON_A_13 = 480, JOYSTICK_BUTTON_B_13 = 481,
    JOYSTICK_BUTTON_X_13 = 482, JOYSTICK_BUTTON_Y_13 = 483,
    JOYSTICK_BUTTON_LBUMPER_13 = 484, JOYSTICK_BUTTON_RBUMPER_13 = 485,
    JOYSTICK_BUTTON_BACK_13 = 486, JOYSTICK_BUTTON_START_13 = 487,
    JOYSTICK_BUTTON_GUIDE_13 = 488, JOYSTICK_BUTTON_LTHUMB_13 = 489,
    JOYSTICK_BUTTON_RTHUMB_13 = 490, JOYSTICK_BUTTON_UP_13 = 491,
    JOYSTICK_BUTTON_RIGHT_13 = 492, JOYSTICK_BUTTON_DOWN_13 = 493,
    JOYSTICK_BUTTON_LEFT_13 = 494, JOYSTICK_BUTTON_1_13_enumval = 495,
    JOYSTICK_BUTTON_2_13_enumval = 496, JOYSTICK_BUTTON_3_13 = 497,
    JOYSTICK_BUTTON_4_13 = 498, JOYSTICK_BUTTON_5_13 = 499,
    JOYSTICK_BUTTON_6_13 = 500, JOYSTICK_BUTTON_7_13 = 501,
    JOYSTICK_BUTTON_8_13 = 502, JOYSTICK_BUTTON_9_13 = 503,
    JOYSTICK_BUTTON_10_13 = 504, JOYSTICK_BUTTON_11_13 = 505,
    JOYSTICK_BUTTON_12_13 = 506, JOYSTICK_BUTTON_13_13 = 507,
    JOYSTICK_BUTTON_14_13 = 508, JOYSTICK_BUTTON_15_13 = 509,
    JOYSTICK_BUTTON_16_13 = 510, JOYSTICK_BUTTON_17_13 = 511,
    JOYSTICK_BUTTON_18_13 = 512, JOYSTICK_BUTTON_19_13 = 513,
    JOYSTICK_BUTTON_20_13 = 514, JOYSTICK_BUTTON_21_13 = 515,
    JOYSTICK_BUTTON_22_13 = 516, JOYSTICK_BUTTON_23_13 = 517,
    JOYSTICK_BUTTON_24_13 = 518, JOYSTICK_BUTTON_25_13 = 519,
    JOYSTICK_BUTTON_A_14 = 520, JOYSTICK_BUTTON_B_14 = 521,
    JOYSTICK_BUTTON_X_14 = 522, JOYSTICK_BUTTON_Y_14 = 523,
    JOYSTICK_BUTTON_LBUMPER_14 = 524, JOYSTICK_BUTTON_RBUMPER_14 = 525,
    JOYSTICK_BUTTON_BACK_14 = 526, JOYSTICK_BUTTON_START_14 = 527,
    JOYSTICK_BUTTON_GUIDE_14 = 528, JOYSTICK_BUTTON_LTHUMB_14 = 529,
    JOYSTICK_BUTTON_RTHUMB_14 = 530, JOYSTICK_BUTTON_UP_14 = 531,
    JOYSTICK_BUTTON_RIGHT_14 = 532, JOYSTICK_BUTTON_DOWN_14 = 533,
    JOYSTICK_BUTTON_LEFT_14 = 534, JOYSTICK_BUTTON_1_14_enumval = 535,
    JOYSTICK_BUTTON_2_14_enumval = 536, JOYSTICK_BUTTON_3_14 = 537,
    JOYSTICK_BUTTON_4_14 = 538, JOYSTICK_BUTTON_5_14 = 539,
    JOYSTICK_BUTTON_6_14 = 540, JOYSTICK_BUTTON_7_14 = 541,
    JOYSTICK_BUTTON_8_14 = 542, JOYSTICK_BUTTON_9_14 = 543,
    JOYSTICK_BUTTON_10_14 = 544, JOYSTICK_BUTTON_11_14 = 545,
    JOYSTICK_BUTTON_12_14 = 546, JOYSTICK_BUTTON_13_14 = 547,
    JOYSTICK_BUTTON_14_14 = 548, JOYSTICK_BUTTON_15_14 = 549,
    JOYSTICK_BUTTON_16_14 = 550, JOYSTICK_BUTTON_17_14 = 551,
    JOYSTICK_BUTTON_18_14 = 552, JOYSTICK_BUTTON_19_14 = 553,
    JOYSTICK_BUTTON_20_14 = 554, JOYSTICK_BUTTON_21_14 = 555,
    JOYSTICK_BUTTON_22_14 = 556, JOYSTICK_BUTTON_23_14 = 557,
    JOYSTICK_BUTTON_24_14 = 558, JOYSTICK_BUTTON_25_14 = 559,
    JOYSTICK_BUTTON_A_15 = 560, JOYSTICK_BUTTON_B_15 = 561,
    JOYSTICK_BUTTON_X_15 = 562, JOYSTICK_BUTTON_Y_15 = 563,
    JOYSTICK_BUTTON_LBUMPER_15 = 564, JOYSTICK_BUTTON_RBUMPER_15 = 565,
    JOYSTICK_BUTTON_BACK_15 = 566, JOYSTICK_BUTTON_START_15 = 567,
    JOYSTICK_BUTTON_GUIDE_15 = 568, JOYSTICK_BUTTON_LTHUMB_15 = 569,
    JOYSTICK_BUTTON_RTHUMB_15 = 570, JOYSTICK_BUTTON_UP_15 = 571,
    JOYSTICK_BUTTON_RIGHT_15 = 572, JOYSTICK_BUTTON_DOWN_15 = 573,
    JOYSTICK_BUTTON_LEFT_15 = 574, JOYSTICK_BUTTON_1_15_enumval = 575,
    JOYSTICK_BUTTON_2_15_enumval = 576, JOYSTICK_BUTTON_3_15 = 577,
    JOYSTICK_BUTTON_4_15 = 578, JOYSTICK_BUTTON_5_15 = 579,
    JOYSTICK_BUTTON_6_15 = 580, JOYSTICK_BUTTON_7_15 = 581,
    JOYSTICK_BUTTON_8_15 = 582, JOYSTICK_BUTTON_9_15 = 583,
    JOYSTICK_BUTTON_10_15 = 584, JOYSTICK_BUTTON_11_15 = 585,
    JOYSTICK_BUTTON_12_15 = 586, JOYSTICK_BUTTON_13_15 = 587,
    JOYSTICK_BUTTON_14_15 = 588, JOYSTICK_BUTTON_15_15 = 589,
    JOYSTICK_BUTTON_16_15 = 590, JOYSTICK_BUTTON_17_15 = 591,
    JOYSTICK_BUTTON_18_15 = 592, JOYSTICK_BUTTON_19_15 = 593,
    JOYSTICK_BUTTON_20_15 = 594, JOYSTICK_BUTTON_21_15 = 595,
    JOYSTICK_BUTTON_22_15 = 596, JOYSTICK_BUTTON_23_15 = 597,
    JOYSTICK_BUTTON_24_15 = 598, JOYSTICK_BUTTON_25_15 = 599,
    JOYSTICK_BUTTON_A_16 = 600, JOYSTICK_BUTTON_B_16 = 601,
    JOYSTICK_BUTTON_X_16 = 602, JOYSTICK_BUTTON_Y_16 = 603,
    JOYSTICK_BUTTON_LBUMPER_16 = 604, JOYSTICK_BUTTON_RBUMPER_16 = 605,
    JOYSTICK_BUTTON_BACK_16 = 606, JOYSTICK_BUTTON_START_16 = 607,
    JOYSTICK_BUTTON_GUIDE_16 = 608, JOYSTICK_BUTTON_LTHUMB_16 = 609,
    JOYSTICK_BUTTON_RTHUMB_16 = 610, JOYSTICK_BUTTON_UP_16 = 611,
    JOYSTICK_BUTTON_RIGHT_16 = 612, JOYSTICK_BUTTON_DOWN_16 = 613,
    JOYSTICK_BUTTON_LEFT_16 = 614, JOYSTICK_BUTTON_1_16_enumval = 615,
    JOYSTICK_BUTTON_2_16_enumval = 616, JOYSTICK_BUTTON_3_16 = 617,
    JOYSTICK_BUTTON_4_16 = 618, JOYSTICK_BUTTON_5_16 = 619,
    JOYSTICK_BUTTON_6_16 = 620, JOYSTICK_BUTTON_7_16 = 621,
    JOYSTICK_BUTTON_8_16 = 622, JOYSTICK_BUTTON_9_16 = 623,
    JOYSTICK_BUTTON_10_16 = 624, JOYSTICK_BUTTON_11_16 = 625,
    JOYSTICK_BUTTON_12_16 = 626, JOYSTICK_BUTTON_13_16 = 627,
    JOYSTICK_BUTTON_14_16 = 628, JOYSTICK_BUTTON_15_16 = 629,
    JOYSTICK_BUTTON_16_16 = 630, JOYSTICK_BUTTON_17_16 = 631,
    JOYSTICK_BUTTON_18_16 = 632, JOYSTICK_BUTTON_19_16 = 633,
    JOYSTICK_BUTTON_20_16 = 634, JOYSTICK_BUTTON_21_16 = 635,
    JOYSTICK_BUTTON_22_16 = 636, JOYSTICK_BUTTON_23_16 = 637,
    JOYSTICK_BUTTON_24_16 = 638, JOYSTICK_BUTTON_25_16 = 639,
    JOYSTICK_BUTTON_NUMBER = 640
const
  JOYSTICK_BUTTON_A_2* = enum_orxJOYSTICK_BUTTON_t.JOYSTICK_BUTTON_SINGLE_NUMBER
type
  enum_orxJOYSTICK_AXIS_t* {.size: sizeof(cuint).} = enum
    JOYSTICK_AXIS_NONE = -1, JOYSTICK_AXIS_LX_1 = 0, JOYSTICK_AXIS_LY_1 = 1,
    JOYSTICK_AXIS_RX_1 = 2, JOYSTICK_AXIS_RY_1 = 3,
    JOYSTICK_AXIS_LTRIGGER_1 = 4, JOYSTICK_AXIS_RTRIGGER_1 = 5,
    JOYSTICK_AXIS_SINGLE_NUMBER = 6, JOYSTICK_AXIS_LY_2 = 7,
    JOYSTICK_AXIS_RX_2 = 8, JOYSTICK_AXIS_RY_2 = 9,
    JOYSTICK_AXIS_LTRIGGER_2 = 10, JOYSTICK_AXIS_RTRIGGER_2 = 11,
    JOYSTICK_AXIS_LX_3 = 12, JOYSTICK_AXIS_LY_3 = 13, JOYSTICK_AXIS_RX_3 = 14,
    JOYSTICK_AXIS_RY_3 = 15, JOYSTICK_AXIS_LTRIGGER_3 = 16,
    JOYSTICK_AXIS_RTRIGGER_3 = 17, JOYSTICK_AXIS_LX_4 = 18,
    JOYSTICK_AXIS_LY_4 = 19, JOYSTICK_AXIS_RX_4 = 20, JOYSTICK_AXIS_RY_4 = 21,
    JOYSTICK_AXIS_LTRIGGER_4 = 22, JOYSTICK_AXIS_RTRIGGER_4 = 23,
    JOYSTICK_AXIS_LX_5 = 24, JOYSTICK_AXIS_LY_5 = 25, JOYSTICK_AXIS_RX_5 = 26,
    JOYSTICK_AXIS_RY_5 = 27, JOYSTICK_AXIS_LTRIGGER_5 = 28,
    JOYSTICK_AXIS_RTRIGGER_5 = 29, JOYSTICK_AXIS_LX_6 = 30,
    JOYSTICK_AXIS_LY_6 = 31, JOYSTICK_AXIS_RX_6 = 32, JOYSTICK_AXIS_RY_6 = 33,
    JOYSTICK_AXIS_LTRIGGER_6 = 34, JOYSTICK_AXIS_RTRIGGER_6 = 35,
    JOYSTICK_AXIS_LX_7 = 36, JOYSTICK_AXIS_LY_7 = 37, JOYSTICK_AXIS_RX_7 = 38,
    JOYSTICK_AXIS_RY_7 = 39, JOYSTICK_AXIS_LTRIGGER_7 = 40,
    JOYSTICK_AXIS_RTRIGGER_7 = 41, JOYSTICK_AXIS_LX_8 = 42,
    JOYSTICK_AXIS_LY_8 = 43, JOYSTICK_AXIS_RX_8 = 44, JOYSTICK_AXIS_RY_8 = 45,
    JOYSTICK_AXIS_LTRIGGER_8 = 46, JOYSTICK_AXIS_RTRIGGER_8 = 47,
    JOYSTICK_AXIS_LX_9 = 48, JOYSTICK_AXIS_LY_9 = 49, JOYSTICK_AXIS_RX_9 = 50,
    JOYSTICK_AXIS_RY_9 = 51, JOYSTICK_AXIS_LTRIGGER_9 = 52,
    JOYSTICK_AXIS_RTRIGGER_9 = 53, JOYSTICK_AXIS_LX_10 = 54,
    JOYSTICK_AXIS_LY_10 = 55, JOYSTICK_AXIS_RX_10 = 56,
    JOYSTICK_AXIS_RY_10 = 57, JOYSTICK_AXIS_LTRIGGER_10 = 58,
    JOYSTICK_AXIS_RTRIGGER_10 = 59, JOYSTICK_AXIS_LX_11 = 60,
    JOYSTICK_AXIS_LY_11 = 61, JOYSTICK_AXIS_RX_11 = 62,
    JOYSTICK_AXIS_RY_11 = 63, JOYSTICK_AXIS_LTRIGGER_11 = 64,
    JOYSTICK_AXIS_RTRIGGER_11 = 65, JOYSTICK_AXIS_LX_12 = 66,
    JOYSTICK_AXIS_LY_12 = 67, JOYSTICK_AXIS_RX_12 = 68,
    JOYSTICK_AXIS_RY_12 = 69, JOYSTICK_AXIS_LTRIGGER_12 = 70,
    JOYSTICK_AXIS_RTRIGGER_12 = 71, JOYSTICK_AXIS_LX_13 = 72,
    JOYSTICK_AXIS_LY_13 = 73, JOYSTICK_AXIS_RX_13 = 74,
    JOYSTICK_AXIS_RY_13 = 75, JOYSTICK_AXIS_LTRIGGER_13 = 76,
    JOYSTICK_AXIS_RTRIGGER_13 = 77, JOYSTICK_AXIS_LX_14 = 78,
    JOYSTICK_AXIS_LY_14 = 79, JOYSTICK_AXIS_RX_14 = 80,
    JOYSTICK_AXIS_RY_14 = 81, JOYSTICK_AXIS_LTRIGGER_14 = 82,
    JOYSTICK_AXIS_RTRIGGER_14 = 83, JOYSTICK_AXIS_LX_15 = 84,
    JOYSTICK_AXIS_LY_15 = 85, JOYSTICK_AXIS_RX_15 = 86,
    JOYSTICK_AXIS_RY_15 = 87, JOYSTICK_AXIS_LTRIGGER_15 = 88,
    JOYSTICK_AXIS_RTRIGGER_15 = 89, JOYSTICK_AXIS_LX_16 = 90,
    JOYSTICK_AXIS_LY_16 = 91, JOYSTICK_AXIS_RX_16 = 92,
    JOYSTICK_AXIS_RY_16 = 93, JOYSTICK_AXIS_LTRIGGER_16 = 94,
    JOYSTICK_AXIS_RTRIGGER_16 = 95, JOYSTICK_AXIS_NUMBER = 96
const
  JOYSTICK_AXIS_LX_2* = enum_orxJOYSTICK_AXIS_t.JOYSTICK_AXIS_SINGLE_NUMBER
type
  enum_orxKEYBOARD_KEY_t* {.size: sizeof(cuint).} = enum
    KEYBOARD_KEY_NONE = -1, KEYBOARD_KEY_0 = 0, KEYBOARD_KEY_1 = 1,
    KEYBOARD_KEY_2 = 2, KEYBOARD_KEY_3 = 3, KEYBOARD_KEY_4 = 4,
    KEYBOARD_KEY_5 = 5, KEYBOARD_KEY_6 = 6, KEYBOARD_KEY_7 = 7,
    KEYBOARD_KEY_8 = 8, KEYBOARD_KEY_9 = 9, KEYBOARD_KEY_A = 10,
    KEYBOARD_KEY_B = 11, KEYBOARD_KEY_C = 12, KEYBOARD_KEY_D = 13,
    KEYBOARD_KEY_E = 14, KEYBOARD_KEY_F = 15, KEYBOARD_KEY_G = 16,
    KEYBOARD_KEY_H = 17, KEYBOARD_KEY_I = 18, KEYBOARD_KEY_J = 19,
    KEYBOARD_KEY_K = 20, KEYBOARD_KEY_L = 21, KEYBOARD_KEY_M = 22,
    KEYBOARD_KEY_N = 23, KEYBOARD_KEY_O = 24, KEYBOARD_KEY_P = 25,
    KEYBOARD_KEY_Q = 26, KEYBOARD_KEY_R = 27, KEYBOARD_KEY_S = 28,
    KEYBOARD_KEY_T = 29, KEYBOARD_KEY_U = 30, KEYBOARD_KEY_V = 31,
    KEYBOARD_KEY_W = 32, KEYBOARD_KEY_X = 33, KEYBOARD_KEY_Y = 34,
    KEYBOARD_KEY_Z = 35, KEYBOARD_KEY_SPACE = 36, KEYBOARD_KEY_QUOTE = 37,
    KEYBOARD_KEY_COMMA = 38, KEYBOARD_KEY_DASH = 39, KEYBOARD_KEY_PERIOD = 40,
    KEYBOARD_KEY_SLASH = 41, KEYBOARD_KEY_SEMICOLON = 42,
    KEYBOARD_KEY_EQUAL = 43, KEYBOARD_KEY_LBRACKET = 44,
    KEYBOARD_KEY_BACKSLASH = 45, KEYBOARD_KEY_RBRACKET = 46,
    KEYBOARD_KEY_BACKQUOTE = 47, KEYBOARD_KEY_WORLD_1 = 48,
    KEYBOARD_KEY_WORLD_2 = 49, KEYBOARD_KEY_ESCAPE = 50,
    KEYBOARD_KEY_ENTER = 51, KEYBOARD_KEY_TAB = 52, KEYBOARD_KEY_BACKSPACE = 53,
    KEYBOARD_KEY_INSERT = 54, KEYBOARD_KEY_DELETE = 55, KEYBOARD_KEY_RIGHT = 56,
    KEYBOARD_KEY_LEFT = 57, KEYBOARD_KEY_DOWN = 58, KEYBOARD_KEY_UP = 59,
    KEYBOARD_KEY_PAGE_UP = 60, KEYBOARD_KEY_PAGE_DOWN = 61,
    KEYBOARD_KEY_HOME = 62, KEYBOARD_KEY_END = 63, KEYBOARD_KEY_CAPS_LOCK = 64,
    KEYBOARD_KEY_SCROLL_LOCK = 65, KEYBOARD_KEY_NUM_LOCK = 66,
    KEYBOARD_KEY_PRINT_SCREEN = 67, KEYBOARD_KEY_PAUSE = 68,
    KEYBOARD_KEY_VOLUME_DOWN = 69, KEYBOARD_KEY_VOLUME_UP = 70,
    KEYBOARD_KEY_F1 = 71, KEYBOARD_KEY_F2 = 72, KEYBOARD_KEY_F3 = 73,
    KEYBOARD_KEY_F4 = 74, KEYBOARD_KEY_F5 = 75, KEYBOARD_KEY_F6 = 76,
    KEYBOARD_KEY_F7 = 77, KEYBOARD_KEY_F8 = 78, KEYBOARD_KEY_F9 = 79,
    KEYBOARD_KEY_F10 = 80, KEYBOARD_KEY_F11 = 81, KEYBOARD_KEY_F12 = 82,
    KEYBOARD_KEY_F13 = 83, KEYBOARD_KEY_F14 = 84, KEYBOARD_KEY_F15 = 85,
    KEYBOARD_KEY_F16 = 86, KEYBOARD_KEY_F17 = 87, KEYBOARD_KEY_F18 = 88,
    KEYBOARD_KEY_F19 = 89, KEYBOARD_KEY_F20 = 90, KEYBOARD_KEY_F21 = 91,
    KEYBOARD_KEY_F22 = 92, KEYBOARD_KEY_F23 = 93, KEYBOARD_KEY_F24 = 94,
    KEYBOARD_KEY_F25 = 95, KEYBOARD_KEY_NUMPAD_0 = 96,
    KEYBOARD_KEY_NUMPAD_1 = 97, KEYBOARD_KEY_NUMPAD_2 = 98,
    KEYBOARD_KEY_NUMPAD_3 = 99, KEYBOARD_KEY_NUMPAD_4 = 100,
    KEYBOARD_KEY_NUMPAD_5 = 101, KEYBOARD_KEY_NUMPAD_6 = 102,
    KEYBOARD_KEY_NUMPAD_7 = 103, KEYBOARD_KEY_NUMPAD_8 = 104,
    KEYBOARD_KEY_NUMPAD_9 = 105, KEYBOARD_KEY_NUMPAD_DECIMAL = 106,
    KEYBOARD_KEY_NUMPAD_DIVIDE = 107, KEYBOARD_KEY_NUMPAD_MULTIPLY = 108,
    KEYBOARD_KEY_NUMPAD_SUBTRACT = 109, KEYBOARD_KEY_NUMPAD_ADD = 110,
    KEYBOARD_KEY_NUMPAD_ENTER = 111, KEYBOARD_KEY_NUMPAD_EQUAL = 112,
    KEYBOARD_KEY_LSHIFT = 113, KEYBOARD_KEY_LCTRL = 114,
    KEYBOARD_KEY_LALT = 115, KEYBOARD_KEY_LSYSTEM = 116,
    KEYBOARD_KEY_RSHIFT = 117, KEYBOARD_KEY_RCTRL = 118,
    KEYBOARD_KEY_RALT = 119, KEYBOARD_KEY_RSYSTEM = 120,
    KEYBOARD_KEY_MENU = 121, KEYBOARD_KEY_NUMBER = 122
type
  enum_orxMOUSE_BUTTON_t* {.size: sizeof(cuint).} = enum
    MOUSE_BUTTON_NONE = -1, MOUSE_BUTTON_LEFT = 0, MOUSE_BUTTON_RIGHT = 1,
    MOUSE_BUTTON_MIDDLE = 2, MOUSE_BUTTON_EXTRA_1 = 3, MOUSE_BUTTON_EXTRA_2 = 4,
    MOUSE_BUTTON_EXTRA_3 = 5, MOUSE_BUTTON_EXTRA_4 = 6,
    MOUSE_BUTTON_EXTRA_5 = 7, MOUSE_BUTTON_WHEEL_UP = 8,
    MOUSE_BUTTON_WHEEL_DOWN = 9, MOUSE_BUTTON_NUMBER = 10
type
  enum_orxMOUSE_AXIS_t* {.size: sizeof(cuint).} = enum
    MOUSE_AXIS_NONE = -1, MOUSE_AXIS_X = 0, MOUSE_AXIS_Y = 1,
    MOUSE_AXIS_NUMBER = 2
type
  enum_orxINPUT_TYPE_t* {.size: sizeof(cuint).} = enum
    INPUT_TYPE_NONE = -1, INPUT_TYPE_KEYBOARD_KEY = 0,
    INPUT_TYPE_MOUSE_BUTTON = 1, INPUT_TYPE_MOUSE_AXIS = 2,
    INPUT_TYPE_JOYSTICK_BUTTON = 3, INPUT_TYPE_JOYSTICK_AXIS = 4,
    INPUT_TYPE_EXTERNAL = 5, INPUT_TYPE_NUMBER = 6
type
  enum_orxINPUT_MODE_t* {.size: sizeof(cuint).} = enum
    INPUT_MODE_NONE = -1, INPUT_MODE_FULL = 0, INPUT_MODE_POSITIVE = 1,
    INPUT_MODE_NEGATIVE = 2, INPUT_MODE_NUMBER = 3
type
  enum_orxINPUT_EVENT_t* {.size: sizeof(cuint).} = enum
    INPUT_EVENT_NONE = -1, INPUT_EVENT_ON = 0, INPUT_EVENT_OFF = 1,
    INPUT_EVENT_SELECT_SET = 2, INPUT_EVENT_REMOVE_SET = 3,
    INPUT_EVENT_NUMBER = 4
type
  enum_orxEVENT_TYPE_t* {.size: sizeof(cuint).} = enum
    EVENT_TYPE_NONE = -1, EVENT_TYPE_ANIM = 0, EVENT_TYPE_CLOCK = 1,
    EVENT_TYPE_CONFIG = 2, EVENT_TYPE_DISPLAY = 3, EVENT_TYPE_FX = 4,
    EVENT_TYPE_INPUT = 5, EVENT_TYPE_LOCALE = 6, EVENT_TYPE_OBJECT = 7,
    EVENT_TYPE_RENDER = 8, EVENT_TYPE_PHYSICS = 9, EVENT_TYPE_RESOURCE = 10,
    EVENT_TYPE_SHADER = 11, EVENT_TYPE_SOUND = 12, EVENT_TYPE_SPAWNER = 13,
    EVENT_TYPE_SYSTEM = 14, EVENT_TYPE_TEXTURE = 15, EVENT_TYPE_TIMELINE = 16,
    EVENT_TYPE_TRIGGER = 17, EVENT_TYPE_VIEWPORT = 18,
    EVENT_TYPE_CORE_NUMBER = 19, EVENT_TYPE_LAST_RESERVED = 255,
    EVENT_TYPE_USER_DEFINED = 256
const
  EVENT_TYPE_FIRST_RESERVED* = enum_orxEVENT_TYPE_t.EVENT_TYPE_CORE_NUMBER
type
  enum_orxLOCALE_EVENT_t* {.size: sizeof(cuint).} = enum
    LOCALE_EVENT_NONE = -1, LOCALE_EVENT_SELECT_LANGUAGE = 0,
    LOCALE_EVENT_SET_STRING = 1, LOCALE_EVENT_NUMBER = 2
type
  enum_orxRESOURCE_EVENT_t* {.size: sizeof(cuint).} = enum
    RESOURCE_EVENT_NONE = -1, RESOURCE_EVENT_UPDATE = 0, RESOURCE_EVENT_ADD = 1,
    RESOURCE_EVENT_REMOVE = 2, RESOURCE_EVENT_NUMBER = 3
type
  enum_orxSOUNDSYSTEM_STREAM_TYPE_t* {.size: sizeof(cuint).} = enum
    SOUNDSYSTEM_STREAM_TYPE_NONE = -1, SOUNDSYSTEM_STREAM_TYPE_EMPTY = 0,
    SOUNDSYSTEM_STREAM_TYPE_WHITE = 1, SOUNDSYSTEM_STREAM_TYPE_PINK = 2,
    SOUNDSYSTEM_STREAM_TYPE_BROWNIAN = 3, SOUNDSYSTEM_STREAM_TYPE_SINE = 4,
    SOUNDSYSTEM_STREAM_TYPE_SQUARE = 5, SOUNDSYSTEM_STREAM_TYPE_TRIANGLE = 6,
    SOUNDSYSTEM_STREAM_TYPE_SAWTOOTH = 7, SOUNDSYSTEM_STREAM_TYPE_RESOURCE = 8,
    SOUNDSYSTEM_STREAM_TYPE_NUMBER = 9
type
  enum_orxSOUNDSYSTEM_STATUS_t* {.size: sizeof(cuint).} = enum
    SOUNDSYSTEM_STATUS_NONE = -1, SOUNDSYSTEM_STATUS_PLAY = 0,
    SOUNDSYSTEM_STATUS_PAUSE = 1, SOUNDSYSTEM_STATUS_STOP = 2,
    SOUNDSYSTEM_STATUS_NUMBER = 3
type
  enum_orxSOUND_FILTER_TYPE_t* {.size: sizeof(cuint).} = enum
    SOUND_FILTER_TYPE_NONE = -1, SOUND_FILTER_TYPE_BIQUAD = 0,
    SOUND_FILTER_TYPE_LOW_PASS = 1, SOUND_FILTER_TYPE_HIGH_PASS = 2,
    SOUND_FILTER_TYPE_BAND_PASS = 3, SOUND_FILTER_TYPE_LOW_SHELF = 4,
    SOUND_FILTER_TYPE_HIGH_SHELF = 5, SOUND_FILTER_TYPE_NOTCH = 6,
    SOUND_FILTER_TYPE_PEAKING = 7, SOUND_FILTER_TYPE_DELAY = 8,
    SOUND_FILTER_TYPE_CUSTOM = 9, SOUND_FILTER_TYPE_NUMBER = 10
type
  enum_orxSOUND_STATUS_t* {.size: sizeof(cuint).} = enum
    SOUND_STATUS_NONE = -1, SOUND_STATUS_PLAY = 0, SOUND_STATUS_PAUSE = 1,
    SOUND_STATUS_STOP = 2, SOUND_STATUS_NUMBER = 3
type
  enum_orxSOUND_EVENT_t* {.size: sizeof(cuint).} = enum
    SOUND_EVENT_NONE = -1, SOUND_EVENT_START = 0, SOUND_EVENT_STOP = 1,
    SOUND_EVENT_ADD = 2, SOUND_EVENT_REMOVE = 3, SOUND_EVENT_PACKET = 4,
    SOUND_EVENT_RECORDING_START = 5, SOUND_EVENT_RECORDING_STOP = 6,
    SOUND_EVENT_RECORDING_PACKET = 7, SOUND_EVENT_SET_FILTER_PARAM = 8,
    SOUND_EVENT_NUMBER = 9
type
  enum_orxOBJECT_EVENT_t* {.size: sizeof(cuint).} = enum
    OBJECT_EVENT_NONE = -1, OBJECT_EVENT_CREATE = 0, OBJECT_EVENT_DELETE = 1,
    OBJECT_EVENT_PREPARE = 2, OBJECT_EVENT_ENABLE = 3, OBJECT_EVENT_DISABLE = 4,
    OBJECT_EVENT_PAUSE = 5, OBJECT_EVENT_UNPAUSE = 6, OBJECT_EVENT_NUMBER = 7
type
  enum_orxFX_TYPE_t* {.size: sizeof(cuint).} = enum
    FX_TYPE_NONE = -1, FX_TYPE_ALPHA = 0, FX_TYPE_RGB = 1, FX_TYPE_HSL = 2,
    FX_TYPE_HSV = 3, FX_TYPE_POSITION = 4, FX_TYPE_ROTATION = 5,
    FX_TYPE_SCALE = 6, FX_TYPE_SPEED = 7, FX_TYPE_VOLUME = 8, FX_TYPE_PITCH = 9,
    FX_TYPE_SIZE = 10, FX_TYPE_ORIGIN = 11, FX_TYPE_FLOAT_ADD = 12,
    FX_TYPE_FLOAT_MULTIPLY = 13, FX_TYPE_VECTOR_ADD = 14,
    FX_TYPE_VECTOR_MULTIPLY = 15, FX_TYPE_NUMBER = 16
const
  FX_TYPE_MAX_NUMBER* = enum_orxFX_TYPE_t.FX_TYPE_NUMBER
type
  enum_orxFX_CURVE_t* {.size: sizeof(cuint).} = enum
    FX_CURVE_NONE = -1, FX_CURVE_SINE = 0, FX_CURVE_SQUARE = 1,
    FX_CURVE_TRIANGLE = 2, FX_CURVE_SYMMETRIC_NUMBER = 3, FX_CURVE_LINEAR = 4,
    FX_CURVE_SMOOTH = 5, FX_CURVE_SMOOTHER = 6, FX_CURVE_EASE_IN_SINE = 7,
    FX_CURVE_EASE_OUT_SINE = 8, FX_CURVE_EASE_IN_OUT_SINE = 9,
    FX_CURVE_EASE_IN_QUAD = 10, FX_CURVE_EASE_OUT_QUAD = 11,
    FX_CURVE_EASE_IN_OUT_QUAD = 12, FX_CURVE_EASE_IN_CUBIC = 13,
    FX_CURVE_EASE_OUT_CUBIC = 14, FX_CURVE_EASE_IN_OUT_CUBIC = 15,
    FX_CURVE_EASE_IN_QUART = 16, FX_CURVE_EASE_OUT_QUART = 17,
    FX_CURVE_EASE_IN_OUT_QUART = 18, FX_CURVE_EASE_IN_QUINT = 19,
    FX_CURVE_EASE_OUT_QUINT = 20, FX_CURVE_EASE_IN_OUT_QUINT = 21,
    FX_CURVE_EASE_IN_EXPO = 22, FX_CURVE_EASE_OUT_EXPO = 23,
    FX_CURVE_EASE_IN_OUT_EXPO = 24, FX_CURVE_EASE_IN_CIRC = 25,
    FX_CURVE_EASE_OUT_CIRC = 26, FX_CURVE_EASE_IN_OUT_CIRC = 27,
    FX_CURVE_EASE_IN_BACK = 28, FX_CURVE_EASE_OUT_BACK = 29,
    FX_CURVE_EASE_IN_OUT_BACK = 30, FX_CURVE_EASE_IN_ELASTIC = 31,
    FX_CURVE_EASE_OUT_ELASTIC = 32, FX_CURVE_EASE_IN_OUT_ELASTIC = 33,
    FX_CURVE_EASE_IN_BOUNCE = 34, FX_CURVE_EASE_OUT_BOUNCE = 35,
    FX_CURVE_EASE_IN_OUT_BOUNCE = 36, FX_CURVE_NUMBER = 37
const
  FX_CURVE_BEZIER* = enum_orxFX_CURVE_t.FX_CURVE_SYMMETRIC_NUMBER
type
  enum_orxFX_EVENT_t* {.size: sizeof(cuint).} = enum
    FX_EVENT_NONE = -1, FX_EVENT_START = 0, FX_EVENT_STOP = 1, FX_EVENT_ADD = 2,
    FX_EVENT_REMOVE = 3, FX_EVENT_LOOP = 4, FX_EVENT_NUMBER = 5
type
  enum_orxFRAME_SPACE_t* {.size: sizeof(cuint).} = enum
    FRAME_SPACE_NONE = -1, FRAME_SPACE_GLOBAL = 0, FRAME_SPACE_LOCAL = 1,
    FRAME_SPACE_NUMBER = 2
type
  enum_orxSPAWNER_EVENT_t* {.size: sizeof(cuint).} = enum
    SPAWNER_EVENT_NONE = -1, SPAWNER_EVENT_SPAWN = 0, SPAWNER_EVENT_CREATE = 1,
    SPAWNER_EVENT_DELETE = 2, SPAWNER_EVENT_RESET = 3, SPAWNER_EVENT_EMPTY = 4,
    SPAWNER_EVENT_WAVE_START = 5, SPAWNER_EVENT_WAVE_STOP = 6,
    SPAWNER_EVENT_NUMBER = 7
type
  enum_orxTIMELINE_EVENT_t* {.size: sizeof(cuint).} = enum
    TIMELINE_EVENT_NONE = -1, TIMELINE_EVENT_TRACK_START = 0,
    TIMELINE_EVENT_TRACK_STOP = 1, TIMELINE_EVENT_TRACK_ADD = 2,
    TIMELINE_EVENT_TRACK_REMOVE = 3, TIMELINE_EVENT_LOOP = 4,
    TIMELINE_EVENT_TRIGGER = 5, TIMELINE_EVENT_NUMBER = 6
type
  enum_orxTRIGGER_EVENT_t* {.size: sizeof(cuint).} = enum
    TRIGGER_EVENT_NONE = -1, TRIGGER_EVENT_SET_ADD = 0,
    TRIGGER_EVENT_SET_REMOVE = 1, TRIGGER_EVENT_FIRE = 2,
    TRIGGER_EVENT_NUMBER = 3
type
  enum_orxPHYSICS_EVENT_t* {.size: sizeof(cuint).} = enum
    PHYSICS_EVENT_NONE = -1, PHYSICS_EVENT_CONTACT_ADD = 0,
    PHYSICS_EVENT_CONTACT_REMOVE = 1, PHYSICS_EVENT_NUMBER = 2
type
  enum_orxSHADER_PARAM_TYPE_t* {.size: sizeof(cuint).} = enum
    SHADER_PARAM_TYPE_NONE = -1, SHADER_PARAM_TYPE_FLOAT = 0,
    SHADER_PARAM_TYPE_TEXTURE = 1, SHADER_PARAM_TYPE_VECTOR = 2,
    SHADER_PARAM_TYPE_TIME = 3, SHADER_PARAM_TYPE_NUMBER = 4
type
  enum_orxSHADER_EVENT_t* {.size: sizeof(cuint).} = enum
    SHADER_EVENT_NONE = -1, SHADER_EVENT_SET_PARAM = 0, SHADER_EVENT_NUMBER = 1
type
  enum_orxVIEWPORT_EVENT_t* {.size: sizeof(cuint).} = enum
    VIEWPORT_EVENT_NONE = -1, VIEWPORT_EVENT_RESIZE = 0,
    VIEWPORT_EVENT_NUMBER = 1
type
  enum_orxRENDER_EVENT_t* {.size: sizeof(cuint).} = enum
    RENDER_EVENT_NONE = -1, RENDER_EVENT_START = 0, RENDER_EVENT_STOP = 1,
    RENDER_EVENT_VIEWPORT_START = 2, RENDER_EVENT_VIEWPORT_STOP = 3,
    RENDER_EVENT_OBJECT_START = 4, RENDER_EVENT_OBJECT_STOP = 5,
    RENDER_EVENT_CONSOLE_START = 6, RENDER_EVENT_CONSOLE_STOP = 7,
    RENDER_EVENT_PROFILER_START = 8, RENDER_EVENT_PROFILER_STOP = 9,
    RENDER_EVENT_NUMBER = 10
type
  struct_orxSOUND_t* = object
type
  struct_orxTIMELINE_t* = object
type
  struct_orxFILE_t* = object
type
  struct_orxFXPOINTER_t* = object
type
  struct_orxFONT_t* = object
type
  struct_orxSPAWNER_t* = object
type
  struct_orxSOUND_SAMPLE_t* = object
type
  struct_orxANIMPOINTER_t* = object
type
  struct_orxSHADERPOINTER_t* = object
type
  struct_orxSOUNDSYSTEM_SAMPLE_t* = object
type
  struct_orxSOUNDPOINTER_t* = object
type
  struct_orxGRAPHIC_t* = object
type
  struct_orxPHYSICS_BODY_PART_t* = object
type
  struct_orxANIMSET_LINK_TABLE_t* = object
type
  struct_orxHASHTABLE_t* = object
type
  struct_orxCAMERA_t* = object
type
  struct_orxSHADER_t* = object
type
  struct_orxANIM_t* = object
type
  struct_orxBITMAP_t* = object
type
  mainInit* = object
type
  struct_orxBANK_t* = object
type
  struct_orxTEXTURE_t* = object
type
  struct_orxOBJECT_t* = object
type
  inline* = object
type
  struct_orxVIEWPORT_t* = object
type
  struct_orxFRAME_t* = object
type
  struct_orxTHREAD_SEMAPHORE_t* = object
type
  struct_orxPHYSICS_BODY_t* = object
type
  struct_orxBODY_PART_t* = object
type
  struct_orxBODY_JOINT_t* = object
type
  struct_orxTEXT_t* = object
type
  struct_orxANIMSET_t* = object
type
  struct_orxCLOCK_t* = object
type
  struct_orxFX_t* = object
type
  struct_orxBODY_t* = object
type
  struct_orxSOUNDSYSTEM_SOUND_t* = object
type
  dev* = object
type
  struct_orxTRIGGER_t* = object
type
  struct_orxPHYSICS_BODY_JOINT_t* = object
type
  orxU64* = culonglong
  orxU32* = cuint
  orxU16* = cushort
  orxU8* = uint8
  orxS64* = clonglong
  orxS32* = cint
  orxS16* = cshort
  orxS8* = cschar
  orxBOOL* = cuint
  orxFLOAT* = cfloat
  orxDOUBLE* = cdouble
  orxCHAR* = cschar
  orxSTRINGID* = orxU64
  orxENUM* = orxU32
  orxHANDLE* = pointer
  orxSPTR* = orxS64
  orxUPTR* = orxU64
  orxSEEK_OFFSET_WHENCE* = enum_orxSEEK_OFFSET_WHENCE_t
  orxCOLORSPACE* = enum_orxCOLORSPACE_t
  orxSTATUS* = enum_orxSTATUS_t
  struct_orxVERSION_t* {.pure, inheritable, bycopy.} = object
    zRelease*: cstring
    u32Major*: orxU32
    u32Minor*: orxU32
    u32Build*: orxU32
  orxVERSION* = struct_orxVERSION_t
  orxMODULE_ID* = enum_orxMODULE_ID_t
  orxMODULE_INIT_FUNCTION* = proc (): orxSTATUS {.cdecl.}
  orxMODULE_EXIT_FUNCTION* = proc (): void {.cdecl.}
  orxMODULE_RUN_FUNCTION* = proc (): orxSTATUS {.cdecl.}
  orxMODULE_SETUP_FUNCTION* = proc (): void {.cdecl.}
  orxDEBUG_LEVEL* = enum_orxDEBUG_LEVEL_t
  orxDEBUG_CALLBACK_FUNCTION* = proc (a0: orxDEBUG_LEVEL; a1: cstring;
                                      a2: cstring; a3: orxU32; a4: cstring): orxSTATUS {.
      cdecl.}
  orxMEMORY_TYPE* = enum_orxMEMORY_TYPE_t
  ## Following 5 types replace the complicated nested union Futhark generates
  orxVECTOR* {.bycopy.} = tuple[fX: orxFLOAT, fY: orxFLOAT, fZ: orxFLOAT]
  orxSPVECTOR* {.bycopy.} = tuple[fRho: orxFLOAT, fTheta: orxFLOAT, fPhi: orxFLOAT]
  orxRGBVECTOR* {.bycopy.} = tuple[fR: orxFLOAT, fG: orxFLOAT, fB: orxFLOAT]
  orxHSLVECTOR* {.bycopy.} = tuple[fH: orxFLOAT, fS: orxFLOAT, fL: orxFLOAT]
  orxHSVVECTOR* {.bycopy.} = tuple[fH: orxFLOAT, fS: orxFLOAT, fV: orxFLOAT]
  orxSYSTEM_EVENT* = enum_orxSYSTEM_EVENT_t
  struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stTouch_t* {.pure, inheritable,
      bycopy.} = object
    dTime*: orxDOUBLE
    u32ID*: orxU32
    fX*: orxFLOAT
    fY*: orxFLOAT
    fPressure*: orxFLOAT
  struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stAccelerometer_t* {.pure,
      inheritable, bycopy.} = object
    dTime*: orxDOUBLE
    vAcceleration*: orxVECTOR
  struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stDrop_t* {.pure, inheritable, bycopy.} = object
    azValueList*: ptr cstring
    u32Number*: orxU32
  struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stClipboard_t* {.pure, inheritable,
      bycopy.} = object
    zValue*: cstring
  struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t* {.union, bycopy.} = object
    u32FrameCount*: orxU32
    stTouch*: struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stTouch_t
    stAccelerometer*: struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stAccelerometer_t
    stDrop*: struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stDrop_t
    stClipboard*: struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t_stClipboard_t
  struct_orxSYSTEM_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxSYSTEM_EVENT_PAYLOAD_t_anon0_t
  orxSYSTEM_EVENT_PAYLOAD* = struct_orxSYSTEM_EVENT_PAYLOAD_t
  orxCLOCK_MODIFIER* = enum_orxCLOCK_MODIFIER_t
  orxCLOCK_PRIORITY* = enum_orxCLOCK_PRIORITY_t
  struct_orxCLOCK_INFO_t* {.pure, inheritable, bycopy.} = object
    fTickSize*: orxFLOAT
    fDT*: orxFLOAT
    fTime*: orxFLOAT
    afModifierList*: array[4'i64, orxFLOAT]
  orxCLOCK_INFO* = struct_orxCLOCK_INFO_t
  orxCLOCK_EVENT* = enum_orxCLOCK_EVENT_t
  orxCLOCK* = struct_orxCLOCK_t
  orxCLOCK_FUNCTION* = proc (a0: ptr orxCLOCK_INFO; a1: pointer): void {.cdecl.}
  struct_orxLINKLIST_NODE_t* {.pure, inheritable, bycopy.} = object
    pstNext*: ptr struct_orxLINKLIST_NODE_t
    pstPrevious*: ptr struct_orxLINKLIST_NODE_t
    pstList*: ptr struct_orxLINKLIST_t
  struct_orxLINKLIST_t* {.pure, inheritable, bycopy.} = object
    pstFirst*: ptr orxLINKLIST_NODE
    pstLast*: ptr orxLINKLIST_NODE
    u32Count*: orxU32
  orxLINKLIST_NODE* = struct_orxLINKLIST_NODE_t
  orxLINKLIST* = struct_orxLINKLIST_t
  struct_orxTREE_NODE_t* {.pure, inheritable, bycopy.} = object
    pstParent*: ptr struct_orxTREE_NODE_t
    pstChild*: ptr struct_orxTREE_NODE_t
    pstSibling*: ptr struct_orxTREE_NODE_t
    pstPrevious*: ptr struct_orxTREE_NODE_t
    pstTree*: ptr struct_orxTREE_t
  struct_orxTREE_t* {.pure, inheritable, bycopy.} = object
    pstRoot*: ptr orxTREE_NODE
    u32Count*: orxU32
  orxTREE_NODE* = struct_orxTREE_NODE_t
  orxTREE* = struct_orxTREE_t
  orxSTRUCTURE_ID* = enum_orxSTRUCTURE_ID_t
  orxSTRUCTURE_STORAGE_TYPE* = enum_orxSTRUCTURE_STORAGE_TYPE_t
  struct_orxSTRUCTURE_t_stStorage_t* {.union, bycopy.} = object
    stLinkListNode*: orxLINKLIST_NODE
    stTreeNode*: orxTREE_NODE
  struct_orxSTRUCTURE_t* {.pure, inheritable, bycopy.} = object
    u64GUID*: orxU64
    u64OwnerGUID*: orxU64
    u32Flags*: orxU32
    u32RefCount*: orxU32
    stStorage*: struct_orxSTRUCTURE_t_stStorage_t
  orxSTRUCTURE* = struct_orxSTRUCTURE_t
  orxSTRUCTURE_UPDATE_FUNCTION* = proc (a0: ptr orxSTRUCTURE;
                                        a1: ptr orxSTRUCTURE;
                                        a2: ptr orxCLOCK_INFO): orxSTATUS {.
      cdecl.}
  orxANIM* = struct_orxANIM_t
  orxANIM_EVENT* = enum_orxANIM_EVENT_t
  struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stLoop_t* {.pure, inheritable, bycopy.} = object
    u32Count*: orxU32
  struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stCut_t* {.pure, inheritable, bycopy.} = object
    fTime*: orxFLOAT
  struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stCustom_t* {.pure, inheritable, bycopy.} = object
    zName*: cstring
    fValue*: orxFLOAT
    fTime*: orxFLOAT
  struct_orxANIM_EVENT_PAYLOAD_t_anon0_t* {.union, bycopy.} = object
    stLoop*: struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stLoop_t
    stCut*: struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stCut_t
    stCustom*: struct_orxANIM_EVENT_PAYLOAD_t_anon0_t_stCustom_t
  struct_orxANIM_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstAnim*: ptr orxANIM
    zAnimName*: cstring
    anon0*: struct_orxANIM_EVENT_PAYLOAD_t_anon0_t
  orxANIM_EVENT_PAYLOAD* = struct_orxANIM_EVENT_PAYLOAD_t
  struct_orxANIM_CUSTOM_EVENT_t* {.pure, inheritable, bycopy.} = object
    zName*: cstring
    fValue*: orxFLOAT
    fTimeStamp*: orxFLOAT
  orxANIM_CUSTOM_EVENT* = struct_orxANIM_CUSTOM_EVENT_t
  orxANIMSET* = struct_orxANIMSET_t
  orxANIMSET_LINK_TABLE* = struct_orxANIMSET_LINK_TABLE_t
  orxANIMPOINTER* = struct_orxANIMPOINTER_t
  orxCOMMAND_VAR_TYPE* = enum_orxCOMMAND_VAR_TYPE_t
  struct_orxCOMMAND_VAR_DEF_t* {.pure, inheritable, bycopy.} = object
    zName*: cstring
    eType*: orxCOMMAND_VAR_TYPE
  orxCOMMAND_VAR_DEF* = struct_orxCOMMAND_VAR_DEF_t
  struct_orxCOMMAND_VAR_t_anon0_t* {.union, bycopy.} = object
    vValue*: orxVECTOR
    zValue*: cstring
    u32Value*: orxU32
    s32Value*: orxS32
    u64Value*: orxU64
    s64Value*: orxS64
    fValue*: orxFLOAT
    bValue*: orxBOOL
  struct_orxCOMMAND_VAR_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxCOMMAND_VAR_t_anon0_t
    eType*: orxCOMMAND_VAR_TYPE
  orxCOMMAND_VAR* = struct_orxCOMMAND_VAR_t
  orxCOMMAND_FUNCTION* = proc (a0: orxU32; a1: ptr orxCOMMAND_VAR;
                               a2: ptr orxCOMMAND_VAR): void {.cdecl.}
  orxCONFIG_EVENT* = enum_orxCONFIG_EVENT_t
  orxCONFIG_SAVE_FUNCTION* = proc (a0: cstring; a1: cstring; a2: cstring;
                                   a3: orxBOOL): orxBOOL {.cdecl.}
  orxCONFIG_CLEAR_FUNCTION* = proc (a0: cstring; a1: cstring): orxBOOL {.cdecl.}
  orxCONFIG_BOOTSTRAP_FUNCTION* = proc (): orxSTATUS {.cdecl.}
  orxPLUGIN_FUNCTION_ID* = enum_orxPLUGIN_FUNCTION_ID_t
  orxPLUGIN_FUNCTION* = proc (): orxSTATUS {.cdecl.}
  orxPLUGIN_CORE_ID* = enum_orxPLUGIN_CORE_ID_t
  orxPLUGIN_FUNCTION_BASE_ID_DISPLAY* = enum_orxPLUGIN_FUNCTION_BASE_ID_DISPLAY_t
  orxPLUGIN_FUNCTION_BASE_ID_JOYSTICK* = enum_orxPLUGIN_FUNCTION_BASE_ID_JOYSTICK_t
  orxPLUGIN_FUNCTION_BASE_ID_KEYBOARD* = enum_orxPLUGIN_FUNCTION_BASE_ID_KEYBOARD_t
  orxPLUGIN_FUNCTION_BASE_ID_MOUSE* = enum_orxPLUGIN_FUNCTION_BASE_ID_MOUSE_t
  orxPLUGIN_FUNCTION_BASE_ID_PHYSICS* = enum_orxPLUGIN_FUNCTION_BASE_ID_PHYSICS_t
  orxPLUGIN_FUNCTION_BASE_ID_RENDER* = enum_orxPLUGIN_FUNCTION_BASE_ID_RENDER_t
  orxPLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM* = enum_orxPLUGIN_FUNCTION_BASE_ID_SOUNDSYSTEM_t
  struct_orxPLUGIN_CORE_FUNCTION_t* {.pure, inheritable, bycopy.} = object
    eFunctionID*: orxPLUGIN_FUNCTION_ID
    pfnFunction*: orxPLUGIN_FUNCTION
    pfnDefaultFunction*: orxPLUGIN_FUNCTION
  orxPLUGIN_CORE_FUNCTION* = struct_orxPLUGIN_CORE_FUNCTION_t
  struct_orxPLUGIN_USER_FUNCTION_INFO_t* {.pure, inheritable, bycopy.} = object
    eFunctionID*: orxPLUGIN_FUNCTION_ID
    pfnFunction*: orxPLUGIN_FUNCTION
    zFunctionArgs*: array[128'i64, orxCHAR]
    zFunctionName*: cstring
  orxPLUGIN_USER_FUNCTION_INFO* = struct_orxPLUGIN_USER_FUNCTION_INFO_t
  orxPLUGIN_INIT_FUNCTION* = proc (a0: ptr orxU32;
                                   a1: ptr ptr orxPLUGIN_USER_FUNCTION_INFO): orxSTATUS {.
      cdecl.}
  struct_orxOBOX_t* {.pure, inheritable, bycopy.} = object
    vPosition*: orxVECTOR
    vPivot*: orxVECTOR
    vX*: orxVECTOR
    vY*: orxVECTOR
    vZ*: orxVECTOR
  orxOBOX* = struct_orxOBOX_t
  orxBANK* = struct_orxBANK_t
  orxHASHTABLE* = struct_orxHASHTABLE_t
  struct_orxRGBA_t_anon0_t_anon0_t* {.pure, inheritable, bycopy.} = object
    u8R*: orxU8
    u8G*: orxU8
    u8B*: orxU8
    u8A*: orxU8
  struct_orxRGBA_t_anon0_t* {.union, bycopy.} = object
    anon0*: struct_orxRGBA_t_anon0_t_anon0_t
    u32RGBA*: orxU32
  struct_orxRGBA_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxRGBA_t_anon0_t
  orxRGBA* = struct_orxRGBA_t
  orxBITMAP* = struct_orxBITMAP_t
  struct_orxDISPLAY_VERTEX_t* {.pure, inheritable, bycopy.} = object
    fX*: orxFLOAT
    fY*: orxFLOAT
    fU*: orxFLOAT
    fV*: orxFLOAT
    stRGBA*: orxRGBA
  orxDISPLAY_VERTEX* = struct_orxDISPLAY_VERTEX_t
  struct_orxDISPLAY_TRANSFORM_t* {.pure, inheritable, bycopy.} = object
    fSrcX*: orxFLOAT
    fSrcY*: orxFLOAT
    fDstX*: orxFLOAT
    fDstY*: orxFLOAT
    fRepeatX*: orxFLOAT
    fRepeatY*: orxFLOAT
    fScaleX*: orxFLOAT
    fScaleY*: orxFLOAT
    fRotation*: orxFLOAT
  orxDISPLAY_TRANSFORM* = struct_orxDISPLAY_TRANSFORM_t
  orxDISPLAY_PRIMITIVE* = enum_orxDISPLAY_PRIMITIVE_t
  struct_orxDISPLAY_MESH_t* {.pure, inheritable, bycopy.} = object
    astVertexList*: ptr orxDISPLAY_VERTEX
    au16IndexList*: ptr orxU16
    u32VertexNumber*: orxU32
    u32IndexNumber*: orxU32
    ePrimitive*: orxDISPLAY_PRIMITIVE
  orxDISPLAY_MESH* = struct_orxDISPLAY_MESH_t
  struct_orxDISPLAY_VIDEO_MODE_t* {.pure, inheritable, bycopy.} = object
    u32Width*: orxU32
    u32Height*: orxU32
    u32Depth*: orxU32
    u32RefreshRate*: orxU32
    bFullScreen*: orxBOOL
  orxDISPLAY_VIDEO_MODE* = struct_orxDISPLAY_VIDEO_MODE_t
  struct_orxCHARACTER_GLYPH_t* {.pure, inheritable, bycopy.} = object
    fX*: orxFLOAT
    fY*: orxFLOAT
    fWidth*: orxFLOAT
  orxCHARACTER_GLYPH* = struct_orxCHARACTER_GLYPH_t
  struct_orxCHARACTER_MAP_t* {.pure, inheritable, bycopy.} = object
    fCharacterHeight*: orxFLOAT
    pstCharacterBank*: ptr orxBANK
    pstCharacterTable*: ptr orxHASHTABLE
  orxCHARACTER_MAP* = struct_orxCHARACTER_MAP_t
  orxDISPLAY_SMOOTHING* = enum_orxDISPLAY_SMOOTHING_t
  orxDISPLAY_BLEND_MODE* = enum_orxDISPLAY_BLEND_MODE_t
  struct_orxCOLOR_t_anon0_t* {.union, bycopy.} = object
    vRGB*: orxVECTOR
    vHSL*: orxVECTOR
    vHSV*: orxVECTOR
  struct_orxCOLOR_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxCOLOR_t_anon0_t
    fAlpha*: orxFLOAT
  orxCOLOR* = struct_orxCOLOR_t
  orxDISPLAY_EVENT* = enum_orxDISPLAY_EVENT_t
  struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t_stVideoMode_t* {.pure, inheritable,
      bycopy.} = object
    u32Width*: orxU32
    u32Height*: orxU32
    u32Depth*: orxU32
    u32RefreshRate*: orxU32
    u32PreviousWidth*: orxU32
    u32PreviousHeight*: orxU32
    u32PreviousDepth*: orxU32
    u32PreviousRefreshRate*: orxU32
    bFullScreen*: orxBOOL
  struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t_stBitmap_t* {.pure, inheritable,
      bycopy.} = object
    zLocation*: cstring
    stFilenameID*: orxSTRINGID
    u32ID*: orxU32
  struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t* {.union, bycopy.} = object
    stVideoMode*: struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t_stVideoMode_t
    stBitmap*: struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t_stBitmap_t
  struct_orxDISPLAY_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxDISPLAY_EVENT_PAYLOAD_t_anon0_t
  orxDISPLAY_EVENT_PAYLOAD* = struct_orxDISPLAY_EVENT_PAYLOAD_t
  orxTEXTURE_EVENT* = enum_orxTEXTURE_EVENT_t
  orxTEXTURE* = struct_orxTEXTURE_t
  orxFONT* = struct_orxFONT_t
  orxJOYSTICK_BUTTON* = enum_orxJOYSTICK_BUTTON_t
  orxJOYSTICK_AXIS* = enum_orxJOYSTICK_AXIS_t
  orxKEYBOARD_KEY* = enum_orxKEYBOARD_KEY_t
  orxMOUSE_BUTTON* = enum_orxMOUSE_BUTTON_t
  orxMOUSE_AXIS* = enum_orxMOUSE_AXIS_t
  orxINPUT_TYPE* = enum_orxINPUT_TYPE_t
  orxINPUT_MODE* = enum_orxINPUT_MODE_t
  orxINPUT_EVENT* = enum_orxINPUT_EVENT_t
  struct_orxINPUT_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    zSetName*: cstring
    zInputName*: cstring
    aeType*: array[16'i64, orxINPUT_TYPE]
    aeID*: array[16'i64, orxENUM]
    aeMode*: array[16'i64, orxINPUT_MODE]
    afValue*: array[16'i64, orxFLOAT]
  orxINPUT_EVENT_PAYLOAD* = struct_orxINPUT_EVENT_PAYLOAD_t
  orxEVENT_TYPE* = enum_orxEVENT_TYPE_t
  struct_orxEVENT_t* {.pure, inheritable, bycopy.} = object
    eType*: orxEVENT_TYPE
    eID*: orxENUM
    hSender*: orxHANDLE
    hRecipient*: orxHANDLE
    pstPayload*: pointer
    pContext*: pointer
  orxEVENT* = struct_orxEVENT_t
  orxEVENT_HANDLER* = proc (a0: ptr orxEVENT): orxSTATUS {.cdecl.}
  orxLOCALE_EVENT* = enum_orxLOCALE_EVENT_t
  struct_orxLOCALE_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    zLanguage*: cstring
    zGroup*: cstring
    zStringKey*: cstring
    zStringValue*: cstring
  orxLOCALE_EVENT_PAYLOAD* = struct_orxLOCALE_EVENT_PAYLOAD_t
  orxRESOURCE_OP_FUNCTION* = proc (a0: orxHANDLE; a1: orxS64; a2: pointer;
                                   a3: pointer): void {.cdecl.}
  orxRESOURCE_FUNCTION_LOCATE* = proc (a0: cstring; a1: cstring; a2: cstring;
                                       a3: orxBOOL): cstring {.cdecl.}
  orxRESOURCE_FUNCTION_GET_TIME* = proc (a0: cstring): orxS64 {.cdecl.}
  orxRESOURCE_FUNCTION_OPEN* = proc (a0: cstring; a1: orxBOOL): orxHANDLE {.
      cdecl.}
  orxRESOURCE_FUNCTION_CLOSE* = proc (a0: orxHANDLE): void {.cdecl.}
  orxRESOURCE_FUNCTION_GET_SIZE* = proc (a0: orxHANDLE): orxS64 {.cdecl.}
  orxRESOURCE_FUNCTION_SEEK* = proc (a0: orxHANDLE; a1: orxS64;
                                     a2: orxSEEK_OFFSET_WHENCE): orxS64 {.cdecl.}
  orxRESOURCE_FUNCTION_TELL* = proc (a0: orxHANDLE): orxS64 {.cdecl.}
  orxRESOURCE_FUNCTION_READ* = proc (a0: orxHANDLE; a1: orxS64; a2: pointer): orxS64 {.
      cdecl.}
  orxRESOURCE_FUNCTION_WRITE* = proc (a0: orxHANDLE; a1: orxS64; a2: pointer): orxS64 {.
      cdecl.}
  orxRESOURCE_FUNCTION_DELETE* = proc (a0: cstring): orxSTATUS {.cdecl.}
  struct_orxRESOURCE_TYPE_INFO_t* {.pure, inheritable, bycopy.} = object
    zTag*: cstring
    pfnLocate*: orxRESOURCE_FUNCTION_LOCATE
    pfnGetTime*: orxRESOURCE_FUNCTION_GET_TIME
    pfnOpen*: orxRESOURCE_FUNCTION_OPEN
    pfnClose*: orxRESOURCE_FUNCTION_CLOSE
    pfnGetSize*: orxRESOURCE_FUNCTION_GET_SIZE
    pfnSeek*: orxRESOURCE_FUNCTION_SEEK
    pfnTell*: orxRESOURCE_FUNCTION_TELL
    pfnRead*: orxRESOURCE_FUNCTION_READ
    pfnWrite*: orxRESOURCE_FUNCTION_WRITE
    pfnDelete*: orxRESOURCE_FUNCTION_DELETE
  orxRESOURCE_TYPE_INFO* = struct_orxRESOURCE_TYPE_INFO_t
  orxRESOURCE_EVENT* = enum_orxRESOURCE_EVENT_t
  struct_orxRESOURCE_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    s64Time*: orxS64
    zLocation*: cstring
    pstTypeInfo*: ptr orxRESOURCE_TYPE_INFO
    stGroupID*: orxSTRINGID
    stStorageID*: orxSTRINGID
    stNameID*: orxSTRINGID
  orxRESOURCE_EVENT_PAYLOAD* = struct_orxRESOURCE_EVENT_PAYLOAD_t
  orxTHREAD_SEMAPHORE* = struct_orxTHREAD_SEMAPHORE_t
  orxTHREAD_FUNCTION* = proc (a0: pointer): orxSTATUS {.cdecl.}
  struct_orxAABOX_t* {.pure, inheritable, bycopy.} = object
    vTL*: orxVECTOR
    vBR*: orxVECTOR
  orxAABOX* = struct_orxAABOX_t
  orxGRAPHIC* = struct_orxGRAPHIC_t
  orxTEXT* = struct_orxTEXT_t
  struct_orxFILE_INFO_t* {.pure, inheritable, bycopy.} = object
    s64Size*: orxS64
    s64TimeStamp*: orxS64
    u32Flags*: orxU32
    hInternal*: orxHANDLE
    zName*: array[256'i64, orxCHAR]
    zPattern*: array[256'i64, orxCHAR]
    zPath*: array[1024'i64, orxCHAR]
    zFullName*: array[1280'i64, orxCHAR]
  orxFILE_INFO* = struct_orxFILE_INFO_t
  orxFILE* = struct_orxFILE_t
  orxPARAM_INIT_FUNCTION* = proc (a0: orxU32; a1: ptr UncheckedArray[cstring]): orxSTATUS {.
      cdecl.}
  struct_orxPARAM_t* {.pure, inheritable, bycopy.} = object
    u32Flags*: orxU32
    zShortName*: cstring
    zLongName*: cstring
    zShortDesc*: cstring
    zLongDesc*: cstring
    pfnParser*: orxPARAM_INIT_FUNCTION
  orxPARAM* = struct_orxPARAM_t
  orxSOUNDSYSTEM_SOUND* = struct_orxSOUNDSYSTEM_SOUND_t
  orxSOUNDSYSTEM_SAMPLE* = struct_orxSOUNDSYSTEM_SAMPLE_t
  orxSOUNDSYSTEM_STREAM_TYPE* = enum_orxSOUNDSYSTEM_STREAM_TYPE_t
  orxSOUNDSYSTEM_STATUS* = enum_orxSOUNDSYSTEM_STATUS_t
  orxSOUND_FILTER_TYPE* = enum_orxSOUND_FILTER_TYPE_t
  orxSOUND_FILTER_FUNCTION* = proc (a0: ptr orxFLOAT; a1: ptr orxFLOAT;
                                    a2: orxU32; a3: orxU32; a4: orxU32;
                                    a5: orxSTRINGID; a6: pointer): void {.cdecl.}
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stBiquad_t* {.pure, inheritable, bycopy.} = object
    fA0*: orxFLOAT
    fA1*: orxFLOAT
    fA2*: orxFLOAT
    fB0*: orxFLOAT
    fB1*: orxFLOAT
    fB2*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stLowPass_t* {.pure, inheritable, bycopy.} = object
    fFrequency*: orxFLOAT
    u32Order*: orxU32
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stHighPass_t* {.pure, inheritable,
      bycopy.} = object
    fFrequency*: orxFLOAT
    u32Order*: orxU32
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stBandPass_t* {.pure, inheritable,
      bycopy.} = object
    fFrequency*: orxFLOAT
    u32Order*: orxU32
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stLowShelf_t* {.pure, inheritable,
      bycopy.} = object
    fFrequency*: orxFLOAT
    fQ*: orxFLOAT
    fGain*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stHighShelf_t* {.pure, inheritable,
      bycopy.} = object
    fFrequency*: orxFLOAT
    fQ*: orxFLOAT
    fGain*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stNotch_t* {.pure, inheritable, bycopy.} = object
    fFrequency*: orxFLOAT
    fQ*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stPeaking_t* {.pure, inheritable, bycopy.} = object
    fFrequency*: orxFLOAT
    fQ*: orxFLOAT
    fGain*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stDelay_t* {.pure, inheritable, bycopy.} = object
    fDelay*: orxFLOAT
    fDecay*: orxFLOAT
  struct_orxSOUND_FILTER_DATA_t_anon0_t_stCustom_t* {.pure, inheritable, bycopy.} = object
    pfnCallback*: orxSOUND_FILTER_FUNCTION
    pContext*: pointer
  struct_orxSOUND_FILTER_DATA_t_anon0_t* {.union, bycopy.} = object
    stBiquad*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stBiquad_t
    stLowPass*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stLowPass_t
    stHighPass*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stHighPass_t
    stBandPass*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stBandPass_t
    stLowShelf*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stLowShelf_t
    stHighShelf*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stHighShelf_t
    stNotch*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stNotch_t
    stPeaking*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stPeaking_t
    stDelay*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stDelay_t
    stCustom*: struct_orxSOUND_FILTER_DATA_t_anon0_t_stCustom_t
  struct_orxSOUND_FILTER_DATA_t* {.pure, inheritable, bycopy.} = object
    eType*: orxSOUND_FILTER_TYPE
    stNameID*: orxSTRINGID
    anon0*: struct_orxSOUND_FILTER_DATA_t_anon0_t
  orxSOUND_FILTER_DATA* = struct_orxSOUND_FILTER_DATA_t
  orxSOUND_STATUS* = enum_orxSOUND_STATUS_t
  orxSOUND* = struct_orxSOUND_t
  orxSOUND_SAMPLE* = struct_orxSOUND_SAMPLE_t
  orxSOUND_EVENT* = enum_orxSOUND_EVENT_t
  struct_orxSOUND_STREAM_INFO_t* {.pure, inheritable, bycopy.} = object
    zName*: cstring
    u32SampleRate*: orxU32
    u32ChannelNumber*: orxU32
  orxSOUND_STREAM_INFO* = struct_orxSOUND_STREAM_INFO_t
  struct_orxSOUND_STREAM_PACKET_t* {.pure, inheritable, bycopy.} = object
    afSampleList*: ptr orxFLOAT
    u32SampleNumber*: orxU32
    fTimeStamp*: orxFLOAT
    fTime*: orxFLOAT
    s32ID*: orxS32
    bDiscard*: orxBOOL
    bLast*: orxBOOL
  orxSOUND_STREAM_PACKET* = struct_orxSOUND_STREAM_PACKET_t
  struct_orxSOUND_EVENT_PAYLOAD_t_stStream_t* {.pure, inheritable, bycopy.} = object
    stInfo*: orxSOUND_STREAM_INFO
    stPacket*: orxSOUND_STREAM_PACKET
  struct_orxSOUND_EVENT_PAYLOAD_t_stFilter_t* {.pure, inheritable, bycopy.} = object
    stData*: orxSOUND_FILTER_DATA
    stBusID*: orxSTRINGID
  struct_orxSOUND_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstSound*: ptr orxSOUND
    stStream*: struct_orxSOUND_EVENT_PAYLOAD_t_stStream_t
    stFilter*: struct_orxSOUND_EVENT_PAYLOAD_t_stFilter_t
  orxSOUND_EVENT_PAYLOAD* = struct_orxSOUND_EVENT_PAYLOAD_t
  orxOBJECT_EVENT* = enum_orxOBJECT_EVENT_t
  orxOBJECT* = struct_orxOBJECT_t
  orxFX_TYPE* = enum_orxFX_TYPE_t
  orxFX_CURVE* = enum_orxFX_CURVE_t
  struct_orxFX_CURVE_PARAM_t_anon0_t_anon0_t* {.pure, inheritable, bycopy.} = object
    fStartValue*: orxFLOAT
    fEndValue*: orxFLOAT
  struct_orxFX_CURVE_PARAM_t_anon0_t_anon1_t* {.pure, inheritable, bycopy.} = object
    vStartValue*: orxVECTOR
    vEndValue*: orxVECTOR
  struct_orxFX_CURVE_PARAM_t_anon0_t* {.union, bycopy.} = object
    anon0*: struct_orxFX_CURVE_PARAM_t_anon0_t_anon0_t
    anon1*: struct_orxFX_CURVE_PARAM_t_anon0_t_anon1_t
  struct_orxFX_CURVE_PARAM_t* {.pure, inheritable, bycopy.} = object
    anon0*: struct_orxFX_CURVE_PARAM_t_anon0_t
    vCurvePoint1*: orxVECTOR
    vCurvePoint2*: orxVECTOR
    fStartTime*: orxFLOAT
    fEndTime*: orxFLOAT
    fPeriod*: orxFLOAT
    fPhase*: orxFLOAT
    fAmplification*: orxFLOAT
    fAcceleration*: orxFLOAT
    fPow*: orxFLOAT
  orxFX_CURVE_PARAM* = struct_orxFX_CURVE_PARAM_t
  orxFX* = struct_orxFX_t
  orxFX_EVENT* = enum_orxFX_EVENT_t
  struct_orxFX_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstFX*: ptr orxFX
    zFXName*: cstring
  orxFX_EVENT_PAYLOAD* = struct_orxFX_EVENT_PAYLOAD_t
  orxFXPOINTER* = struct_orxFXPOINTER_t
  orxFRAME_SPACE* = enum_orxFRAME_SPACE_t
  orxFRAME* = struct_orxFRAME_t
  orxSPAWNER_EVENT* = enum_orxSPAWNER_EVENT_t
  orxSPAWNER* = struct_orxSPAWNER_t
  orxTIMELINE* = struct_orxTIMELINE_t
  orxTIMELINE_EVENT* = enum_orxTIMELINE_EVENT_t
  struct_orxTIMELINE_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstTimeLine*: ptr orxTIMELINE
    zTrackName*: cstring
    zEvent*: cstring
    fTimeStamp*: orxFLOAT
  orxTIMELINE_EVENT_PAYLOAD* = struct_orxTIMELINE_EVENT_PAYLOAD_t
  orxTRIGGER* = struct_orxTRIGGER_t
  orxTRIGGER_EVENT* = enum_orxTRIGGER_EVENT_t
  struct_orxTRIGGER_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstTrigger*: ptr orxTRIGGER
    zSetName*: cstring
    zEvent*: cstring
  orxTRIGGER_EVENT_PAYLOAD* = struct_orxTRIGGER_EVENT_PAYLOAD_t
  struct_orxBODY_DEF_t* {.pure, inheritable, bycopy.} = object
    vPosition*: orxVECTOR
    fRotation*: orxFLOAT
    fInertia*: orxFLOAT
    fMass*: orxFLOAT
    fLinearDamping*: orxFLOAT
    fAngularDamping*: orxFLOAT
    u32Flags*: orxU32
  orxBODY_DEF* = struct_orxBODY_DEF_t
  struct_orxBODY_PART_DEF_t_anon0_t_stSphere_t* {.pure, inheritable, bycopy.} = object
    vCenter*: orxVECTOR
    fRadius*: orxFLOAT
  struct_orxBODY_PART_DEF_t_anon0_t_stAABox_t* {.pure, inheritable, bycopy.} = object
    stBox*: orxAABOX
  struct_orxBODY_PART_DEF_t_anon0_t_stMesh_t* {.pure, inheritable, bycopy.} = object
    u32VertexCount*: orxU32
    avVertices*: array[8'i64, orxVECTOR]
  struct_orxBODY_PART_DEF_t_anon0_t_stEdge_t* {.pure, inheritable, bycopy.} = object
    avVertices*: array[2'i64, orxVECTOR]
    vPrevious*: orxVECTOR
    vNext*: orxVECTOR
    bHasPrevious*: orxBOOL
    bHasNext*: orxBOOL
  struct_orxBODY_PART_DEF_t_anon0_t_stChain_t* {.pure, inheritable, bycopy.} = object
    vPrevious*: orxVECTOR
    vNext*: orxVECTOR
    avVertices*: ptr orxVECTOR
    u32VertexCount*: orxU32
    bIsLoop*: orxBOOL
    bHasPrevious*: orxBOOL
    bHasNext*: orxBOOL
  struct_orxBODY_PART_DEF_t_anon0_t* {.union, bycopy.} = object
    stSphere*: struct_orxBODY_PART_DEF_t_anon0_t_stSphere_t
    stAABox*: struct_orxBODY_PART_DEF_t_anon0_t_stAABox_t
    stMesh*: struct_orxBODY_PART_DEF_t_anon0_t_stMesh_t
    stEdge*: struct_orxBODY_PART_DEF_t_anon0_t_stEdge_t
    stChain*: struct_orxBODY_PART_DEF_t_anon0_t_stChain_t
  struct_orxBODY_PART_DEF_t* {.pure, inheritable, bycopy.} = object
    vScale*: orxVECTOR
    fFriction*: orxFLOAT
    fRestitution*: orxFLOAT
    fDensity*: orxFLOAT
    u16SelfFlags*: orxU16
    u16CheckMask*: orxU16
    u32Flags*: orxU32
    anon0*: struct_orxBODY_PART_DEF_t_anon0_t
  orxBODY_PART_DEF* = struct_orxBODY_PART_DEF_t
  struct_orxBODY_JOINT_DEF_t_anon0_t_stRevolute_t* {.pure, inheritable, bycopy.} = object
    fDefaultRotation*: orxFLOAT
    fMinRotation*: orxFLOAT
    fMaxRotation*: orxFLOAT
    fMotorSpeed*: orxFLOAT
    fMaxMotorTorque*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stPrismatic_t* {.pure, inheritable, bycopy.} = object
    vTranslationAxis*: orxVECTOR
    fDefaultRotation*: orxFLOAT
    fMinTranslation*: orxFLOAT
    fMaxTranslation*: orxFLOAT
    fMotorSpeed*: orxFLOAT
    fMaxMotorForce*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stSpring_t* {.pure, inheritable, bycopy.} = object
    fLength*: orxFLOAT
    fFrequency*: orxFLOAT
    fDamping*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stRope_t* {.pure, inheritable, bycopy.} = object
    fLength*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stPulley_t* {.pure, inheritable, bycopy.} = object
    vSrcGroundAnchor*: orxVECTOR
    vDstGroundAnchor*: orxVECTOR
    fLengthRatio*: orxFLOAT
    fSrcLength*: orxFLOAT
    fMaxSrcLength*: orxFLOAT
    fDstLength*: orxFLOAT
    fMaxDstLength*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stSuspension_t* {.pure, inheritable, bycopy.} = object
    vTranslationAxis*: orxVECTOR
    fFrequency*: orxFLOAT
    fDamping*: orxFLOAT
    fMotorSpeed*: orxFLOAT
    fMaxMotorForce*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stWeld_t* {.pure, inheritable, bycopy.} = object
    fDefaultRotation*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stFriction_t* {.pure, inheritable, bycopy.} = object
    fMaxForce*: orxFLOAT
    fMaxTorque*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t_stGear_t* {.pure, inheritable, bycopy.} = object
    zSrcJointName*: cstring
    zDstJointName*: cstring
    fJointRatio*: orxFLOAT
  struct_orxBODY_JOINT_DEF_t_anon0_t* {.union, bycopy.} = object
    stRevolute*: struct_orxBODY_JOINT_DEF_t_anon0_t_stRevolute_t
    stPrismatic*: struct_orxBODY_JOINT_DEF_t_anon0_t_stPrismatic_t
    stSpring*: struct_orxBODY_JOINT_DEF_t_anon0_t_stSpring_t
    stRope*: struct_orxBODY_JOINT_DEF_t_anon0_t_stRope_t
    stPulley*: struct_orxBODY_JOINT_DEF_t_anon0_t_stPulley_t
    stSuspension*: struct_orxBODY_JOINT_DEF_t_anon0_t_stSuspension_t
    stWeld*: struct_orxBODY_JOINT_DEF_t_anon0_t_stWeld_t
    stFriction*: struct_orxBODY_JOINT_DEF_t_anon0_t_stFriction_t
    stGear*: struct_orxBODY_JOINT_DEF_t_anon0_t_stGear_t
  struct_orxBODY_JOINT_DEF_t* {.pure, inheritable, bycopy.} = object
    vSrcScale*: orxVECTOR
    vDstScale*: orxVECTOR
    vSrcAnchor*: orxVECTOR
    vDstAnchor*: orxVECTOR
    anon0*: struct_orxBODY_JOINT_DEF_t_anon0_t
    u32Flags*: orxU32
  orxBODY_JOINT_DEF* = struct_orxBODY_JOINT_DEF_t
  orxPHYSICS_EVENT* = enum_orxPHYSICS_EVENT_t
  struct_orxPHYSICS_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    vPosition*: orxVECTOR
    vNormal*: orxVECTOR
    pstSenderPart*: ptr struct_orxBODY_PART_t
    pstRecipientPart*: ptr struct_orxBODY_PART_t
  orxPHYSICS_EVENT_PAYLOAD* = struct_orxPHYSICS_EVENT_PAYLOAD_t
  orxPHYSICS_BODY* = struct_orxPHYSICS_BODY_t
  orxPHYSICS_BODY_PART* = struct_orxPHYSICS_BODY_PART_t
  orxPHYSICS_BODY_JOINT* = struct_orxPHYSICS_BODY_JOINT_t
  orxBODY* = struct_orxBODY_t
  orxBODY_PART* = struct_orxBODY_PART_t
  orxBODY_JOINT* = struct_orxBODY_JOINT_t
  orxCAMERA* = struct_orxCAMERA_t
  orxSHADER_PARAM_TYPE* = enum_orxSHADER_PARAM_TYPE_t
  struct_orxSHADER_PARAM_t* {.pure, inheritable, bycopy.} = object
    stNode*: orxLINKLIST_NODE
    zName*: cstring
    eType*: orxSHADER_PARAM_TYPE
    u32ArraySize*: orxU32
  orxSHADER_PARAM* = struct_orxSHADER_PARAM_t
  orxSHADER* = struct_orxSHADER_t
  orxSHADER_EVENT* = enum_orxSHADER_EVENT_t
  struct_orxSHADER_EVENT_PAYLOAD_t_anon0_t* {.union, bycopy.} = object
    fValue*: orxFLOAT
    pstValue*: ptr orxTEXTURE
    vValue*: orxVECTOR
  struct_orxSHADER_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    pstShader*: ptr orxSHADER
    zShaderName*: cstring
    zParamName*: cstring
    eParamType*: orxSHADER_PARAM_TYPE
    s32ParamIndex*: orxS32
    anon0*: struct_orxSHADER_EVENT_PAYLOAD_t_anon0_t
  orxSHADER_EVENT_PAYLOAD* = struct_orxSHADER_EVENT_PAYLOAD_t
  orxSHADERPOINTER* = struct_orxSHADERPOINTER_t
  orxVIEWPORT* = struct_orxVIEWPORT_t
  orxVIEWPORT_EVENT* = enum_orxVIEWPORT_EVENT_t
  orxRENDER_EVENT* = enum_orxRENDER_EVENT_t
  struct_orxRENDER_EVENT_PAYLOAD_t_stObject_t* {.pure, inheritable, bycopy.} = object
    pstTransform*: ptr orxDISPLAY_TRANSFORM
  struct_orxRENDER_EVENT_PAYLOAD_t* {.pure, inheritable, bycopy.} = object
    stObject*: struct_orxRENDER_EVENT_PAYLOAD_t_stObject_t
  orxRENDER_EVENT_PAYLOAD* = struct_orxRENDER_EVENT_PAYLOAD_t
  orxSOUNDPOINTER* = struct_orxSOUNDPOINTER_t
when inline is typedesc:
  type
    INLINE* = inline
else:
  when inline is static:
    const
      INLINE* = inline
  else:
    let INLINE* = inline
when 0 is static:
  const
    NULL* = 0
else:
  let NULL* = 0
when "\\x1b[0m" is static:
  const
    ANSI_KZ_COLOR_RESET* = "\\x1b[0m"
else:
  let ANSI_KZ_COLOR_RESET* = "\\x1b[0m"
when "\\x1b[1m" is static:
  const
    ANSI_KZ_COLOR_BOLD_ON* = "\\x1b[1m"
else:
  let ANSI_KZ_COLOR_BOLD_ON* = "\\x1b[1m"
when "\\x1b[3m" is static:
  const
    ANSI_KZ_COLOR_ITALICS_ON* = "\\x1b[3m"
else:
  let ANSI_KZ_COLOR_ITALICS_ON* = "\\x1b[3m"
when "\\x1b[4m" is static:
  const
    ANSI_KZ_COLOR_UNDERLINE_ON* = "\\x1b[4m"
else:
  let ANSI_KZ_COLOR_UNDERLINE_ON* = "\\x1b[4m"
when "\\x1b[5m" is static:
  const
    ANSI_KZ_COLOR_BLINK_ON* = "\\x1b[5m"
else:
  let ANSI_KZ_COLOR_BLINK_ON* = "\\x1b[5m"
when "\\x1b[7m" is static:
  const
    ANSI_KZ_COLOR_INVERSE_ON* = "\\x1b[7m"
else:
  let ANSI_KZ_COLOR_INVERSE_ON* = "\\x1b[7m"
when "\\x1b[9m" is static:
  const
    ANSI_KZ_COLOR_STRIKETHROUGH_ON* = "\\x1b[9m"
else:
  let ANSI_KZ_COLOR_STRIKETHROUGH_ON* = "\\x1b[9m"
when "\\x1b[22m" is static:
  const
    ANSI_KZ_COLOR_BOLD_OFF* = "\\x1b[22m"
else:
  let ANSI_KZ_COLOR_BOLD_OFF* = "\\x1b[22m"
when "\\x1b[23m" is static:
  const
    ANSI_KZ_COLOR_ITALICS_OFF* = "\\x1b[23m"
else:
  let ANSI_KZ_COLOR_ITALICS_OFF* = "\\x1b[23m"
when "\\x1b[24m" is static:
  const
    ANSI_KZ_COLOR_UNDERLINE_OFF* = "\\x1b[24m"
else:
  let ANSI_KZ_COLOR_UNDERLINE_OFF* = "\\x1b[24m"
when "\\x1b[25m" is static:
  const
    ANSI_KZ_COLOR_BLINK_OFF* = "\\x1b[25m"
else:
  let ANSI_KZ_COLOR_BLINK_OFF* = "\\x1b[25m"
when "\\x1b[27m" is static:
  const
    ANSI_KZ_COLOR_INVERSE_OFF* = "\\x1b[27m"
else:
  let ANSI_KZ_COLOR_INVERSE_OFF* = "\\x1b[27m"
when "\\x1b[29m" is static:
  const
    ANSI_KZ_COLOR_STRIKETHROUGH_OFF* = "\\x1b[29m"
else:
  let ANSI_KZ_COLOR_STRIKETHROUGH_OFF* = "\\x1b[29m"
when "\\x1b[30m" is static:
  const
    ANSI_KZ_COLOR_FG_BLACK* = "\\x1b[30m"
else:
  let ANSI_KZ_COLOR_FG_BLACK* = "\\x1b[30m"
when "\\x1b[31m" is static:
  const
    ANSI_KZ_COLOR_FG_RED* = "\\x1b[31m"
else:
  let ANSI_KZ_COLOR_FG_RED* = "\\x1b[31m"
when "\\x1b[32m" is static:
  const
    ANSI_KZ_COLOR_FG_GREEN* = "\\x1b[32m"
else:
  let ANSI_KZ_COLOR_FG_GREEN* = "\\x1b[32m"
when "\\x1b[33m" is static:
  const
    ANSI_KZ_COLOR_FG_YELLOW* = "\\x1b[33m"
else:
  let ANSI_KZ_COLOR_FG_YELLOW* = "\\x1b[33m"
when "\\x1b[34m" is static:
  const
    ANSI_KZ_COLOR_FG_BLUE* = "\\x1b[34m"
else:
  let ANSI_KZ_COLOR_FG_BLUE* = "\\x1b[34m"
when "\\x1b[35m" is static:
  const
    ANSI_KZ_COLOR_FG_MAGENTA* = "\\x1b[35m"
else:
  let ANSI_KZ_COLOR_FG_MAGENTA* = "\\x1b[35m"
when "\\x1b[36m" is static:
  const
    ANSI_KZ_COLOR_FG_CYAN* = "\\x1b[36m"
else:
  let ANSI_KZ_COLOR_FG_CYAN* = "\\x1b[36m"
when "\\x1b[37m" is static:
  const
    ANSI_KZ_COLOR_FG_WHITE* = "\\x1b[37m"
else:
  let ANSI_KZ_COLOR_FG_WHITE* = "\\x1b[37m"
when "\\x1b[39m" is static:
  const
    ANSI_KZ_COLOR_FG_DEFAULT* = "\\x1b[39m"
else:
  let ANSI_KZ_COLOR_FG_DEFAULT* = "\\x1b[39m"
when "\\x1b[40m" is static:
  const
    ANSI_KZ_COLOR_BG_BLACK* = "\\x1b[40m"
else:
  let ANSI_KZ_COLOR_BG_BLACK* = "\\x1b[40m"
when "\\x1b[41m" is static:
  const
    ANSI_KZ_COLOR_BG_RED* = "\\x1b[41m"
else:
  let ANSI_KZ_COLOR_BG_RED* = "\\x1b[41m"
when "\\x1b[42m" is static:
  const
    ANSI_KZ_COLOR_BG_GREEN* = "\\x1b[42m"
else:
  let ANSI_KZ_COLOR_BG_GREEN* = "\\x1b[42m"
when "\\x1b[43m" is static:
  const
    ANSI_KZ_COLOR_BG_YELLOW* = "\\x1b[43m"
else:
  let ANSI_KZ_COLOR_BG_YELLOW* = "\\x1b[43m"
when "\\x1b[44m" is static:
  const
    ANSI_KZ_COLOR_BG_BLUE* = "\\x1b[44m"
else:
  let ANSI_KZ_COLOR_BG_BLUE* = "\\x1b[44m"
when "\\x1b[45m" is static:
  const
    ANSI_KZ_COLOR_BG_MAGENTA* = "\\x1b[45m"
else:
  let ANSI_KZ_COLOR_BG_MAGENTA* = "\\x1b[45m"
when "\\x1b[46m" is static:
  const
    ANSI_KZ_COLOR_BG_CYAN* = "\\x1b[46m"
else:
  let ANSI_KZ_COLOR_BG_CYAN* = "\\x1b[46m"
when "\\x1b[47m" is static:
  const
    ANSI_KZ_COLOR_BG_WHITE* = "\\x1b[47m"
else:
  let ANSI_KZ_COLOR_BG_WHITE* = "\\x1b[47m"
when "\\x1b[49m" is static:
  const
    ANSI_KZ_COLOR_BG_DEFAULT* = "\\x1b[49m"
else:
  let ANSI_KZ_COLOR_BG_DEFAULT* = "\\x1b[49m"
when 4294967295 is static:
  const
    ENUM_NONE* = 4294967295'i64
else:
  let ENUM_NONE* = 4294967295'i64
when 128 is static:
  const
    CHAR_ASCII_NUMBER* = 128
else:
  let CHAR_ASCII_NUMBER* = 128
when 1 is static:
  const
    compiler_orxVERSION_MAJOR_private* = 1
else:
  let compiler_orxVERSION_MAJOR_private* = 1
when 15 is static:
  const
    compiler_orxVERSION_MINOR_private* = 15
else:
  let compiler_orxVERSION_MINOR_private* = 15
when dev is typedesc:
  type
    compiler_orxVERSION_RELEASE_private* = dev
else:
  when dev is static:
    const
      compiler_orxVERSION_RELEASE_private* = dev
  else:
    let compiler_orxVERSION_RELEASE_private* = dev
when 0 is static:
  const
    compiler_orxVERSION_BUILD_private* = 0
else:
  let compiler_orxVERSION_BUILD_private* = 0
when 4278190080 is static:
  const
    compiler_orxVERSION_MASK_MAJOR_private* = 4278190080'i64
else:
  let compiler_orxVERSION_MASK_MAJOR_private* = 4278190080'i64
when 24 is static:
  const
    compiler_orxVERSION_SHIFT_MAJOR_private* = 24
else:
  let compiler_orxVERSION_SHIFT_MAJOR_private* = 24
when 16711680 is static:
  const
    compiler_orxVERSION_MASK_MINOR_private* = 16711680
else:
  let compiler_orxVERSION_MASK_MINOR_private* = 16711680
when 16 is static:
  const
    compiler_orxVERSION_SHIFT_MINOR_private* = 16
else:
  let compiler_orxVERSION_SHIFT_MINOR_private* = 16
when 65535 is static:
  const
    compiler_orxVERSION_MASK_BUILD_private* = 65535
else:
  let compiler_orxVERSION_MASK_BUILD_private* = 65535
when 0 is static:
  const
    compiler_orxVERSION_SHIFT_BUILD_private* = 0
else:
  let compiler_orxVERSION_SHIFT_BUILD_private* = 0
when 0 is static:
  const
    DEBUG_KU32_STATIC_FLAG_NONE* = 0
else:
  let DEBUG_KU32_STATIC_FLAG_NONE* = 0
when 1 is static:
  const
    DEBUG_KU32_STATIC_FLAG_TIMESTAMP* = 1
else:
  let DEBUG_KU32_STATIC_FLAG_TIMESTAMP* = 1
when 2 is static:
  const
    DEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP* = 2
else:
  let DEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP* = 2
when 4 is static:
  const
    DEBUG_KU32_STATIC_FLAG_TYPE* = 4
else:
  let DEBUG_KU32_STATIC_FLAG_TYPE* = 4
when 8 is static:
  const
    DEBUG_KU32_STATIC_FLAG_TAGGED* = 8
else:
  let DEBUG_KU32_STATIC_FLAG_TAGGED* = 8
when 16 is static:
  const
    DEBUG_KU32_STATIC_FLAG_FILE* = 16
else:
  let DEBUG_KU32_STATIC_FLAG_FILE* = 16
when 32 is static:
  const
    DEBUG_KU32_STATIC_FLAG_TERMINAL* = 32
else:
  let DEBUG_KU32_STATIC_FLAG_TERMINAL* = 32
when 64 is static:
  const
    DEBUG_KU32_STATIC_FLAG_CONSOLE* = 64
else:
  let DEBUG_KU32_STATIC_FLAG_CONSOLE* = 64
when 128 is static:
  const
    DEBUG_KU32_STATIC_FLAG_CALLBACK* = 128
else:
  let DEBUG_KU32_STATIC_FLAG_CALLBACK* = 128
when 245 is static:
  const
    DEBUG_KU32_STATIC_MASK_DEFAULT* = 245
else:
  let DEBUG_KU32_STATIC_MASK_DEFAULT* = 245
when 189 is static:
  const
    DEBUG_KU32_STATIC_MASK_DEBUG* = 189
else:
  let DEBUG_KU32_STATIC_MASK_DEBUG* = 189
when 268435455 is static:
  const
    DEBUG_KU32_STATIC_MASK_USER_ALL* = 268435455
else:
  let DEBUG_KU32_STATIC_MASK_USER_ALL* = 268435455
when "orx-debug.log" is static:
  const
    DEBUG_KZ_DEFAULT_DEBUG_FILE* = "orx-debug.log"
else:
  let DEBUG_KZ_DEFAULT_DEBUG_FILE* = "orx-debug.log"
when "orx.log" is static:
  const
    DEBUG_KZ_DEFAULT_LOG_FILE* = "orx.log"
else:
  let DEBUG_KZ_DEFAULT_LOG_FILE* = "orx.log"
when ".log" is static:
  const
    DEBUG_KZ_DEFAULT_LOG_SUFFIX* = ".log"
else:
  let DEBUG_KZ_DEFAULT_LOG_SUFFIX* = ".log"
when "-debug.log" is static:
  const
    DEBUG_KZ_DEFAULT_DEBUG_SUFFIX* = "-debug.log"
else:
  let DEBUG_KZ_DEFAULT_DEBUG_SUFFIX* = "-debug.log"
when 2048 is static:
  const
    DEBUG_KS32_BUFFER_OUTPUT_SIZE* = 2048
else:
  let DEBUG_KS32_BUFFER_OUTPUT_SIZE* = 2048
proc hash*(internal_zString: cstring): orxSTRINGID {.cdecl,
    importc: "orxString_Hash".}
when 16 is static:
  const
    CLOCK_KU32_CLOCK_BANK_SIZE* = 16
else:
  let CLOCK_KU32_CLOCK_BANK_SIZE* = 16
when 32 is static:
  const
    CLOCK_KU32_TIMER_BANK_SIZE* = 32
else:
  let CLOCK_KU32_TIMER_BANK_SIZE* = 32
when 16 is static:
  const
    CLOCK_KU32_FUNCTION_BANK_SIZE* = 16
else:
  let CLOCK_KU32_FUNCTION_BANK_SIZE* = 16
when "Frequency" is static:
  const
    CLOCK_KZ_CONFIG_FREQUENCY* = "Frequency"
else:
  let CLOCK_KZ_CONFIG_FREQUENCY* = "Frequency"
when "ModifierList" is static:
  const
    CLOCK_KZ_CONFIG_MODIFIER_LIST* = "ModifierList"
else:
  let CLOCK_KZ_CONFIG_MODIFIER_LIST* = "ModifierList"
when "core" is static:
  const
    CLOCK_KZ_CORE* = "core"
else:
  let CLOCK_KZ_CORE* = "core"
when cast[culonglong](-2379362056627437346'i64) is static:
  const
    STRUCTURE_GUID_MAGIC_TAG_DELETED* = cast[culonglong](-2379362056627437346'i64)
else:
  let STRUCTURE_GUID_MAGIC_TAG_DELETED* = cast[culonglong](-2379362056627437346'i64)
when cast[culonglong](255'i64) is static:
  const
    STRUCTURE_GUID_MASK_STRUCTURE_ID* = cast[culonglong](255'i64)
else:
  let STRUCTURE_GUID_MASK_STRUCTURE_ID* = cast[culonglong](255'i64)
when 0 is static:
  const
    STRUCTURE_GUID_SHIFT_STRUCTURE_ID* = 0
else:
  let STRUCTURE_GUID_SHIFT_STRUCTURE_ID* = 0
when cast[culonglong](4294967040'i64) is static:
  const
    STRUCTURE_GUID_MASK_ITEM_ID* = cast[culonglong](4294967040'i64)
else:
  let STRUCTURE_GUID_MASK_ITEM_ID* = cast[culonglong](4294967040'i64)
when 8 is static:
  const
    STRUCTURE_GUID_SHIFT_ITEM_ID* = 8
else:
  let STRUCTURE_GUID_SHIFT_ITEM_ID* = 8
when cast[culonglong](-4294967296'i64) is static:
  const
    STRUCTURE_GUID_MASK_INSTANCE_ID* = cast[culonglong](-4294967296'i64)
else:
  let STRUCTURE_GUID_MASK_INSTANCE_ID* = cast[culonglong](-4294967296'i64)
when 32 is static:
  const
    STRUCTURE_GUID_SHIFT_INSTANCE_ID* = 32
else:
  let STRUCTURE_GUID_SHIFT_INSTANCE_ID* = 32
when 0 is static:
  const
    ANIM_KU32_FLAG_NONE* = 0
else:
  let ANIM_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    ANIM_KU32_FLAG_2D* = 1
else:
  let ANIM_KU32_FLAG_2D* = 1
when 15 is static:
  const
    ANIM_KU32_MASK_USER_ALL* = 15
else:
  let ANIM_KU32_MASK_USER_ALL* = 15
when 4294967295 is static:
  const
    ANIM_KU32_MASK_ALL* = 4294967295'i64
else:
  let ANIM_KU32_MASK_ALL* = 4294967295'i64
when 65535 is static:
  const
    ANIM_KU32_KEY_MAX_NUMBER* = 65535
else:
  let ANIM_KU32_KEY_MAX_NUMBER* = 65535
when 65535 is static:
  const
    ANIM_KU32_EVENT_MAX_NUMBER* = 65535
else:
  let ANIM_KU32_EVENT_MAX_NUMBER* = 65535
when 0 is static:
  const
    ANIMSET_KU32_FLAG_NONE* = 0
else:
  let ANIMSET_KU32_FLAG_NONE* = 0
when 1048576 is static:
  const
    ANIMSET_KU32_FLAG_REFERENCE_LOCK* = 1048576
else:
  let ANIMSET_KU32_FLAG_REFERENCE_LOCK* = 1048576
when 2097152 is static:
  const
    ANIMSET_KU32_FLAG_LINK_STATIC* = 2097152
else:
  let ANIMSET_KU32_FLAG_LINK_STATIC* = 2097152
when 0 is static:
  const
    ANIMSET_KU32_LINK_FLAG_NONE* = 0
else:
  let ANIMSET_KU32_LINK_FLAG_NONE* = 0
when 268435456 is static:
  const
    ANIMSET_KU32_LINK_FLAG_LOOP_COUNT* = 268435456
else:
  let ANIMSET_KU32_LINK_FLAG_LOOP_COUNT* = 268435456
when 536870912 is static:
  const
    ANIMSET_KU32_LINK_FLAG_PRIORITY* = 536870912
else:
  let ANIMSET_KU32_LINK_FLAG_PRIORITY* = 536870912
when 1073741824 is static:
  const
    ANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT* = 1073741824
else:
  let ANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT* = 1073741824
when 2147483648 is static:
  const
    ANIMSET_KU32_LINK_FLAG_CLEAR_TARGET* = 2147483648'i64
else:
  let ANIMSET_KU32_LINK_FLAG_CLEAR_TARGET* = 2147483648'i64
when 128 is static:
  const
    ANIMSET_KU32_MAX_ANIM_NUMBER* = 128
else:
  let ANIMSET_KU32_MAX_ANIM_NUMBER* = 128
when "Config" is static:
  const
    CONFIG_KZ_RESOURCE_GROUP* = "Config"
else:
  let CONFIG_KZ_RESOURCE_GROUP* = "Config"
when 268435456 is static:
  const
    PLUGIN_KU32_FLAG_CORE_ID* = 268435456
else:
  let PLUGIN_KU32_FLAG_CORE_ID* = 268435456
when 65280 is static:
  const
    PLUGIN_KU32_MASK_PLUGIN_ID* = 65280
else:
  let PLUGIN_KU32_MASK_PLUGIN_ID* = 65280
when 8 is static:
  const
    PLUGIN_KU32_SHIFT_PLUGIN_ID* = 8
else:
  let PLUGIN_KU32_SHIFT_PLUGIN_ID* = 8
when 255 is static:
  const
    PLUGIN_KU32_MASK_FUNCTION_ID* = 255
else:
  let PLUGIN_KU32_MASK_FUNCTION_ID* = 255
when 128 is static:
  const
    PLUGIN_KU32_FUNCTION_ARG_SIZE* = 128
else:
  let PLUGIN_KU32_FUNCTION_ARG_SIZE* = 128
when 0 is static:
  const
    BANK_KU32_FLAG_NONE* = 0
else:
  let BANK_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    BANK_KU32_FLAG_NOT_EXPANDABLE* = 1
else:
  let BANK_KU32_FLAG_NOT_EXPANDABLE* = 1
when 0 is static:
  const
    HASHTABLE_KU32_FLAG_NONE* = 0
else:
  let HASHTABLE_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    HASHTABLE_KU32_FLAG_NOT_EXPANDABLE* = 1
else:
  let HASHTABLE_KU32_FLAG_NOT_EXPANDABLE* = 1
when "Display" is static:
  const
    DISPLAY_KZ_CONFIG_SECTION* = "Display"
else:
  let DISPLAY_KZ_CONFIG_SECTION* = "Display"
when "ScreenWidth" is static:
  const
    DISPLAY_KZ_CONFIG_WIDTH* = "ScreenWidth"
else:
  let DISPLAY_KZ_CONFIG_WIDTH* = "ScreenWidth"
when "ScreenHeight" is static:
  const
    DISPLAY_KZ_CONFIG_HEIGHT* = "ScreenHeight"
else:
  let DISPLAY_KZ_CONFIG_HEIGHT* = "ScreenHeight"
when "ScreenDepth" is static:
  const
    DISPLAY_KZ_CONFIG_DEPTH* = "ScreenDepth"
else:
  let DISPLAY_KZ_CONFIG_DEPTH* = "ScreenDepth"
when "ScreenPosition" is static:
  const
    DISPLAY_KZ_CONFIG_POSITION* = "ScreenPosition"
else:
  let DISPLAY_KZ_CONFIG_POSITION* = "ScreenPosition"
when "RefreshRate" is static:
  const
    DISPLAY_KZ_CONFIG_REFRESH_RATE* = "RefreshRate"
else:
  let DISPLAY_KZ_CONFIG_REFRESH_RATE* = "RefreshRate"
when "FullScreen" is static:
  const
    DISPLAY_KZ_CONFIG_FULLSCREEN* = "FullScreen"
else:
  let DISPLAY_KZ_CONFIG_FULLSCREEN* = "FullScreen"
when "AllowResize" is static:
  const
    DISPLAY_KZ_CONFIG_ALLOW_RESIZE* = "AllowResize"
else:
  let DISPLAY_KZ_CONFIG_ALLOW_RESIZE* = "AllowResize"
when "Decoration" is static:
  const
    DISPLAY_KZ_CONFIG_DECORATION* = "Decoration"
else:
  let DISPLAY_KZ_CONFIG_DECORATION* = "Decoration"
when "Title" is static:
  const
    DISPLAY_KZ_CONFIG_TITLE* = "Title"
else:
  let DISPLAY_KZ_CONFIG_TITLE* = "Title"
when "Smoothing" is static:
  const
    DISPLAY_KZ_CONFIG_SMOOTH* = "Smoothing"
else:
  let DISPLAY_KZ_CONFIG_SMOOTH* = "Smoothing"
when "VSync" is static:
  const
    DISPLAY_KZ_CONFIG_VSYNC* = "VSync"
else:
  let DISPLAY_KZ_CONFIG_VSYNC* = "VSync"
when "DepthBuffer" is static:
  const
    DISPLAY_KZ_CONFIG_DEPTHBUFFER* = "DepthBuffer"
else:
  let DISPLAY_KZ_CONFIG_DEPTHBUFFER* = "DepthBuffer"
when "ShaderVersion" is static:
  const
    DISPLAY_KZ_CONFIG_SHADER_VERSION* = "ShaderVersion"
else:
  let DISPLAY_KZ_CONFIG_SHADER_VERSION* = "ShaderVersion"
when "ShaderExtensionList" is static:
  const
    DISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST* = "ShaderExtensionList"
else:
  let DISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST* = "ShaderExtensionList"
when "Monitor" is static:
  const
    DISPLAY_KZ_CONFIG_MONITOR* = "Monitor"
else:
  let DISPLAY_KZ_CONFIG_MONITOR* = "Monitor"
when "Cursor" is static:
  const
    DISPLAY_KZ_CONFIG_CURSOR* = "Cursor"
else:
  let DISPLAY_KZ_CONFIG_CURSOR* = "Cursor"
when "IconList" is static:
  const
    DISPLAY_KZ_CONFIG_ICON_LIST* = "IconList"
else:
  let DISPLAY_KZ_CONFIG_ICON_LIST* = "IconList"
when "FramebufferSize" is static:
  const
    DISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE* = "FramebufferSize"
else:
  let DISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE* = "FramebufferSize"
when "ContentScale" is static:
  const
    DISPLAY_KZ_CONFIG_CONTENT_SCALE* = "ContentScale"
else:
  let DISPLAY_KZ_CONFIG_CONTENT_SCALE* = "ContentScale"
when "TextureUnitNumber" is static:
  const
    DISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER* = "TextureUnitNumber"
else:
  let DISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER* = "TextureUnitNumber"
when "DrawBufferNumber" is static:
  const
    DISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER* = "DrawBufferNumber"
else:
  let DISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER* = "DrawBufferNumber"
when "MaxTextureSize" is static:
  const
    DISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE* = "MaxTextureSize"
else:
  let DISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE* = "MaxTextureSize"
when "DebugOutput" is static:
  const
    DISPLAY_KZ_CONFIG_DEBUG_OUTPUT* = "DebugOutput"
else:
  let DISPLAY_KZ_CONFIG_DEBUG_OUTPUT* = "DebugOutput"
when "Color" is static:
  const
    COLOR_KZ_CONFIG_SECTION* = "Color"
else:
  let COLOR_KZ_CONFIG_SECTION* = "Color"
when "_top" is static:
  const
    DISPLAY_KZ_SHADER_SUFFIX_TOP* = "_top"
else:
  let DISPLAY_KZ_SHADER_SUFFIX_TOP* = "_top"
when "_left" is static:
  const
    DISPLAY_KZ_SHADER_SUFFIX_LEFT* = "_left"
else:
  let DISPLAY_KZ_SHADER_SUFFIX_LEFT* = "_left"
when "_bottom" is static:
  const
    DISPLAY_KZ_SHADER_SUFFIX_BOTTOM* = "_bottom"
else:
  let DISPLAY_KZ_SHADER_SUFFIX_BOTTOM* = "_bottom"
when "_right" is static:
  const
    DISPLAY_KZ_SHADER_SUFFIX_RIGHT* = "_right"
else:
  let DISPLAY_KZ_SHADER_SUFFIX_RIGHT* = "_right"
when "Texture" is static:
  const
    TEXTURE_KZ_RESOURCE_GROUP* = "Texture"
else:
  let TEXTURE_KZ_RESOURCE_GROUP* = "Texture"
when "Texture" is static:
  const
    TEXTURE_KZ_LOCALE_GROUP* = "Texture"
else:
  let TEXTURE_KZ_LOCALE_GROUP* = "Texture"
when "screen" is static:
  const
    TEXTURE_KZ_SCREEN* = "screen"
else:
  let TEXTURE_KZ_SCREEN* = "screen"
when "pixel" is static:
  const
    TEXTURE_KZ_PIXEL* = "pixel"
else:
  let TEXTURE_KZ_PIXEL* = "pixel"
when "transparent" is static:
  const
    TEXTURE_KZ_TRANSPARENT* = "transparent"
else:
  let TEXTURE_KZ_TRANSPARENT* = "transparent"
when "orx:texture:logo" is static:
  const
    TEXTURE_KZ_LOGO_NAME* = "orx:texture:logo"
else:
  let TEXTURE_KZ_LOGO_NAME* = "orx:texture:logo"
when "orx:font:default" is static:
  const
    FONT_KZ_DEFAULT_FONT_NAME* = "orx:font:default"
else:
  let FONT_KZ_DEFAULT_FONT_NAME* = "orx:font:default"
when 1 is static:
  const
    JOYSTICK_KU32_MIN_ID* = 1
else:
  let JOYSTICK_KU32_MIN_ID* = 1
when "Mouse" is static:
  const
    MOUSE_KZ_CONFIG_SECTION* = "Mouse"
else:
  let MOUSE_KZ_CONFIG_SECTION* = "Mouse"
when "ShowCursor" is static:
  const
    MOUSE_KZ_CONFIG_SHOW_CURSOR* = "ShowCursor"
else:
  let MOUSE_KZ_CONFIG_SHOW_CURSOR* = "ShowCursor"
when "Grab" is static:
  const
    MOUSE_KZ_CONFIG_GRAB* = "Grab"
else:
  let MOUSE_KZ_CONFIG_GRAB* = "Grab"
when "Input" is static:
  const
    INPUT_KZ_CONFIG_SECTION* = "Input"
else:
  let INPUT_KZ_CONFIG_SECTION* = "Input"
when "DefaultThreshold" is static:
  const
    INPUT_KZ_CONFIG_DEFAULT_THRESHOLD* = "DefaultThreshold"
else:
  let INPUT_KZ_CONFIG_DEFAULT_THRESHOLD* = "DefaultThreshold"
when "DefaultMultiplier" is static:
  const
    INPUT_KZ_CONFIG_DEFAULT_MULTIPLIER* = "DefaultMultiplier"
else:
  let INPUT_KZ_CONFIG_DEFAULT_MULTIPLIER* = "DefaultMultiplier"
when "CombineList" is static:
  const
    INPUT_KZ_CONFIG_COMBINE_LIST* = "CombineList"
else:
  let INPUT_KZ_CONFIG_COMBINE_LIST* = "CombineList"
when "JoyIDList" is static:
  const
    INPUT_KZ_CONFIG_JOYSTICK_ID_LIST* = "JoyIDList"
else:
  let INPUT_KZ_CONFIG_JOYSTICK_ID_LIST* = "JoyIDList"
when 16 is static:
  const
    INPUT_KU32_BINDING_NUMBER* = 16
else:
  let INPUT_KU32_BINDING_NUMBER* = 16
when "-=" is static:
  const
    INPUT_KZ_INTERNAL_SET_PREFIX* = "-="
else:
  let INPUT_KZ_INTERNAL_SET_PREFIX* = "-="
when 0 is static:
  const
    INPUT_KU32_FLAG_TYPE_NONE* = 0
else:
  let INPUT_KU32_FLAG_TYPE_NONE* = 0
when 65535 is static:
  const
    INPUT_KU32_MASK_TYPE_ALL* = 65535
else:
  let INPUT_KU32_MASK_TYPE_ALL* = 65535
when "orx:input:console" is static:
  const
    CONSOLE_KZ_INPUT_SET* = "orx:input:console"
else:
  let CONSOLE_KZ_INPUT_SET* = "orx:input:console"
when "Toggle" is static:
  const
    CONSOLE_KZ_INPUT_TOGGLE* = "Toggle"
else:
  let CONSOLE_KZ_INPUT_TOGGLE* = "Toggle"
when "AutoComplete" is static:
  const
    CONSOLE_KZ_INPUT_AUTOCOMPLETE* = "AutoComplete"
else:
  let CONSOLE_KZ_INPUT_AUTOCOMPLETE* = "AutoComplete"
when "Delete" is static:
  const
    CONSOLE_KZ_INPUT_DELETE* = "Delete"
else:
  let CONSOLE_KZ_INPUT_DELETE* = "Delete"
when "DeleteAfter" is static:
  const
    CONSOLE_KZ_INPUT_DELETE_AFTER* = "DeleteAfter"
else:
  let CONSOLE_KZ_INPUT_DELETE_AFTER* = "DeleteAfter"
when "ToggleMode" is static:
  const
    CONSOLE_KZ_INPUT_TOGGLE_MODE* = "ToggleMode"
else:
  let CONSOLE_KZ_INPUT_TOGGLE_MODE* = "ToggleMode"
when "Enter" is static:
  const
    CONSOLE_KZ_INPUT_ENTER* = "Enter"
else:
  let CONSOLE_KZ_INPUT_ENTER* = "Enter"
when "Previous" is static:
  const
    CONSOLE_KZ_INPUT_PREVIOUS* = "Previous"
else:
  let CONSOLE_KZ_INPUT_PREVIOUS* = "Previous"
when "Next" is static:
  const
    CONSOLE_KZ_INPUT_NEXT* = "Next"
else:
  let CONSOLE_KZ_INPUT_NEXT* = "Next"
when "Left" is static:
  const
    CONSOLE_KZ_INPUT_LEFT* = "Left"
else:
  let CONSOLE_KZ_INPUT_LEFT* = "Left"
when "Right" is static:
  const
    CONSOLE_KZ_INPUT_RIGHT* = "Right"
else:
  let CONSOLE_KZ_INPUT_RIGHT* = "Right"
when "Start" is static:
  const
    CONSOLE_KZ_INPUT_START* = "Start"
else:
  let CONSOLE_KZ_INPUT_START* = "Start"
when "End" is static:
  const
    CONSOLE_KZ_INPUT_END* = "End"
else:
  let CONSOLE_KZ_INPUT_END* = "End"
when "Paste" is static:
  const
    CONSOLE_KZ_INPUT_PASTE* = "Paste"
else:
  let CONSOLE_KZ_INPUT_PASTE* = "Paste"
when "ScrollDown" is static:
  const
    CONSOLE_KZ_INPUT_SCROLL_DOWN* = "ScrollDown"
else:
  let CONSOLE_KZ_INPUT_SCROLL_DOWN* = "ScrollDown"
when "ScrollUp" is static:
  const
    CONSOLE_KZ_INPUT_SCROLL_UP* = "ScrollUp"
else:
  let CONSOLE_KZ_INPUT_SCROLL_UP* = "ScrollUp"
when "cih" is static:
  const
    CONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION* = "cih"
else:
  let CONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION* = "cih"
when 0 is static:
  const
    EVENT_KU32_FLAG_ID_NONE* = 0
else:
  let EVENT_KU32_FLAG_ID_NONE* = 0
when 4294967295 is static:
  const
    EVENT_KU32_MASK_ID_ALL* = 4294967295'i64
else:
  let EVENT_KU32_MASK_ID_ALL* = 4294967295'i64
when "." is static:
  const
    RESOURCE_KZ_DEFAULT_STORAGE* = "."
else:
  let RESOURCE_KZ_DEFAULT_STORAGE* = "."
when "file" is static:
  const
    RESOURCE_KZ_TYPE_TAG_FILE* = "file"
else:
  let RESOURCE_KZ_TYPE_TAG_FILE* = "file"
when "mem" is static:
  const
    RESOURCE_KZ_TYPE_TAG_MEMORY* = "mem"
else:
  let RESOURCE_KZ_TYPE_TAG_MEMORY* = "mem"
when 0 is static:
  const
    THREAD_KU32_MAIN_THREAD_ID* = 0
else:
  let THREAD_KU32_MAIN_THREAD_ID* = 0
when 16 is static:
  const
    THREAD_KU32_MAX_THREAD_NUMBER* = 16
else:
  let THREAD_KU32_MAX_THREAD_NUMBER* = 16
when 0 is static:
  const
    THREAD_KU32_FLAG_NONE* = 0
else:
  let THREAD_KU32_FLAG_NONE* = 0
when "fps" is static:
  const
    FPS_KZ_CLOCK_NAME* = "fps"
else:
  let FPS_KZ_CLOCK_NAME* = "fps"
when 2 is static:
  const
    PROFILER_KU32_HISTORY_LENGTH* = 2
else:
  let PROFILER_KU32_HISTORY_LENGTH* = 2
when -1 is static:
  const
    PROFILER_KS32_MARKER_ID_NONE* = -1
else:
  let PROFILER_KS32_MARKER_ID_NONE* = -1
when 0 is static:
  const
    GRAPHIC_KU32_FLAG_NONE* = 0
else:
  let GRAPHIC_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    GRAPHIC_KU32_FLAG_2D* = 1
else:
  let GRAPHIC_KU32_FLAG_2D* = 1
when 2 is static:
  const
    GRAPHIC_KU32_FLAG_TEXT* = 2
else:
  let GRAPHIC_KU32_FLAG_TEXT* = 2
when 3 is static:
  const
    GRAPHIC_KU32_MASK_TYPE* = 3
else:
  let GRAPHIC_KU32_MASK_TYPE* = 3
when 4 is static:
  const
    GRAPHIC_KU32_FLAG_FLIP_X* = 4
else:
  let GRAPHIC_KU32_FLAG_FLIP_X* = 4
when 8 is static:
  const
    GRAPHIC_KU32_FLAG_FLIP_Y* = 8
else:
  let GRAPHIC_KU32_FLAG_FLIP_Y* = 8
when 12 is static:
  const
    GRAPHIC_KU32_MASK_FLIP_BOTH* = 12
else:
  let GRAPHIC_KU32_MASK_FLIP_BOTH* = 12
when 0 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_CENTER* = 0
else:
  let GRAPHIC_KU32_FLAG_ALIGN_CENTER* = 0
when 16 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_LEFT* = 16
else:
  let GRAPHIC_KU32_FLAG_ALIGN_LEFT* = 16
when 32 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_RIGHT* = 32
else:
  let GRAPHIC_KU32_FLAG_ALIGN_RIGHT* = 32
when 64 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_TOP* = 64
else:
  let GRAPHIC_KU32_FLAG_ALIGN_TOP* = 64
when 128 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_BOTTOM* = 128
else:
  let GRAPHIC_KU32_FLAG_ALIGN_BOTTOM* = 128
when 256 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_TRUNCATE* = 256
else:
  let GRAPHIC_KU32_FLAG_ALIGN_TRUNCATE* = 256
when 512 is static:
  const
    GRAPHIC_KU32_FLAG_ALIGN_ROUND* = 512
else:
  let GRAPHIC_KU32_FLAG_ALIGN_ROUND* = 512
when 1008 is static:
  const
    GRAPHIC_KU32_MASK_ALIGN* = 1008
else:
  let GRAPHIC_KU32_MASK_ALIGN* = 1008
when 4095 is static:
  const
    GRAPHIC_KU32_MASK_USER_ALL* = 4095
else:
  let GRAPHIC_KU32_MASK_USER_ALL* = 4095
when "Texture" is static:
  const
    GRAPHIC_KZ_CONFIG_TEXTURE_NAME* = "Texture"
else:
  let GRAPHIC_KZ_CONFIG_TEXTURE_NAME* = "Texture"
when "TextureOrigin" is static:
  const
    GRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN* = "TextureOrigin"
else:
  let GRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN* = "TextureOrigin"
when "TextureSize" is static:
  const
    GRAPHIC_KZ_CONFIG_TEXTURE_SIZE* = "TextureSize"
else:
  let GRAPHIC_KZ_CONFIG_TEXTURE_SIZE* = "TextureSize"
when "Text" is static:
  const
    GRAPHIC_KZ_CONFIG_TEXT_NAME* = "Text"
else:
  let GRAPHIC_KZ_CONFIG_TEXT_NAME* = "Text"
when "Pivot" is static:
  const
    GRAPHIC_KZ_CONFIG_PIVOT* = "Pivot"
else:
  let GRAPHIC_KZ_CONFIG_PIVOT* = "Pivot"
when "Color" is static:
  const
    GRAPHIC_KZ_CONFIG_COLOR* = "Color"
else:
  let GRAPHIC_KZ_CONFIG_COLOR* = "Color"
when "Alpha" is static:
  const
    GRAPHIC_KZ_CONFIG_ALPHA* = "Alpha"
else:
  let GRAPHIC_KZ_CONFIG_ALPHA* = "Alpha"
when "RGB" is static:
  const
    GRAPHIC_KZ_CONFIG_RGB* = "RGB"
else:
  let GRAPHIC_KZ_CONFIG_RGB* = "RGB"
when "HSL" is static:
  const
    GRAPHIC_KZ_CONFIG_HSL* = "HSL"
else:
  let GRAPHIC_KZ_CONFIG_HSL* = "HSL"
when "HSV" is static:
  const
    GRAPHIC_KZ_CONFIG_HSV* = "HSV"
else:
  let GRAPHIC_KZ_CONFIG_HSV* = "HSV"
when "Flip" is static:
  const
    GRAPHIC_KZ_CONFIG_FLIP* = "Flip"
else:
  let GRAPHIC_KZ_CONFIG_FLIP* = "Flip"
when "Repeat" is static:
  const
    GRAPHIC_KZ_CONFIG_REPEAT* = "Repeat"
else:
  let GRAPHIC_KZ_CONFIG_REPEAT* = "Repeat"
when "Smoothing" is static:
  const
    GRAPHIC_KZ_CONFIG_SMOOTHING* = "Smoothing"
else:
  let GRAPHIC_KZ_CONFIG_SMOOTHING* = "Smoothing"
when "BlendMode" is static:
  const
    GRAPHIC_KZ_CONFIG_BLEND_MODE* = "BlendMode"
else:
  let GRAPHIC_KZ_CONFIG_BLEND_MODE* = "BlendMode"
when "Stasis" is static:
  const
    GRAPHIC_KZ_CONFIG_STASIS* = "Stasis"
else:
  let GRAPHIC_KZ_CONFIG_STASIS* = "Stasis"
when "KeepInCache" is static:
  const
    GRAPHIC_KZ_CONFIG_KEEP_IN_CACHE* = "KeepInCache"
else:
  let GRAPHIC_KZ_CONFIG_KEEP_IN_CACHE* = "KeepInCache"
when "." is static:
  const
    SCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME* = "."
else:
  let SCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME* = "."
when "screenshot-" is static:
  const
    SCREENSHOT_KZ_DEFAULT_BASE_NAME* = "screenshot-"
else:
  let SCREENSHOT_KZ_DEFAULT_BASE_NAME* = "screenshot-"
when "tga" is static:
  const
    SCREENSHOT_KZ_DEFAULT_EXTENSION* = "tga"
else:
  let SCREENSHOT_KZ_DEFAULT_EXTENSION* = "tga"
when 4 is static:
  const
    SCREENSHOT_KU32_DEFAULT_DIGITS* = 4
else:
  let SCREENSHOT_KU32_DEFAULT_DIGITS* = 4
when "Text" is static:
  const
    TEXT_KZ_LOCALE_GROUP* = "Text"
else:
  let TEXT_KZ_LOCALE_GROUP* = "Text"
when 1 is static:
  const
    FILE_KU32_FLAG_INFO_NORMAL* = 1
else:
  let FILE_KU32_FLAG_INFO_NORMAL* = 1
when 2 is static:
  const
    FILE_KU32_FLAG_INFO_READONLY* = 2
else:
  let FILE_KU32_FLAG_INFO_READONLY* = 2
when 4 is static:
  const
    FILE_KU32_FLAG_INFO_HIDDEN* = 4
else:
  let FILE_KU32_FLAG_INFO_HIDDEN* = 4
when 8 is static:
  const
    FILE_KU32_FLAG_INFO_DIRECTORY* = 8
else:
  let FILE_KU32_FLAG_INFO_DIRECTORY* = 8
when 268435456 is static:
  const
    FILE_KU32_FLAG_OPEN_READ* = 268435456
else:
  let FILE_KU32_FLAG_OPEN_READ* = 268435456
when 536870912 is static:
  const
    FILE_KU32_FLAG_OPEN_WRITE* = 536870912
else:
  let FILE_KU32_FLAG_OPEN_WRITE* = 536870912
when 1073741824 is static:
  const
    FILE_KU32_FLAG_OPEN_APPEND* = 1073741824
else:
  let FILE_KU32_FLAG_OPEN_APPEND* = 1073741824
when 2147483648 is static:
  const
    FILE_KU32_FLAG_OPEN_BINARY* = 2147483648'i64
else:
  let FILE_KU32_FLAG_OPEN_BINARY* = 2147483648'i64
when 0 is static:
  const
    PARAM_KU32_FLAG_NONE* = 0
else:
  let PARAM_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    PARAM_KU32_FLAG_MULTIPLE_ALLOWED* = 1
else:
  let PARAM_KU32_FLAG_MULTIPLE_ALLOWED* = 1
when 2 is static:
  const
    PARAM_KU32_FLAG_STOP_ON_ERROR* = 2
else:
  let PARAM_KU32_FLAG_STOP_ON_ERROR* = 2
when "SoundSystem" is static:
  const
    SOUNDSYSTEM_KZ_CONFIG_SECTION* = "SoundSystem"
else:
  let SOUNDSYSTEM_KZ_CONFIG_SECTION* = "SoundSystem"
when "DimensionRatio" is static:
  const
    SOUNDSYSTEM_KZ_CONFIG_RATIO* = "DimensionRatio"
else:
  let SOUNDSYSTEM_KZ_CONFIG_RATIO* = "DimensionRatio"
when "MuteInBackground" is static:
  const
    SOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND* = "MuteInBackground"
else:
  let SOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND* = "MuteInBackground"
when "Listeners" is static:
  const
    SOUNDSYSTEM_KZ_CONFIG_LISTENERS* = "Listeners"
else:
  let SOUNDSYSTEM_KZ_CONFIG_LISTENERS* = "Listeners"
when "Sound" is static:
  const
    SOUND_KZ_RESOURCE_GROUP* = "Sound"
else:
  let SOUND_KZ_RESOURCE_GROUP* = "Sound"
when "Sound" is static:
  const
    SOUND_KZ_LOCALE_GROUP* = "Sound"
else:
  let SOUND_KZ_LOCALE_GROUP* = "Sound"
when "master" is static:
  const
    SOUND_KZ_MASTER_BUS* = "master"
else:
  let SOUND_KZ_MASTER_BUS* = "master"
when "default" is static:
  const
    OBJECT_KZ_DEFAULT_GROUP* = "default"
else:
  let OBJECT_KZ_DEFAULT_GROUP* = "default"
when 65536 is static:
  const
    FX_SLOT_KU32_FLAG_ABSOLUTE* = 65536
else:
  let FX_SLOT_KU32_FLAG_ABSOLUTE* = 65536
when 131072 is static:
  const
    FX_SLOT_KU32_FLAG_STAGGER* = 131072
else:
  let FX_SLOT_KU32_FLAG_STAGGER* = 131072
when 262144 is static:
  const
    FX_SLOT_KU32_FLAG_USE_ROTATION* = 262144
else:
  let FX_SLOT_KU32_FLAG_USE_ROTATION* = 262144
when 524288 is static:
  const
    FX_SLOT_KU32_FLAG_USE_SCALE* = 524288
else:
  let FX_SLOT_KU32_FLAG_USE_SCALE* = 524288
when 8 is static:
  const
    FXPOINTER_KU32_FX_NUMBER* = 8
else:
  let FXPOINTER_KU32_FX_NUMBER* = 8
when 0 is static:
  const
    FRAME_KU32_FLAG_NONE* = 0
else:
  let FRAME_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    FRAME_KU32_FLAG_SCROLL_X* = 1
else:
  let FRAME_KU32_FLAG_SCROLL_X* = 1
when 2 is static:
  const
    FRAME_KU32_FLAG_SCROLL_Y* = 2
else:
  let FRAME_KU32_FLAG_SCROLL_Y* = 2
when 3 is static:
  const
    FRAME_KU32_MASK_SCROLL_BOTH* = 3
else:
  let FRAME_KU32_MASK_SCROLL_BOTH* = 3
when 4 is static:
  const
    FRAME_KU32_FLAG_DEPTH_SCALE* = 4
else:
  let FRAME_KU32_FLAG_DEPTH_SCALE* = 4
when 16 is static:
  const
    FRAME_KU32_FLAG_FLIP_X* = 16
else:
  let FRAME_KU32_FLAG_FLIP_X* = 16
when 32 is static:
  const
    FRAME_KU32_FLAG_FLIP_Y* = 32
else:
  let FRAME_KU32_FLAG_FLIP_Y* = 32
when 48 is static:
  const
    FRAME_KU32_MASK_FLIP_BOTH* = 48
else:
  let FRAME_KU32_MASK_FLIP_BOTH* = 48
when 0 is static:
  const
    FRAME_KU32_FLAG_IGNORE_NONE* = 0
else:
  let FRAME_KU32_FLAG_IGNORE_NONE* = 0
when 256 is static:
  const
    FRAME_KU32_FLAG_IGNORE_ROTATION* = 256
else:
  let FRAME_KU32_FLAG_IGNORE_ROTATION* = 256
when 512 is static:
  const
    FRAME_KU32_FLAG_IGNORE_SCALE_X* = 512
else:
  let FRAME_KU32_FLAG_IGNORE_SCALE_X* = 512
when 1024 is static:
  const
    FRAME_KU32_FLAG_IGNORE_SCALE_Y* = 1024
else:
  let FRAME_KU32_FLAG_IGNORE_SCALE_Y* = 1024
when 2048 is static:
  const
    FRAME_KU32_FLAG_IGNORE_SCALE_Z* = 2048
else:
  let FRAME_KU32_FLAG_IGNORE_SCALE_Z* = 2048
when 3584 is static:
  const
    FRAME_KU32_MASK_IGNORE_SCALE* = 3584
else:
  let FRAME_KU32_MASK_IGNORE_SCALE* = 3584
when 4096 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_ROTATION* = 4096
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_ROTATION* = 4096
when 8192 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X* = 8192
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X* = 8192
when 16384 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y* = 16384
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y* = 16384
when 32768 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z* = 32768
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z* = 32768
when 57344 is static:
  const
    FRAME_KU32_MASK_IGNORE_POSITION_SCALE* = 57344
else:
  let FRAME_KU32_MASK_IGNORE_POSITION_SCALE* = 57344
when 65536 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X* = 65536
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X* = 65536
when 131072 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y* = 131072
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y* = 131072
when 262144 is static:
  const
    FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z* = 262144
else:
  let FRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z* = 262144
when 458752 is static:
  const
    FRAME_KU32_MASK_IGNORE_POSITION_POSITION* = 458752
else:
  let FRAME_KU32_MASK_IGNORE_POSITION_POSITION* = 458752
when 520192 is static:
  const
    FRAME_KU32_MASK_IGNORE_POSITION* = 520192
else:
  let FRAME_KU32_MASK_IGNORE_POSITION* = 520192
when 524032 is static:
  const
    FRAME_KU32_MASK_IGNORE_ALL* = 524032
else:
  let FRAME_KU32_MASK_IGNORE_ALL* = 524032
when 524287 is static:
  const
    FRAME_KU32_MASK_USER_ALL* = 524287
else:
  let FRAME_KU32_MASK_USER_ALL* = 524287
when 0 is static:
  const
    SPAWNER_KU32_FLAG_NONE* = 0
else:
  let SPAWNER_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    SPAWNER_KU32_FLAG_AUTO_DELETE* = 1
else:
  let SPAWNER_KU32_FLAG_AUTO_DELETE* = 1
when 2 is static:
  const
    SPAWNER_KU32_FLAG_AUTO_RESET* = 2
else:
  let SPAWNER_KU32_FLAG_AUTO_RESET* = 2
when 4 is static:
  const
    SPAWNER_KU32_FLAG_USE_ALPHA* = 4
else:
  let SPAWNER_KU32_FLAG_USE_ALPHA* = 4
when 8 is static:
  const
    SPAWNER_KU32_FLAG_USE_COLOR* = 8
else:
  let SPAWNER_KU32_FLAG_USE_COLOR* = 8
when 16 is static:
  const
    SPAWNER_KU32_FLAG_USE_ROTATION* = 16
else:
  let SPAWNER_KU32_FLAG_USE_ROTATION* = 16
when 32 is static:
  const
    SPAWNER_KU32_FLAG_USE_SCALE* = 32
else:
  let SPAWNER_KU32_FLAG_USE_SCALE* = 32
when 64 is static:
  const
    SPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT* = 64
else:
  let SPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT* = 64
when 128 is static:
  const
    SPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER* = 128
else:
  let SPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER* = 128
when 192 is static:
  const
    SPAWNER_KU32_MASK_USE_RELATIVE_SPEED* = 192
else:
  let SPAWNER_KU32_MASK_USE_RELATIVE_SPEED* = 192
when 256 is static:
  const
    SPAWNER_KU32_FLAG_USE_SELF_AS_PARENT* = 256
else:
  let SPAWNER_KU32_FLAG_USE_SELF_AS_PARENT* = 256
when 512 is static:
  const
    SPAWNER_KU32_FLAG_CLEAN_ON_DELETE* = 512
else:
  let SPAWNER_KU32_FLAG_CLEAN_ON_DELETE* = 512
when 1024 is static:
  const
    SPAWNER_KU32_FLAG_INTERPOLATE* = 1024
else:
  let SPAWNER_KU32_FLAG_INTERPOLATE* = 1024
when 1279 is static:
  const
    SPAWNER_KU32_MASK_USER_ALL* = 1279
else:
  let SPAWNER_KU32_MASK_USER_ALL* = 1279
when 0 is static:
  const
    BODY_DEF_KU32_FLAG_NONE* = 0
else:
  let BODY_DEF_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    BODY_DEF_KU32_FLAG_2D* = 1
else:
  let BODY_DEF_KU32_FLAG_2D* = 1
when 2 is static:
  const
    BODY_DEF_KU32_FLAG_DYNAMIC* = 2
else:
  let BODY_DEF_KU32_FLAG_DYNAMIC* = 2
when 4 is static:
  const
    BODY_DEF_KU32_FLAG_HIGH_SPEED* = 4
else:
  let BODY_DEF_KU32_FLAG_HIGH_SPEED* = 4
when 8 is static:
  const
    BODY_DEF_KU32_FLAG_FIXED_ROTATION* = 8
else:
  let BODY_DEF_KU32_FLAG_FIXED_ROTATION* = 8
when 16 is static:
  const
    BODY_DEF_KU32_FLAG_CAN_MOVE* = 16
else:
  let BODY_DEF_KU32_FLAG_CAN_MOVE* = 16
when 32 is static:
  const
    BODY_DEF_KU32_FLAG_ALLOW_SLEEP* = 32
else:
  let BODY_DEF_KU32_FLAG_ALLOW_SLEEP* = 32
when 4294967295 is static:
  const
    BODY_DEF_KU32_MASK_ALL* = 4294967295'i64
else:
  let BODY_DEF_KU32_MASK_ALL* = 4294967295'i64
when 0 is static:
  const
    BODY_PART_DEF_KU32_FLAG_NONE* = 0
else:
  let BODY_PART_DEF_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    BODY_PART_DEF_KU32_FLAG_SPHERE* = 1
else:
  let BODY_PART_DEF_KU32_FLAG_SPHERE* = 1
when 2 is static:
  const
    BODY_PART_DEF_KU32_FLAG_BOX* = 2
else:
  let BODY_PART_DEF_KU32_FLAG_BOX* = 2
when 4 is static:
  const
    BODY_PART_DEF_KU32_FLAG_MESH* = 4
else:
  let BODY_PART_DEF_KU32_FLAG_MESH* = 4
when 8 is static:
  const
    BODY_PART_DEF_KU32_FLAG_EDGE* = 8
else:
  let BODY_PART_DEF_KU32_FLAG_EDGE* = 8
when 16 is static:
  const
    BODY_PART_DEF_KU32_FLAG_CHAIN* = 16
else:
  let BODY_PART_DEF_KU32_FLAG_CHAIN* = 16
when 31 is static:
  const
    BODY_PART_DEF_KU32_MASK_TYPE* = 31
else:
  let BODY_PART_DEF_KU32_MASK_TYPE* = 31
when 268435456 is static:
  const
    BODY_PART_DEF_KU32_FLAG_SOLID* = 268435456
else:
  let BODY_PART_DEF_KU32_FLAG_SOLID* = 268435456
when 4294967295 is static:
  const
    BODY_PART_DEF_KU32_MASK_ALL* = 4294967295'i64
else:
  let BODY_PART_DEF_KU32_MASK_ALL* = 4294967295'i64
when 0 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_NONE* = 0
else:
  let BODY_JOINT_DEF_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_REVOLUTE* = 1
else:
  let BODY_JOINT_DEF_KU32_FLAG_REVOLUTE* = 1
when 2 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_PRISMATIC* = 2
else:
  let BODY_JOINT_DEF_KU32_FLAG_PRISMATIC* = 2
when 4 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_SPRING* = 4
else:
  let BODY_JOINT_DEF_KU32_FLAG_SPRING* = 4
when 8 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_ROPE* = 8
else:
  let BODY_JOINT_DEF_KU32_FLAG_ROPE* = 8
when 16 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_PULLEY* = 16
else:
  let BODY_JOINT_DEF_KU32_FLAG_PULLEY* = 16
when 32 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_SUSPENSION* = 32
else:
  let BODY_JOINT_DEF_KU32_FLAG_SUSPENSION* = 32
when 64 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_WELD* = 64
else:
  let BODY_JOINT_DEF_KU32_FLAG_WELD* = 64
when 128 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_FRICTION* = 128
else:
  let BODY_JOINT_DEF_KU32_FLAG_FRICTION* = 128
when 256 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_GEAR* = 256
else:
  let BODY_JOINT_DEF_KU32_FLAG_GEAR* = 256
when 4095 is static:
  const
    BODY_JOINT_DEF_KU32_MASK_TYPE* = 4095
else:
  let BODY_JOINT_DEF_KU32_MASK_TYPE* = 4095
when 268435456 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_COLLIDE* = 268435456
else:
  let BODY_JOINT_DEF_KU32_FLAG_COLLIDE* = 268435456
when 536870912 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT* = 536870912
else:
  let BODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT* = 536870912
when 1073741824 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_MOTOR* = 1073741824
else:
  let BODY_JOINT_DEF_KU32_FLAG_MOTOR* = 1073741824
when 2147483648 is static:
  const
    BODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT* = 2147483648'i64
else:
  let BODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT* = 2147483648'i64
when 4294967295 is static:
  const
    BODY_JOINT_DEF_KU32_MASK_ALL* = 4294967295'i64
else:
  let BODY_JOINT_DEF_KU32_MASK_ALL* = 4294967295'i64
when 8 is static:
  const
    BODY_PART_DEF_KU32_MESH_VERTEX_NUMBER* = 8
else:
  let BODY_PART_DEF_KU32_MESH_VERTEX_NUMBER* = 8
when "Physics" is static:
  const
    PHYSICS_KZ_CONFIG_SECTION* = "Physics"
else:
  let PHYSICS_KZ_CONFIG_SECTION* = "Physics"
when "Gravity" is static:
  const
    PHYSICS_KZ_CONFIG_GRAVITY* = "Gravity"
else:
  let PHYSICS_KZ_CONFIG_GRAVITY* = "Gravity"
when "AllowSleep" is static:
  const
    PHYSICS_KZ_CONFIG_ALLOW_SLEEP* = "AllowSleep"
else:
  let PHYSICS_KZ_CONFIG_ALLOW_SLEEP* = "AllowSleep"
when "IterationsPerStep" is static:
  const
    PHYSICS_KZ_CONFIG_ITERATIONS* = "IterationsPerStep"
else:
  let PHYSICS_KZ_CONFIG_ITERATIONS* = "IterationsPerStep"
when "DimensionRatio" is static:
  const
    PHYSICS_KZ_CONFIG_RATIO* = "DimensionRatio"
else:
  let PHYSICS_KZ_CONFIG_RATIO* = "DimensionRatio"
when "StepFrequency" is static:
  const
    PHYSICS_KZ_CONFIG_STEP_FREQUENCY* = "StepFrequency"
else:
  let PHYSICS_KZ_CONFIG_STEP_FREQUENCY* = "StepFrequency"
when "ShowDebug" is static:
  const
    PHYSICS_KZ_CONFIG_SHOW_DEBUG* = "ShowDebug"
else:
  let PHYSICS_KZ_CONFIG_SHOW_DEBUG* = "ShowDebug"
when "CollisionFlagList" is static:
  const
    PHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST* = "CollisionFlagList"
else:
  let PHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST* = "CollisionFlagList"
when "Interpolate" is static:
  const
    PHYSICS_KZ_CONFIG_INTERPOLATE* = "Interpolate"
else:
  let PHYSICS_KZ_CONFIG_INTERPOLATE* = "Interpolate"
when 0 is static:
  const
    CAMERA_KU32_FLAG_NONE* = 0
else:
  let CAMERA_KU32_FLAG_NONE* = 0
when 1 is static:
  const
    CAMERA_KU32_FLAG_2D* = 1
else:
  let CAMERA_KU32_FLAG_2D* = 1
when 255 is static:
  const
    CAMERA_KU32_MASK_USER_ALL* = 255
else:
  let CAMERA_KU32_MASK_USER_ALL* = 255
when 32 is static:
  const
    CAMERA_KU32_GROUP_ID_NUMBER* = 32
else:
  let CAMERA_KU32_GROUP_ID_NUMBER* = 32
when 4 is static:
  const
    SHADERPOINTER_KU32_SHADER_NUMBER* = 4
else:
  let SHADERPOINTER_KU32_SHADER_NUMBER* = 4
when 0 is static:
  const
    VIEWPORT_KU32_FLAG_ALIGN_CENTER* = 0
else:
  let VIEWPORT_KU32_FLAG_ALIGN_CENTER* = 0
when 268435456 is static:
  const
    VIEWPORT_KU32_FLAG_ALIGN_LEFT* = 268435456
else:
  let VIEWPORT_KU32_FLAG_ALIGN_LEFT* = 268435456
when 536870912 is static:
  const
    VIEWPORT_KU32_FLAG_ALIGN_RIGHT* = 536870912
else:
  let VIEWPORT_KU32_FLAG_ALIGN_RIGHT* = 536870912
when 1073741824 is static:
  const
    VIEWPORT_KU32_FLAG_ALIGN_TOP* = 1073741824
else:
  let VIEWPORT_KU32_FLAG_ALIGN_TOP* = 1073741824
when 2147483648 is static:
  const
    VIEWPORT_KU32_FLAG_ALIGN_BOTTOM* = 2147483648'i64
else:
  let VIEWPORT_KU32_FLAG_ALIGN_BOTTOM* = 2147483648'i64
when 16777216 is static:
  const
    VIEWPORT_KU32_FLAG_NO_DEBUG* = 16777216
else:
  let VIEWPORT_KU32_FLAG_NO_DEBUG* = 16777216
when 8 is static:
  const
    VIEWPORT_KU32_MAX_TEXTURE_NUMBER* = 8
else:
  let VIEWPORT_KU32_MAX_TEXTURE_NUMBER* = 8
when "Render" is static:
  const
    RENDER_KZ_CONFIG_SECTION* = "Render"
else:
  let RENDER_KZ_CONFIG_SECTION* = "Render"
when "ShowFPS" is static:
  const
    RENDER_KZ_CONFIG_SHOW_FPS* = "ShowFPS"
else:
  let RENDER_KZ_CONFIG_SHOW_FPS* = "ShowFPS"
when "ShowProfiler" is static:
  const
    RENDER_KZ_CONFIG_SHOW_PROFILER* = "ShowProfiler"
else:
  let RENDER_KZ_CONFIG_SHOW_PROFILER* = "ShowProfiler"
when "MinFrequency" is static:
  const
    RENDER_KZ_CONFIG_MIN_FREQUENCY* = "MinFrequency"
else:
  let RENDER_KZ_CONFIG_MIN_FREQUENCY* = "MinFrequency"
when "ProfilerOrientation" is static:
  const
    RENDER_KZ_CONFIG_PROFILER_ORIENTATION* = "ProfilerOrientation"
else:
  let RENDER_KZ_CONFIG_PROFILER_ORIENTATION* = "ProfilerOrientation"
when "ConsoleColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_COLOR* = "ConsoleColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_COLOR* = "ConsoleColor"
when "ConsoleAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_ALPHA* = "ConsoleAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_ALPHA* = "ConsoleAlpha"
when "ConsoleBackgroundColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR* = "ConsoleBackgroundColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR* = "ConsoleBackgroundColor"
when "ConsoleBackgroundAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA* = "ConsoleBackgroundAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA* = "ConsoleBackgroundAlpha"
when "ConsoleSeparatorColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR* = "ConsoleSeparatorColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR* = "ConsoleSeparatorColor"
when "ConsoleSeparatorAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA* = "ConsoleSeparatorAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA* = "ConsoleSeparatorAlpha"
when "ConsoleInputColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR* = "ConsoleInputColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR* = "ConsoleInputColor"
when "ConsoleInputAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA* = "ConsoleInputAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA* = "ConsoleInputAlpha"
when "ConsoleCompletionColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR* = "ConsoleCompletionColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR* = "ConsoleCompletionColor"
when "ConsoleCompletionAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA* = "ConsoleCompletionAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA* = "ConsoleCompletionAlpha"
when "ConsoleLogColor" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_LOG_COLOR* = "ConsoleLogColor"
else:
  let RENDER_KZ_CONFIG_CONSOLE_LOG_COLOR* = "ConsoleLogColor"
when "ConsoleLogAlpha" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA* = "ConsoleLogAlpha"
else:
  let RENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA* = "ConsoleLogAlpha"
when "ConsoleFontScale" is static:
  const
    RENDER_KZ_CONFIG_CONSOLE_FONT_SCALE* = "ConsoleFontScale"
else:
  let RENDER_KZ_CONFIG_CONSOLE_FONT_SCALE* = "ConsoleFontScale"
when "orx:input:profiler" is static:
  const
    RENDER_KZ_INPUT_SET* = "orx:input:profiler"
else:
  let RENDER_KZ_INPUT_SET* = "orx:input:profiler"
when "ToggleHistory" is static:
  const
    RENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY* = "ToggleHistory"
else:
  let RENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY* = "ToggleHistory"
when "Pause" is static:
  const
    RENDER_KZ_INPUT_PROFILER_PAUSE* = "Pause"
else:
  let RENDER_KZ_INPUT_PROFILER_PAUSE* = "Pause"
when "PreviousFrame" is static:
  const
    RENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME* = "PreviousFrame"
else:
  let RENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME* = "PreviousFrame"
when "NextFrame" is static:
  const
    RENDER_KZ_INPUT_PROFILER_NEXT_FRAME* = "NextFrame"
else:
  let RENDER_KZ_INPUT_PROFILER_NEXT_FRAME* = "NextFrame"
when "PreviousDepth" is static:
  const
    RENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH* = "PreviousDepth"
else:
  let RENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH* = "PreviousDepth"
when "NextDepth" is static:
  const
    RENDER_KZ_INPUT_PROFILER_NEXT_DEPTH* = "NextDepth"
else:
  let RENDER_KZ_INPUT_PROFILER_NEXT_DEPTH* = "NextDepth"
when "PreviousThread" is static:
  const
    RENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD* = "PreviousThread"
else:
  let RENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD* = "PreviousThread"
when "NextThread" is static:
  const
    RENDER_KZ_INPUT_PROFILER_NEXT_THREAD* = "NextThread"
else:
  let RENDER_KZ_INPUT_PROFILER_NEXT_THREAD* = "NextThread"
when 4 is static:
  const
    SOUNDPOINTER_KU32_SOUND_NUMBER* = 4
else:
  let SOUNDPOINTER_KU32_SOUND_NUMBER* = 4
var orxFLOAT_0*: orxFLOAT
var orxFLOAT_1*: orxFLOAT
var orxFLOAT_MAX*: orxFLOAT
var orxDOUBLE_0*: orxDOUBLE
var orxDOUBLE_1*: orxDOUBLE
var orxDOUBLE_MAX*: orxDOUBLE
var orxU64_UNDEFINED*: orxU64
var orxU32_UNDEFINED*: orxU32
var orxU16_UNDEFINED*: orxU16
var orxU8_UNDEFINED*: orxU8
var orxHANDLE_UNDEFINED*: orxHANDLE
var orxSTRINGID_UNDEFINED*: orxSTRINGID
var orxSTRING_EMPTY* {.importc: "orxSTRING_EMPTY".}: cstring
var orxSTRING_TRUE* {.importc: "orxSTRING_TRUE".}: cstring
var orxSTRING_FALSE* {.importc: "orxSTRING_FALSE".}: cstring
var orxSTRING_EOL* {.importc: "orxSTRING_EOL".}: cstring
var orxSTRING_DIRECTORY_SEPARATOR* {.importc: "orxSTRING_DIRECTORY_SEPARATOR".}: cstring
proc moduleRegister*(internal_eModuleID: orxMODULE_ID;
                     internal_zModuleName: cstring;
                     internal_pfnSetup: orxMODULE_SETUP_FUNCTION;
                     internal_pfnInit: orxMODULE_INIT_FUNCTION;
                     internal_pfnExit: orxMODULE_EXIT_FUNCTION): void {.cdecl,
    importc: "orxModule_Register".}
proc addDependency*(internal_eModuleID: orxMODULE_ID;
                    internal_eDependID: orxMODULE_ID): void {.cdecl,
    importc: "orxModule_AddDependency".}
proc addOptionalDependency*(internal_eModuleID: orxMODULE_ID;
                            internal_eDependID: orxMODULE_ID): void {.cdecl,
    importc: "orxModule_AddOptionalDependency".}
proc moduleInit*(internal_eModuleID: orxMODULE_ID): orxSTATUS {.cdecl,
    importc: "orxModule_Init".}
proc moduleExit*(internal_eModuleID: orxMODULE_ID): void {.cdecl,
    importc: "orxModule_Exit".}
proc isInitialized*(internal_eModuleID: orxMODULE_ID): orxBOOL {.cdecl,
    importc: "orxModule_IsInitialized".}
proc getName*(internal_eModuleID: orxMODULE_ID): cstring {.cdecl,
    importc: "orxModule_GetName".}
proc internal_orxDebug_Init*(): orxSTATUS {.cdecl, importc: "_orxDebug_Init".}
proc internal_orxDebug_Exit*(): void {.cdecl, importc: "_orxDebug_Exit".}
proc internal_orxDebug_Log*(internal_eLevel: orxDEBUG_LEVEL;
                            internal_zFunction: cstring;
                            internal_zFile: cstring; internal_u32Line: orxU32;
                            internal_zFormat: cstring): void {.cdecl, varargs,
    importc: "_orxDebug_Log".}
proc internal_orxDebug_EnableLevel*(internal_eLevel: orxDEBUG_LEVEL;
                                    internal_bEnable: orxBOOL): void {.cdecl,
    importc: "_orxDebug_EnableLevel".}
proc internal_orxDebug_IsLevelEnabled*(internal_eLevel: orxDEBUG_LEVEL): orxBOOL {.
    cdecl, importc: "_orxDebug_IsLevelEnabled".}
proc internal_orxDebug_SetFlags*(internal_u32Add: orxU32;
                                 internal_u32Remove: orxU32): void {.cdecl,
    importc: "_orxDebug_SetFlags".}
proc internal_orxDebug_GetFlags*(): orxU32 {.cdecl,
    importc: "_orxDebug_GetFlags".}
proc internal_orxDebug_Break*(): void {.cdecl, importc: "_orxDebug_Break".}
proc internal_orxDebug_SetDebugFile*(internal_zFileName: cstring): void {.cdecl,
    importc: "_orxDebug_SetDebugFile".}
proc internal_orxDebug_SetLogFile*(internal_zFileName: cstring): void {.cdecl,
    importc: "_orxDebug_SetLogFile".}
proc internal_orxDebug_SetLogCallback*(internal_pfnLogCallback: orxDEBUG_CALLBACK_FUNCTION): void {.
    cdecl, importc: "_orxDebug_SetLogCallback".}
proc memorySetup*(): void {.cdecl, importc: "orxMemory_Setup".}
proc memoryInit*(): orxSTATUS {.cdecl, importc: "orxMemory_Init".}
proc memoryExit*(): void {.cdecl, importc: "orxMemory_Exit".}
proc allocate*(internal_u32Size: orxU32; internal_eMemType: orxMEMORY_TYPE): pointer {.
    cdecl, importc: "orxMemory_Allocate".}
proc reallocate*(internal_pMem: pointer; internal_u32Size: orxU32;
                 internal_eMemType: orxMEMORY_TYPE): pointer {.cdecl,
    importc: "orxMemory_Reallocate".}
proc free*(internal_pMem: pointer): void {.cdecl, importc: "orxMemory_Free".}
proc getTypeName*(internal_eMemType: orxMEMORY_TYPE): cstring {.cdecl,
    importc: "orxMemory_GetTypeName".}
proc getCacheLineSize*(): orxU32 {.cdecl, importc: "orxMemory_GetCacheLineSize".}
proc initRandom*(internal_u32Seed: orxU32): void {.cdecl,
    importc: "orxMath_InitRandom".}
proc getRandomFloat*(internal_fMin: orxFLOAT; internal_fMax: orxFLOAT): orxFLOAT {.
    cdecl, importc: "orxMath_GetRandomFloat".}
proc getSteppedRandomFloat*(internal_fMin: orxFLOAT; internal_fMax: orxFLOAT;
                            internal_fStep: orxFLOAT): orxFLOAT {.cdecl,
    importc: "orxMath_GetSteppedRandomFloat".}
proc getRandomU32*(internal_u32Min: orxU32; internal_u32Max: orxU32): orxU32 {.
    cdecl, importc: "orxMath_GetRandomU32".}
proc getSteppedRandomU32*(internal_u32Min: orxU32; internal_u32Max: orxU32;
                          internal_u32Step: orxU32): orxU32 {.cdecl,
    importc: "orxMath_GetSteppedRandomU32".}
proc getRandomS32*(internal_s32Min: orxS32; internal_s32Max: orxS32): orxS32 {.
    cdecl, importc: "orxMath_GetRandomS32".}
proc getSteppedRandomS32*(internal_s32Min: orxS32; internal_s32Max: orxS32;
                          internal_s32Step: orxS32): orxS32 {.cdecl,
    importc: "orxMath_GetSteppedRandomS32".}
proc getRandomU64*(internal_u64Min: orxU64; internal_u64Max: orxU64): orxU64 {.
    cdecl, importc: "orxMath_GetRandomU64".}
proc getSteppedRandomU64*(internal_u64Min: orxU64; internal_u64Max: orxU64;
                          internal_u64Step: orxU64): orxU64 {.cdecl,
    importc: "orxMath_GetSteppedRandomU64".}
proc getRandomS64*(internal_s64Min: orxS64; internal_s64Max: orxS64): orxS64 {.
    cdecl, importc: "orxMath_GetRandomS64".}
proc getSteppedRandomS64*(internal_s64Min: orxS64; internal_s64Max: orxS64;
                          internal_s64Step: orxS64): orxS64 {.cdecl,
    importc: "orxMath_GetSteppedRandomS64".}
proc getRandomSeeds*(internal_au32Seeds: array[4'i64, orxU32]): void {.cdecl,
    importc: "orxMath_GetRandomSeeds".}
proc setRandomSeeds*(internal_au32Seeds: array[4'i64, orxU32]): void {.cdecl,
    importc: "orxMath_SetRandomSeeds".}
proc bezier*(internal_pvRes: ptr orxVECTOR; internal_pvPoint1: ptr orxVECTOR;
             internal_pvPoint2: ptr orxVECTOR; internal_pvPoint3: ptr orxVECTOR;
             internal_pvPoint4: ptr orxVECTOR; internal_fT: orxFLOAT): ptr orxVECTOR {.
    cdecl, importc: "orxVector_Bezier".}
proc catmullRom*(internal_pvRes: ptr orxVECTOR;
                 internal_pvPoint1: ptr orxVECTOR;
                 internal_pvPoint2: ptr orxVECTOR;
                 internal_pvPoint3: ptr orxVECTOR;
                 internal_pvPoint4: ptr orxVECTOR; internal_fT: orxFLOAT): ptr orxVECTOR {.
    cdecl, importc: "orxVector_CatmullRom".}
var orxVECTOR_X* {.importc: "orxVECTOR_X".}: orxVECTOR
var orxVECTOR_Y* {.importc: "orxVECTOR_Y".}: orxVECTOR
var orxVECTOR_Z* {.importc: "orxVECTOR_Z".}: orxVECTOR
var orxVECTOR_0* {.importc: "orxVECTOR_0".}: orxVECTOR
var orxVECTOR_1* {.importc: "orxVECTOR_1".}: orxVECTOR
var orxVECTOR_ALICE_BLUE* {.importc: "orxVECTOR_ALICE_BLUE".}: orxVECTOR
var orxVECTOR_ANTIQUE_WHITE* {.importc: "orxVECTOR_ANTIQUE_WHITE".}: orxVECTOR
var orxVECTOR_AQUA* {.importc: "orxVECTOR_AQUA".}: orxVECTOR
var orxVECTOR_AQUAMARINE* {.importc: "orxVECTOR_AQUAMARINE".}: orxVECTOR
var orxVECTOR_AZURE* {.importc: "orxVECTOR_AZURE".}: orxVECTOR
var orxVECTOR_BEIGE* {.importc: "orxVECTOR_BEIGE".}: orxVECTOR
var orxVECTOR_BISQUE* {.importc: "orxVECTOR_BISQUE".}: orxVECTOR
var orxVECTOR_BLACK* {.importc: "orxVECTOR_BLACK".}: orxVECTOR
var orxVECTOR_BLANCHED_ALMOND* {.importc: "orxVECTOR_BLANCHED_ALMOND".}: orxVECTOR
var orxVECTOR_BLUE* {.importc: "orxVECTOR_BLUE".}: orxVECTOR
var orxVECTOR_BLUE_VIOLET* {.importc: "orxVECTOR_BLUE_VIOLET".}: orxVECTOR
var orxVECTOR_BROWN* {.importc: "orxVECTOR_BROWN".}: orxVECTOR
var orxVECTOR_BURLY_WOOD* {.importc: "orxVECTOR_BURLY_WOOD".}: orxVECTOR
var orxVECTOR_CADET_BLUE* {.importc: "orxVECTOR_CADET_BLUE".}: orxVECTOR
var orxVECTOR_CHARTREUSE* {.importc: "orxVECTOR_CHARTREUSE".}: orxVECTOR
var orxVECTOR_CHOCOLATE* {.importc: "orxVECTOR_CHOCOLATE".}: orxVECTOR
var orxVECTOR_CORAL* {.importc: "orxVECTOR_CORAL".}: orxVECTOR
var orxVECTOR_CORNFLOWER_BLUE* {.importc: "orxVECTOR_CORNFLOWER_BLUE".}: orxVECTOR
var orxVECTOR_CORNSILK* {.importc: "orxVECTOR_CORNSILK".}: orxVECTOR
var orxVECTOR_CRIMSON* {.importc: "orxVECTOR_CRIMSON".}: orxVECTOR
var orxVECTOR_CYAN* {.importc: "orxVECTOR_CYAN".}: orxVECTOR
var orxVECTOR_DARK_BLUE* {.importc: "orxVECTOR_DARK_BLUE".}: orxVECTOR
var orxVECTOR_DARK_CYAN* {.importc: "orxVECTOR_DARK_CYAN".}: orxVECTOR
var orxVECTOR_DARK_GOLDEN_ROD* {.importc: "orxVECTOR_DARK_GOLDEN_ROD".}: orxVECTOR
var orxVECTOR_DARK_GRAY* {.importc: "orxVECTOR_DARK_GRAY".}: orxVECTOR
var orxVECTOR_DARK_GREY* {.importc: "orxVECTOR_DARK_GREY".}: orxVECTOR
var orxVECTOR_DARK_GREEN* {.importc: "orxVECTOR_DARK_GREEN".}: orxVECTOR
var orxVECTOR_DARK_KHAKI* {.importc: "orxVECTOR_DARK_KHAKI".}: orxVECTOR
var orxVECTOR_DARK_MAGENTA* {.importc: "orxVECTOR_DARK_MAGENTA".}: orxVECTOR
var orxVECTOR_DARK_OLIVE_GREEN* {.importc: "orxVECTOR_DARK_OLIVE_GREEN".}: orxVECTOR
var orxVECTOR_DARK_ORANGE* {.importc: "orxVECTOR_DARK_ORANGE".}: orxVECTOR
var orxVECTOR_DARK_ORCHID* {.importc: "orxVECTOR_DARK_ORCHID".}: orxVECTOR
var orxVECTOR_DARK_RED* {.importc: "orxVECTOR_DARK_RED".}: orxVECTOR
var orxVECTOR_DARK_SALMON* {.importc: "orxVECTOR_DARK_SALMON".}: orxVECTOR
var orxVECTOR_DARK_SEA_GREEN* {.importc: "orxVECTOR_DARK_SEA_GREEN".}: orxVECTOR
var orxVECTOR_DARK_SLATE_BLUE* {.importc: "orxVECTOR_DARK_SLATE_BLUE".}: orxVECTOR
var orxVECTOR_DARK_SLATE_GRAY* {.importc: "orxVECTOR_DARK_SLATE_GRAY".}: orxVECTOR
var orxVECTOR_DARK_SLATE_GREY* {.importc: "orxVECTOR_DARK_SLATE_GREY".}: orxVECTOR
var orxVECTOR_DARK_TURQUOISE* {.importc: "orxVECTOR_DARK_TURQUOISE".}: orxVECTOR
var orxVECTOR_DARK_VIOLET* {.importc: "orxVECTOR_DARK_VIOLET".}: orxVECTOR
var orxVECTOR_DEEP_PINK* {.importc: "orxVECTOR_DEEP_PINK".}: orxVECTOR
var orxVECTOR_DEEP_SKY_BLUE* {.importc: "orxVECTOR_DEEP_SKY_BLUE".}: orxVECTOR
var orxVECTOR_DIM_GRAY* {.importc: "orxVECTOR_DIM_GRAY".}: orxVECTOR
var orxVECTOR_DIM_GREY* {.importc: "orxVECTOR_DIM_GREY".}: orxVECTOR
var orxVECTOR_DODGER_BLUE* {.importc: "orxVECTOR_DODGER_BLUE".}: orxVECTOR
var orxVECTOR_FIRE_BRICK* {.importc: "orxVECTOR_FIRE_BRICK".}: orxVECTOR
var orxVECTOR_FLORAL_WHITE* {.importc: "orxVECTOR_FLORAL_WHITE".}: orxVECTOR
var orxVECTOR_FOREST_GREEN* {.importc: "orxVECTOR_FOREST_GREEN".}: orxVECTOR
var orxVECTOR_FUCHSIA* {.importc: "orxVECTOR_FUCHSIA".}: orxVECTOR
var orxVECTOR_GAINSBORO* {.importc: "orxVECTOR_GAINSBORO".}: orxVECTOR
var orxVECTOR_GHOST_WHITE* {.importc: "orxVECTOR_GHOST_WHITE".}: orxVECTOR
var orxVECTOR_GOLD* {.importc: "orxVECTOR_GOLD".}: orxVECTOR
var orxVECTOR_GOLDEN_ROD* {.importc: "orxVECTOR_GOLDEN_ROD".}: orxVECTOR
var orxVECTOR_GRAY* {.importc: "orxVECTOR_GRAY".}: orxVECTOR
var orxVECTOR_GREY* {.importc: "orxVECTOR_GREY".}: orxVECTOR
var orxVECTOR_GREEN* {.importc: "orxVECTOR_GREEN".}: orxVECTOR
var orxVECTOR_GREEN_YELLOW* {.importc: "orxVECTOR_GREEN_YELLOW".}: orxVECTOR
var orxVECTOR_HONEY_DEW* {.importc: "orxVECTOR_HONEY_DEW".}: orxVECTOR
var orxVECTOR_HOT_PINK* {.importc: "orxVECTOR_HOT_PINK".}: orxVECTOR
var orxVECTOR_INDIAN_RED* {.importc: "orxVECTOR_INDIAN_RED".}: orxVECTOR
var orxVECTOR_INDIGO* {.importc: "orxVECTOR_INDIGO".}: orxVECTOR
var orxVECTOR_IVORY* {.importc: "orxVECTOR_IVORY".}: orxVECTOR
var orxVECTOR_KHAKI* {.importc: "orxVECTOR_KHAKI".}: orxVECTOR
var orxVECTOR_LAVENDER* {.importc: "orxVECTOR_LAVENDER".}: orxVECTOR
var orxVECTOR_LAVENDER_BLUSH* {.importc: "orxVECTOR_LAVENDER_BLUSH".}: orxVECTOR
var orxVECTOR_LAWN_GREEN* {.importc: "orxVECTOR_LAWN_GREEN".}: orxVECTOR
var orxVECTOR_LEMON_CHIFFON* {.importc: "orxVECTOR_LEMON_CHIFFON".}: orxVECTOR
var orxVECTOR_LIGHT_BLUE* {.importc: "orxVECTOR_LIGHT_BLUE".}: orxVECTOR
var orxVECTOR_LIGHT_CORAL* {.importc: "orxVECTOR_LIGHT_CORAL".}: orxVECTOR
var orxVECTOR_LIGHT_CYAN* {.importc: "orxVECTOR_LIGHT_CYAN".}: orxVECTOR
var orxVECTOR_LIGHT_GOLDEN_ROD_YELLOW* {.
    importc: "orxVECTOR_LIGHT_GOLDEN_ROD_YELLOW".}: orxVECTOR
var orxVECTOR_LIGHT_GRAY* {.importc: "orxVECTOR_LIGHT_GRAY".}: orxVECTOR
var orxVECTOR_LIGHT_GREY* {.importc: "orxVECTOR_LIGHT_GREY".}: orxVECTOR
var orxVECTOR_LIGHT_GREEN* {.importc: "orxVECTOR_LIGHT_GREEN".}: orxVECTOR
var orxVECTOR_LIGHT_PINK* {.importc: "orxVECTOR_LIGHT_PINK".}: orxVECTOR
var orxVECTOR_LIGHT_SALMON* {.importc: "orxVECTOR_LIGHT_SALMON".}: orxVECTOR
var orxVECTOR_LIGHT_SEA_GREEN* {.importc: "orxVECTOR_LIGHT_SEA_GREEN".}: orxVECTOR
var orxVECTOR_LIGHT_SKY_BLUE* {.importc: "orxVECTOR_LIGHT_SKY_BLUE".}: orxVECTOR
var orxVECTOR_LIGHT_SLATE_GRAY* {.importc: "orxVECTOR_LIGHT_SLATE_GRAY".}: orxVECTOR
var orxVECTOR_LIGHT_SLATE_GREY* {.importc: "orxVECTOR_LIGHT_SLATE_GREY".}: orxVECTOR
var orxVECTOR_LIGHT_STEEL_BLUE* {.importc: "orxVECTOR_LIGHT_STEEL_BLUE".}: orxVECTOR
var orxVECTOR_LIGHT_YELLOW* {.importc: "orxVECTOR_LIGHT_YELLOW".}: orxVECTOR
var orxVECTOR_LIME* {.importc: "orxVECTOR_LIME".}: orxVECTOR
var orxVECTOR_LIME_GREEN* {.importc: "orxVECTOR_LIME_GREEN".}: orxVECTOR
var orxVECTOR_LINEN* {.importc: "orxVECTOR_LINEN".}: orxVECTOR
var orxVECTOR_MAGENTA* {.importc: "orxVECTOR_MAGENTA".}: orxVECTOR
var orxVECTOR_MAROON* {.importc: "orxVECTOR_MAROON".}: orxVECTOR
var orxVECTOR_MEDIUM_AQUA_MARINE* {.importc: "orxVECTOR_MEDIUM_AQUA_MARINE".}: orxVECTOR
var orxVECTOR_MEDIUM_BLUE* {.importc: "orxVECTOR_MEDIUM_BLUE".}: orxVECTOR
var orxVECTOR_MEDIUM_ORCHID* {.importc: "orxVECTOR_MEDIUM_ORCHID".}: orxVECTOR
var orxVECTOR_MEDIUM_PURPLE* {.importc: "orxVECTOR_MEDIUM_PURPLE".}: orxVECTOR
var orxVECTOR_MEDIUM_SEA_GREEN* {.importc: "orxVECTOR_MEDIUM_SEA_GREEN".}: orxVECTOR
var orxVECTOR_MEDIUM_SLATE_BLUE* {.importc: "orxVECTOR_MEDIUM_SLATE_BLUE".}: orxVECTOR
var orxVECTOR_MEDIUM_SPRING_GREEN* {.importc: "orxVECTOR_MEDIUM_SPRING_GREEN".}: orxVECTOR
var orxVECTOR_MEDIUM_TURQUOISE* {.importc: "orxVECTOR_MEDIUM_TURQUOISE".}: orxVECTOR
var orxVECTOR_MEDIUM_VIOLET_RED* {.importc: "orxVECTOR_MEDIUM_VIOLET_RED".}: orxVECTOR
var orxVECTOR_MIDNIGHT_BLUE* {.importc: "orxVECTOR_MIDNIGHT_BLUE".}: orxVECTOR
var orxVECTOR_MINT_CREAM* {.importc: "orxVECTOR_MINT_CREAM".}: orxVECTOR
var orxVECTOR_MISTY_ROSE* {.importc: "orxVECTOR_MISTY_ROSE".}: orxVECTOR
var orxVECTOR_MOCCASIN* {.importc: "orxVECTOR_MOCCASIN".}: orxVECTOR
var orxVECTOR_NAVAJO_WHITE* {.importc: "orxVECTOR_NAVAJO_WHITE".}: orxVECTOR
var orxVECTOR_NAVY* {.importc: "orxVECTOR_NAVY".}: orxVECTOR
var orxVECTOR_OLD_LACE* {.importc: "orxVECTOR_OLD_LACE".}: orxVECTOR
var orxVECTOR_OLIVE* {.importc: "orxVECTOR_OLIVE".}: orxVECTOR
var orxVECTOR_OLIVE_DRAB* {.importc: "orxVECTOR_OLIVE_DRAB".}: orxVECTOR
var orxVECTOR_ORANGE* {.importc: "orxVECTOR_ORANGE".}: orxVECTOR
var orxVECTOR_ORANGE_RED* {.importc: "orxVECTOR_ORANGE_RED".}: orxVECTOR
var orxVECTOR_ORCHID* {.importc: "orxVECTOR_ORCHID".}: orxVECTOR
var orxVECTOR_PALE_GOLDEN_ROD* {.importc: "orxVECTOR_PALE_GOLDEN_ROD".}: orxVECTOR
var orxVECTOR_PALE_GREEN* {.importc: "orxVECTOR_PALE_GREEN".}: orxVECTOR
var orxVECTOR_PALE_TURQUOISE* {.importc: "orxVECTOR_PALE_TURQUOISE".}: orxVECTOR
var orxVECTOR_PALE_VIOLET_RED* {.importc: "orxVECTOR_PALE_VIOLET_RED".}: orxVECTOR
var orxVECTOR_PAPAYA_WHIP* {.importc: "orxVECTOR_PAPAYA_WHIP".}: orxVECTOR
var orxVECTOR_PEACH_PUFF* {.importc: "orxVECTOR_PEACH_PUFF".}: orxVECTOR
var orxVECTOR_PERU* {.importc: "orxVECTOR_PERU".}: orxVECTOR
var orxVECTOR_PINK* {.importc: "orxVECTOR_PINK".}: orxVECTOR
var orxVECTOR_PLUM* {.importc: "orxVECTOR_PLUM".}: orxVECTOR
var orxVECTOR_POWDER_BLUE* {.importc: "orxVECTOR_POWDER_BLUE".}: orxVECTOR
var orxVECTOR_PURPLE* {.importc: "orxVECTOR_PURPLE".}: orxVECTOR
var orxVECTOR_REBECCA_PURPLE* {.importc: "orxVECTOR_REBECCA_PURPLE".}: orxVECTOR
var orxVECTOR_RED* {.importc: "orxVECTOR_RED".}: orxVECTOR
var orxVECTOR_ROSY_BROWN* {.importc: "orxVECTOR_ROSY_BROWN".}: orxVECTOR
var orxVECTOR_ROYAL_BLUE* {.importc: "orxVECTOR_ROYAL_BLUE".}: orxVECTOR
var orxVECTOR_SADDLE_BROWN* {.importc: "orxVECTOR_SADDLE_BROWN".}: orxVECTOR
var orxVECTOR_SALMON* {.importc: "orxVECTOR_SALMON".}: orxVECTOR
var orxVECTOR_SANDY_BROWN* {.importc: "orxVECTOR_SANDY_BROWN".}: orxVECTOR
var orxVECTOR_SEA_GREEN* {.importc: "orxVECTOR_SEA_GREEN".}: orxVECTOR
var orxVECTOR_SEA_SHELL* {.importc: "orxVECTOR_SEA_SHELL".}: orxVECTOR
var orxVECTOR_SIENNA* {.importc: "orxVECTOR_SIENNA".}: orxVECTOR
var orxVECTOR_SILVER* {.importc: "orxVECTOR_SILVER".}: orxVECTOR
var orxVECTOR_SKY_BLUE* {.importc: "orxVECTOR_SKY_BLUE".}: orxVECTOR
var orxVECTOR_SLATE_BLUE* {.importc: "orxVECTOR_SLATE_BLUE".}: orxVECTOR
var orxVECTOR_SLATE_GRAY* {.importc: "orxVECTOR_SLATE_GRAY".}: orxVECTOR
var orxVECTOR_SLATE_GREY* {.importc: "orxVECTOR_SLATE_GREY".}: orxVECTOR
var orxVECTOR_SNOW* {.importc: "orxVECTOR_SNOW".}: orxVECTOR
var orxVECTOR_SPRING_GREEN* {.importc: "orxVECTOR_SPRING_GREEN".}: orxVECTOR
var orxVECTOR_STEEL_BLUE* {.importc: "orxVECTOR_STEEL_BLUE".}: orxVECTOR
var orxVECTOR_TAN* {.importc: "orxVECTOR_TAN".}: orxVECTOR
var orxVECTOR_TEAL* {.importc: "orxVECTOR_TEAL".}: orxVECTOR
var orxVECTOR_THISTLE* {.importc: "orxVECTOR_THISTLE".}: orxVECTOR
var orxVECTOR_TOMATO* {.importc: "orxVECTOR_TOMATO".}: orxVECTOR
var orxVECTOR_TURQUOISE* {.importc: "orxVECTOR_TURQUOISE".}: orxVECTOR
var orxVECTOR_VIOLET* {.importc: "orxVECTOR_VIOLET".}: orxVECTOR
var orxVECTOR_WHEAT* {.importc: "orxVECTOR_WHEAT".}: orxVECTOR
var orxVECTOR_WHITE* {.importc: "orxVECTOR_WHITE".}: orxVECTOR
var orxVECTOR_WHITE_SMOKE* {.importc: "orxVECTOR_WHITE_SMOKE".}: orxVECTOR
var orxVECTOR_YELLOW* {.importc: "orxVECTOR_YELLOW".}: orxVECTOR
var orxVECTOR_YELLOW_GREEN* {.importc: "orxVECTOR_YELLOW_GREEN".}: orxVECTOR
proc systemSetup*(): void {.cdecl, importc: "orxSystem_Setup".}
proc systemInit*(): orxSTATUS {.cdecl, importc: "orxSystem_Init".}
proc systemExit*(): void {.cdecl, importc: "orxSystem_Exit".}
proc getTime*(): orxDOUBLE {.cdecl, importc: "orxSystem_GetTime".}
proc getRealTime*(): orxU64 {.cdecl, importc: "orxSystem_GetRealTime".}
proc getSystemTime*(): orxDOUBLE {.cdecl, importc: "orxSystem_GetSystemTime".}
proc delay*(internal_fSeconds: orxFLOAT): void {.cdecl,
    importc: "orxSystem_Delay".}
proc getVersion*(internal_pstVersion: ptr orxVERSION): ptr orxVERSION {.cdecl,
    importc: "orxSystem_GetVersion".}
proc getVersionString*(): cstring {.cdecl, importc: "orxSystem_GetVersionString".}
proc getVersionFullString*(): cstring {.cdecl, importc: "orxSystem_GetVersionFullString".}
proc getVersionNumeric*(): orxU32 {.cdecl,
                                    importc: "orxSystem_GetVersionNumeric".}
proc getClipboard*(): cstring {.cdecl, importc: "orxSystem_GetClipboard".}
proc setClipboard*(internal_zValue: cstring): orxSTATUS {.cdecl,
    importc: "orxSystem_SetClipboard".}
proc printUTF8Character*(internal_zDstString: cstring; internal_u32Size: orxU32;
                         internal_u32CharacterCodePoint: orxU32): orxU32 {.
    cdecl, importc: "orxString_PrintUTF8Character".}
proc getFirstCharacterCodePoint*(internal_zString: cstring;
                                 internal_pzRemaining: ptr cstring): orxU32 {.
    cdecl, importc: "orxString_GetFirstCharacterCodePoint".}
proc stringSetup*(): void {.cdecl, importc: "orxString_Setup".}
proc stringInit*(): orxSTATUS {.cdecl, importc: "orxString_Init".}
proc stringExit*(): void {.cdecl, importc: "orxString_Exit".}
proc nHash*(internal_zString: cstring; internal_u32CharNumber: orxU32): orxSTRINGID {.
    cdecl, importc: "orxString_NHash".}
proc getID*(internal_zString: cstring): orxSTRINGID {.cdecl,
    importc: "orxString_GetID".}
proc getFromID*(internal_stID: orxSTRINGID): cstring {.cdecl,
    importc: "orxString_GetFromID".}
proc store*(internal_zString: cstring): cstring {.cdecl,
    importc: "orxString_Store".}
proc clockSetup*(): void {.cdecl, importc: "orxClock_Setup".}
proc clockInit*(): orxSTATUS {.cdecl, importc: "orxClock_Init".}
proc clockExit*(): void {.cdecl, importc: "orxClock_Exit".}
proc clockUpdate*(): orxSTATUS {.cdecl, importc: "orxClock_Update".}
proc clockCreate*(internal_fTickSize: orxFLOAT): ptr orxCLOCK {.cdecl,
    importc: "orxClock_Create".}
proc clockCreateFromConfig*(internal_zConfigID: cstring): ptr orxCLOCK {.cdecl,
    importc: "orxClock_CreateFromConfig".}
proc clockDelete*(internal_pstClock: ptr orxCLOCK): orxSTATUS {.cdecl,
    importc: "orxClock_Delete".}
proc resync*(internal_pstClock: ptr orxCLOCK): orxSTATUS {.cdecl,
    importc: "orxClock_Resync".}
proc resyncAll*(): orxSTATUS {.cdecl, importc: "orxClock_ResyncAll".}
proc restart*(internal_pstClock: ptr orxCLOCK): orxSTATUS {.cdecl,
    importc: "orxClock_Restart".}
proc pause*(internal_pstClock: ptr orxCLOCK; internal_bPause: orxBOOL): void {.
    cdecl, importc: "orxClock_Pause".}
proc isPaused*(internal_pstClock: ptr orxCLOCK): orxBOOL {.cdecl,
    importc: "orxClock_IsPaused".}
proc getInfo*(internal_pstClock: ptr orxCLOCK): ptr orxCLOCK_INFO {.cdecl,
    importc: "orxClock_GetInfo".}
proc getFromInfo*(internal_pstClockInfo: ptr orxCLOCK_INFO): ptr orxCLOCK {.
    cdecl, importc: "orxClock_GetFromInfo".}
proc setModifier*(internal_pstClock: ptr orxCLOCK;
                  internal_eModifier: orxCLOCK_MODIFIER;
                  internal_fValue: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxClock_SetModifier".}
proc getModifier*(internal_pstClock: ptr orxCLOCK;
                  internal_eModifier: orxCLOCK_MODIFIER): orxFLOAT {.cdecl,
    importc: "orxClock_GetModifier".}
proc setTickSize*(internal_pstClock: ptr orxCLOCK; internal_fTickSize: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxClock_SetTickSize".}
proc clockRegister*(internal_pstClock: ptr orxCLOCK;
                    internal_pfnCallback: orxCLOCK_FUNCTION;
                    internal_pContext: pointer;
                    internal_eModuleID: orxMODULE_ID;
                    internal_ePriority: orxCLOCK_PRIORITY): orxSTATUS {.cdecl,
    importc: "orxClock_Register".}
proc unregister*(internal_pstClock: ptr orxCLOCK;
                 internal_pfnCallback: orxCLOCK_FUNCTION): orxSTATUS {.cdecl,
    importc: "orxClock_Unregister".}
proc getContext*(internal_pstClock: ptr orxCLOCK;
                 internal_pfnCallback: orxCLOCK_FUNCTION): pointer {.cdecl,
    importc: "orxClock_GetContext".}
proc setContext*(internal_pstClock: ptr orxCLOCK;
                 internal_pfnCallback: orxCLOCK_FUNCTION;
                 internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxClock_SetContext".}
proc clockGet*(internal_zName: cstring): ptr orxCLOCK {.cdecl,
    importc: "orxClock_Get".}
proc getName*(internal_pstClock: ptr orxCLOCK): cstring {.cdecl,
    importc: "orxClock_GetName".}
proc addTimer*(internal_pstClock: ptr orxCLOCK;
               internal_pfnCallback: orxCLOCK_FUNCTION;
               internal_fDelay: orxFLOAT; internal_s32Repetition: orxS32;
               internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxClock_AddTimer".}
proc removeTimer*(internal_pstClock: ptr orxCLOCK;
                  internal_pfnCallback: orxCLOCK_FUNCTION;
                  internal_fDelay: orxFLOAT; internal_pContext: pointer): orxSTATUS {.
    cdecl, importc: "orxClock_RemoveTimer".}
proc addGlobalTimer*(internal_pfnCallback: orxCLOCK_FUNCTION;
                     internal_fDelay: orxFLOAT; internal_s32Repetition: orxS32;
                     internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxClock_AddGlobalTimer".}
proc removeGlobalTimer*(internal_pfnCallback: orxCLOCK_FUNCTION;
                        internal_fDelay: orxFLOAT; internal_pContext: pointer): orxSTATUS {.
    cdecl, importc: "orxClock_RemoveGlobalTimer".}
proc clean*(internal_pstList: ptr orxLINKLIST): orxSTATUS {.cdecl,
    importc: "orxLinkList_Clean".}
proc addStart*(internal_pstList: ptr orxLINKLIST;
               internal_pstNode: ptr orxLINKLIST_NODE): orxSTATUS {.cdecl,
    importc: "orxLinkList_AddStart".}
proc addEnd*(internal_pstList: ptr orxLINKLIST;
             internal_pstNode: ptr orxLINKLIST_NODE): orxSTATUS {.cdecl,
    importc: "orxLinkList_AddEnd".}
proc addBefore*(internal_pstRefNode: ptr orxLINKLIST_NODE;
                internal_pstNode: ptr orxLINKLIST_NODE): orxSTATUS {.cdecl,
    importc: "orxLinkList_AddBefore".}
proc addAfter*(internal_pstRefNode: ptr orxLINKLIST_NODE;
               internal_pstNode: ptr orxLINKLIST_NODE): orxSTATUS {.cdecl,
    importc: "orxLinkList_AddAfter".}
proc remove*(internal_pstNode: ptr orxLINKLIST_NODE): orxSTATUS {.cdecl,
    importc: "orxLinkList_Remove".}
proc clean*(internal_pstTree: ptr orxTREE): orxSTATUS {.cdecl,
    importc: "orxTree_Clean".}
proc addRoot*(internal_pstTree: ptr orxTREE; internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.
    cdecl, importc: "orxTree_AddRoot".}
proc addParent*(internal_pstRefNode: ptr orxTREE_NODE;
                internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.cdecl,
    importc: "orxTree_AddParent".}
proc addSibling*(internal_pstRefNode: ptr orxTREE_NODE;
                 internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.cdecl,
    importc: "orxTree_AddSibling".}
proc addChild*(internal_pstRefNode: ptr orxTREE_NODE;
               internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.cdecl,
    importc: "orxTree_AddChild".}
proc moveAsChild*(internal_pstRefNode: ptr orxTREE_NODE;
                  internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.cdecl,
    importc: "orxTree_MoveAsChild".}
proc remove*(internal_pstNode: ptr orxTREE_NODE): orxSTATUS {.cdecl,
    importc: "orxTree_Remove".}
proc structureSetup*(): void {.cdecl, importc: "orxStructure_Setup".}
proc structureInit*(): orxSTATUS {.cdecl, importc: "orxStructure_Init".}
proc structureExit*(): void {.cdecl, importc: "orxStructure_Exit".}
proc structureRegister*(internal_eStructureID: orxSTRUCTURE_ID;
                        internal_eStorageType: orxSTRUCTURE_STORAGE_TYPE;
                        internal_eMemoryType: orxMEMORY_TYPE;
                        internal_u32Size: orxU32; internal_u32BankSize: orxU32;
                        internal_pfnUpdate: orxSTRUCTURE_UPDATE_FUNCTION): orxSTATUS {.
    cdecl, importc: "orxStructure_Register".}
proc unregister*(internal_eStructureID: orxSTRUCTURE_ID): orxSTATUS {.cdecl,
    importc: "orxStructure_Unregister".}
proc structureCreate*(internal_eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE {.
    cdecl, importc: "orxStructure_Create".}
proc structureDelete*(internal_pStructure: pointer): orxSTATUS {.cdecl,
    importc: "orxStructure_Delete".}
proc getStorageType*(internal_eStructureID: orxSTRUCTURE_ID): orxSTRUCTURE_STORAGE_TYPE {.
    cdecl, importc: "orxStructure_GetStorageType".}
proc getCount*(internal_eStructureID: orxSTRUCTURE_ID): orxU32 {.cdecl,
    importc: "orxStructure_GetCount".}
proc structureUpdate*(internal_pStructure: pointer; internal_phCaller: pointer;
                      internal_pstClockInfo: ptr orxCLOCK_INFO): orxSTATUS {.
    cdecl, importc: "orxStructure_Update".}
proc structureGet*(internal_u64GUID: orxU64): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_Get".}
proc getOwner*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetOwner".}
proc setOwner*(internal_pStructure: pointer; internal_pOwner: pointer): orxSTATUS {.
    cdecl, importc: "orxStructure_SetOwner".}
proc getFirst*(internal_eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE {.
    cdecl, importc: "orxStructure_GetFirst".}
proc getLast*(internal_eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetLast".}
proc getParent*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetParent".}
proc getChild*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetChild".}
proc getSibling*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetSibling".}
proc getPrevious*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetPrevious".}
proc getNext*(internal_pStructure: pointer): ptr orxSTRUCTURE {.cdecl,
    importc: "orxStructure_GetNext".}
proc setParent*(internal_pStructure: pointer; internal_phParent: pointer): orxSTATUS {.
    cdecl, importc: "orxStructure_SetParent".}
proc logAll*(internal_bPrivate: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxStructure_LogAll".}
proc animSetup*(): void {.cdecl, importc: "orxAnim_Setup".}
proc animInit*(): orxSTATUS {.cdecl, importc: "orxAnim_Init".}
proc animExit*(): void {.cdecl, importc: "orxAnim_Exit".}
proc animCreate*(internal_u32Flags: orxU32; internal_u32KeyNumber: orxU32;
                 internal_u32EventNumber: orxU32): ptr orxANIM {.cdecl,
    importc: "orxAnim_Create".}
proc animDelete*(internal_pstAnim: ptr orxANIM): orxSTATUS {.cdecl,
    importc: "orxAnim_Delete".}
proc addKey*(internal_pstAnim: ptr orxANIM; internal_pstData: ptr orxSTRUCTURE;
             internal_fTimeStamp: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxAnim_AddKey".}
proc removeLastKey*(internal_pstAnim: ptr orxANIM): orxSTATUS {.cdecl,
    importc: "orxAnim_RemoveLastKey".}
proc removeAllKeys*(internal_pstAnim: ptr orxANIM): void {.cdecl,
    importc: "orxAnim_RemoveAllKeys".}
proc addEvent*(internal_pstAnim: ptr orxANIM; internal_zEventName: cstring;
               internal_fTimeStamp: orxFLOAT; internal_fValue: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxAnim_AddEvent".}
proc removeLastEvent*(internal_pstAnim: ptr orxANIM): orxSTATUS {.cdecl,
    importc: "orxAnim_RemoveLastEvent".}
proc removeAllEvents*(internal_pstAnim: ptr orxANIM): void {.cdecl,
    importc: "orxAnim_RemoveAllEvents".}
proc getNextEvent*(internal_pstAnim: ptr orxANIM;
                   internal_pstEvent: ptr orxANIM_CUSTOM_EVENT): ptr orxANIM_CUSTOM_EVENT {.
    cdecl, importc: "orxAnim_GetNextEvent".}
proc getEventAfter*(internal_pstAnim: ptr orxANIM; internal_fTimeStamp: orxFLOAT): ptr orxANIM_CUSTOM_EVENT {.
    cdecl, importc: "orxAnim_GetEventAfter".}
proc getKey*(internal_pstAnim: ptr orxANIM; internal_fTimeStamp: orxFLOAT): orxU32 {.
    cdecl, importc: "orxAnim_GetKey".}
proc getKeyData*(internal_pstAnim: ptr orxANIM; internal_u32Index: orxU32): ptr orxSTRUCTURE {.
    cdecl, importc: "orxAnim_GetKeyData".}
proc getKeyStorageSize*(internal_pstAnim: ptr orxANIM): orxU32 {.cdecl,
    importc: "orxAnim_GetKeyStorageSize".}
proc getKeyCount*(internal_pstAnim: ptr orxANIM): orxU32 {.cdecl,
    importc: "orxAnim_GetKeyCount".}
proc getEventStorageSize*(internal_pstAnim: ptr orxANIM): orxU32 {.cdecl,
    importc: "orxAnim_GetEventStorageSize".}
proc getEventCount*(internal_pstAnim: ptr orxANIM): orxU32 {.cdecl,
    importc: "orxAnim_GetEventCount".}
proc getLength*(internal_pstAnim: ptr orxANIM): orxFLOAT {.cdecl,
    importc: "orxAnim_GetLength".}
proc getName*(internal_pstAnim: ptr orxANIM): cstring {.cdecl,
    importc: "orxAnim_GetName".}
proc animSetSetup*(): void {.cdecl, importc: "orxAnimSet_Setup".}
proc animSetInit*(): orxSTATUS {.cdecl, importc: "orxAnimSet_Init".}
proc animSetExit*(): void {.cdecl, importc: "orxAnimSet_Exit".}
proc animSetCreate*(internal_u32Size: orxU32): ptr orxANIMSET {.cdecl,
    importc: "orxAnimSet_Create".}
proc animSetCreateFromConfig*(internal_zConfigID: cstring): ptr orxANIMSET {.
    cdecl, importc: "orxAnimSet_CreateFromConfig".}
proc animSetDelete*(internal_pstAnimSet: ptr orxANIMSET): orxSTATUS {.cdecl,
    importc: "orxAnimSet_Delete".}
proc animSetClearCache*(): orxSTATUS {.cdecl, importc: "orxAnimSet_ClearCache".}
proc addReference*(internal_pstAnimSet: ptr orxANIMSET): void {.cdecl,
    importc: "orxAnimSet_AddReference".}
proc removeReference*(internal_pstAnimSet: ptr orxANIMSET): void {.cdecl,
    importc: "orxAnimSet_RemoveReference".}
proc cloneLinkTable*(internal_pstAnimSet: ptr orxANIMSET): ptr orxANIMSET_LINK_TABLE {.
    cdecl, importc: "orxAnimSet_CloneLinkTable".}
proc deleteLinkTable*(internal_pstLinkTable: ptr orxANIMSET_LINK_TABLE): void {.
    cdecl, importc: "orxAnimSet_DeleteLinkTable".}
proc addAnim*(internal_pstAnimSet: ptr orxANIMSET; internal_pstAnim: ptr orxANIM): orxU32 {.
    cdecl, importc: "orxAnimSet_AddAnim".}
proc removeAnim*(internal_pstAnimSet: ptr orxANIMSET; internal_u32AnimID: orxU32): orxSTATUS {.
    cdecl, importc: "orxAnimSet_RemoveAnim".}
proc removeAllAnims*(internal_pstAnimSet: ptr orxANIMSET): orxSTATUS {.cdecl,
    importc: "orxAnimSet_RemoveAllAnims".}
proc addLink*(internal_pstAnimSet: ptr orxANIMSET; internal_u32SrcAnim: orxU32;
              internal_u32DstAnim: orxU32): orxU32 {.cdecl,
    importc: "orxAnimSet_AddLink".}
proc removeLink*(internal_pstAnimSet: ptr orxANIMSET; internal_u32LinkID: orxU32): orxSTATUS {.
    cdecl, importc: "orxAnimSet_RemoveLink".}
proc getLink*(internal_pstAnimSet: ptr orxANIMSET; internal_u32SrcAnim: orxU32;
              internal_u32DstAnim: orxU32): orxU32 {.cdecl,
    importc: "orxAnimSet_GetLink".}
proc setLinkProperty*(internal_pstAnimSet: ptr orxANIMSET;
                      internal_u32LinkID: orxU32; internal_u32Property: orxU32;
                      internal_u32Value: orxU32): orxSTATUS {.cdecl,
    importc: "orxAnimSet_SetLinkProperty".}
proc getLinkProperty*(internal_pstAnimSet: ptr orxANIMSET;
                      internal_u32LinkID: orxU32; internal_u32Property: orxU32): orxU32 {.
    cdecl, importc: "orxAnimSet_GetLinkProperty".}
proc computeAnim*(internal_pstAnimSet: ptr orxANIMSET;
                  internal_u32SrcAnim: orxU32; internal_u32DstAnim: orxU32;
                  internal_pfTime: ptr orxFLOAT;
                  internal_pstLinkTable: ptr orxANIMSET_LINK_TABLE;
                  internal_pbCut: ptr orxBOOL;
                  internal_pbClearTarget: ptr orxBOOL): orxU32 {.cdecl,
    importc: "orxAnimSet_ComputeAnim".}
proc findNextAnim*(internal_pstAnimSet: ptr orxANIMSET;
                   internal_u32SrcAnim: orxU32; internal_u32DstAnim: orxU32): orxU32 {.
    cdecl, importc: "orxAnimSet_FindNextAnim".}
proc getAnim*(internal_pstAnimSet: ptr orxANIMSET; internal_u32AnimID: orxU32): ptr orxANIM {.
    cdecl, importc: "orxAnimSet_GetAnim".}
proc getAnimStorageSize*(internal_pstAnimSet: ptr orxANIMSET): orxU32 {.cdecl,
    importc: "orxAnimSet_GetAnimStorageSize".}
proc getAnimCount*(internal_pstAnimSet: ptr orxANIMSET): orxU32 {.cdecl,
    importc: "orxAnimSet_GetAnimCount".}
proc getAnimIDFromName*(internal_pstAnimSet: ptr orxANIMSET;
                        internal_zAnimName: cstring): orxU32 {.cdecl,
    importc: "orxAnimSet_GetAnimIDFromName".}
proc getName*(internal_pstAnimSet: ptr orxANIMSET): cstring {.cdecl,
    importc: "orxAnimSet_GetName".}
proc animPointerSetup*(): void {.cdecl, importc: "orxAnimPointer_Setup".}
proc animPointerInit*(): orxSTATUS {.cdecl, importc: "orxAnimPointer_Init".}
proc animPointerExit*(): void {.cdecl, importc: "orxAnimPointer_Exit".}
proc animPointerCreate*(internal_pstAnimSet: ptr orxANIMSET): ptr orxANIMPOINTER {.
    cdecl, importc: "orxAnimPointer_Create".}
proc animPointerCreateFromConfig*(internal_zConfigID: cstring): ptr orxANIMPOINTER {.
    cdecl, importc: "orxAnimPointer_CreateFromConfig".}
proc animPointerDelete*(internal_pstAnimPointer: ptr orxANIMPOINTER): orxSTATUS {.
    cdecl, importc: "orxAnimPointer_Delete".}
proc getAnimSet*(internal_pstAnimPointer: ptr orxANIMPOINTER): ptr orxANIMSET {.
    cdecl, importc: "orxAnimPointer_GetAnimSet".}
proc getCurrentAnim*(internal_pstAnimPointer: ptr orxANIMPOINTER): orxU32 {.
    cdecl, importc: "orxAnimPointer_GetCurrentAnim".}
proc getTargetAnim*(internal_pstAnimPointer: ptr orxANIMPOINTER): orxU32 {.
    cdecl, importc: "orxAnimPointer_GetTargetAnim".}
proc getCurrentAnimName*(internal_pstAnimPointer: ptr orxANIMPOINTER): cstring {.
    cdecl, importc: "orxAnimPointer_GetCurrentAnimName".}
proc getTargetAnimName*(internal_pstAnimPointer: ptr orxANIMPOINTER): cstring {.
    cdecl, importc: "orxAnimPointer_GetTargetAnimName".}
proc getCurrentAnimData*(internal_pstAnimPointer: ptr orxANIMPOINTER): ptr orxSTRUCTURE {.
    cdecl, importc: "orxAnimPointer_GetCurrentAnimData".}
proc getTime*(internal_pstAnimPointer: ptr orxANIMPOINTER): orxFLOAT {.cdecl,
    importc: "orxAnimPointer_GetTime".}
proc getFrequency*(internal_pstAnimPointer: ptr orxANIMPOINTER): orxFLOAT {.
    cdecl, importc: "orxAnimPointer_GetFrequency".}
proc setCurrentAnim*(internal_pstAnimPointer: ptr orxANIMPOINTER;
                     internal_u32AnimID: orxU32): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetCurrentAnim".}
proc setTargetAnim*(internal_pstAnimPointer: ptr orxANIMPOINTER;
                    internal_u32AnimID: orxU32): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetTargetAnim".}
proc setCurrentAnimFromName*(internal_pstAnimPointer: ptr orxANIMPOINTER;
                             internal_zAnimName: cstring): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetCurrentAnimFromName".}
proc setTargetAnimFromName*(internal_pstAnimPointer: ptr orxANIMPOINTER;
                            internal_zAnimName: cstring): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetTargetAnimFromName".}
proc setTime*(internal_pstAnimPointer: ptr orxANIMPOINTER;
              internal_fTime: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetTime".}
proc setFrequency*(internal_pstAnimPointer: ptr orxANIMPOINTER;
                   internal_fFrequency: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_SetFrequency".}
proc pause*(internal_pstAnimPointer: ptr orxANIMPOINTER;
            internal_bPause: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxAnimPointer_Pause".}
proc commandSetup*(): void {.cdecl, importc: "orxCommand_Setup".}
proc commandInit*(): orxSTATUS {.cdecl, importc: "orxCommand_Init".}
proc commandExit*(): void {.cdecl, importc: "orxCommand_Exit".}
proc commandRegister*(internal_zCommand: cstring;
                      internal_pfnFunction: orxCOMMAND_FUNCTION;
                      internal_u32RequiredParamNumber: orxU32;
                      internal_u32OptionalParamNumber: orxU32;
                      internal_astParamList: ptr orxCOMMAND_VAR_DEF;
                      internal_pstResult: ptr orxCOMMAND_VAR_DEF): orxSTATUS {.
    cdecl, importc: "orxCommand_Register".}
proc unregister*(internal_zCommand: cstring): orxSTATUS {.cdecl,
    importc: "orxCommand_Unregister".}
proc isRegistered*(internal_zCommand: cstring): orxBOOL {.cdecl,
    importc: "orxCommand_IsRegistered".}
proc addAlias*(internal_zAlias: cstring; internal_zCommand: cstring;
               internal_zArgs: cstring): orxSTATUS {.cdecl,
    importc: "orxCommand_AddAlias".}
proc removeAlias*(internal_zAlias: cstring): orxSTATUS {.cdecl,
    importc: "orxCommand_RemoveAlias".}
proc isAlias*(internal_zAlias: cstring): orxBOOL {.cdecl,
    importc: "orxCommand_IsAlias".}
proc getPrototype*(internal_zCommand: cstring): cstring {.cdecl,
    importc: "orxCommand_GetPrototype".}
proc getNext*(internal_zBase: cstring; internal_zPrevious: cstring;
              internal_pu32CommonLength: ptr orxU32): cstring {.cdecl,
    importc: "orxCommand_GetNext".}
proc evaluate*(internal_zCommandLine: cstring;
               internal_pstResult: ptr orxCOMMAND_VAR): ptr orxCOMMAND_VAR {.
    cdecl, importc: "orxCommand_Evaluate".}
proc evaluateWithGUID*(internal_zCommandLine: cstring; internal_u64GUID: orxU64;
                       internal_pstResult: ptr orxCOMMAND_VAR): ptr orxCOMMAND_VAR {.
    cdecl, importc: "orxCommand_EvaluateWithGUID".}
proc execute*(internal_zCommand: cstring; internal_u32ArgNumber: orxU32;
              internal_astArgList: ptr orxCOMMAND_VAR;
              internal_pstResult: ptr orxCOMMAND_VAR): ptr orxCOMMAND_VAR {.
    cdecl, importc: "orxCommand_Execute".}
proc parseNumericalArguments*(internal_u32ArgNumber: orxU32;
                              internal_astArgList: ptr orxCOMMAND_VAR;
                              internal_astOperandList: ptr orxCOMMAND_VAR): orxSTATUS {.
    cdecl, importc: "orxCommand_ParseNumericalArguments".}
proc printVar*(internal_zDstString: cstring; internal_u32Size: orxU32;
               internal_pstVar: ptr orxCOMMAND_VAR): orxU32 {.cdecl,
    importc: "orxCommand_PrintVar".}
proc configSetup*(): void {.cdecl, importc: "orxConfig_Setup".}
proc configInit*(): orxSTATUS {.cdecl, importc: "orxConfig_Init".}
proc configExit*(): void {.cdecl, importc: "orxConfig_Exit".}
proc enableTypoCheck*(internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxConfig_EnableTypoCheck".}
proc isTypoCheckEnabled*(): orxBOOL {.cdecl,
                                      importc: "orxConfig_IsTypoCheckEnabled".}
proc setEncryptionKey*(internal_zEncryptionKey: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_SetEncryptionKey".}
proc getEncryptionKey*(): cstring {.cdecl, importc: "orxConfig_GetEncryptionKey".}
proc setBootstrap*(internal_pfnBootstrap: orxCONFIG_BOOTSTRAP_FUNCTION): orxSTATUS {.
    cdecl, importc: "orxConfig_SetBootstrap".}
proc setBaseName*(internal_zBaseName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_SetBaseName".}
proc getMainFileName*(): cstring {.cdecl, importc: "orxConfig_GetMainFileName".}
proc configLoad*(internal_zFileName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_Load".}
proc loadFromMemory*(internal_acBuffer: cstring; internal_u32BufferSize: orxU32): orxSTATUS {.
    cdecl, importc: "orxConfig_LoadFromMemory".}
proc reloadHistory*(): orxSTATUS {.cdecl, importc: "orxConfig_ReloadHistory".}
proc save*(internal_zFileName: cstring; internal_bUseEncryption: orxBOOL;
           internal_pfnSaveCallback: orxCONFIG_SAVE_FUNCTION): orxSTATUS {.
    cdecl, importc: "orxConfig_Save".}
proc copyFile*(internal_zDstFileName: cstring; internal_zSrcFileName: cstring;
               internal_zEncryptionKey: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_CopyFile".}
proc mergeFiles*(internal_zDstFileName: cstring;
                 internal_azSrcFileName: ptr cstring;
                 internal_u32Number: orxU32; internal_zEncryptionKey: cstring): orxSTATUS {.
    cdecl, importc: "orxConfig_MergeFiles".}
proc selectSection*(internal_zSectionName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_SelectSection".}
proc renameSection*(internal_zSectionName: cstring;
                    internal_zNewSectionName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_RenameSection".}
proc getOrigin*(internal_zSectionName: cstring): cstring {.cdecl,
    importc: "orxConfig_GetOrigin".}
proc getOriginID*(internal_zSectionName: cstring): orxSTRINGID {.cdecl,
    importc: "orxConfig_GetOriginID".}
proc setParent*(internal_zSectionName: cstring; internal_zParentName: cstring): orxSTATUS {.
    cdecl, importc: "orxConfig_SetParent".}
proc getParent*(internal_zSectionName: cstring): cstring {.cdecl,
    importc: "orxConfig_GetParent".}
proc setDefaultParent*(internal_zSectionName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_SetDefaultParent".}
proc getDefaultParent*(): cstring {.cdecl, importc: "orxConfig_GetDefaultParent".}
proc getCurrentSection*(): cstring {.cdecl,
                                     importc: "orxConfig_GetCurrentSection".}
proc pushSection*(internal_zSectionName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_PushSection".}
proc popSection*(): orxSTATUS {.cdecl, importc: "orxConfig_PopSection".}
proc hasSection*(internal_zSectionName: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_HasSection".}
proc protectSection*(internal_zSectionName: cstring; internal_bProtect: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxConfig_ProtectSection".}
proc getSectionCount*(): orxU32 {.cdecl, importc: "orxConfig_GetSectionCount".}
proc getSection*(internal_u32SectionIndex: orxU32): cstring {.cdecl,
    importc: "orxConfig_GetSection".}
proc clear*(internal_pfnClearCallback: orxCONFIG_CLEAR_FUNCTION): orxSTATUS {.
    cdecl, importc: "orxConfig_Clear".}
proc clearSection*(internal_zSectionName: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_ClearSection".}
proc clearValue*(internal_zKey: cstring): orxSTATUS {.cdecl,
    importc: "orxConfig_ClearValue".}
proc isLocallyInheritedValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsLocallyInheritedValue".}
proc isInheritedValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsInheritedValue".}
proc isRandomValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsRandomValue".}
proc isDynamicValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsDynamicValue".}
proc isCommandValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsCommandValue".}
proc hasValue*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_HasValue".}
proc hasValueNoCheck*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_HasValueNoCheck".}
proc getValueSource*(internal_zKey: cstring): cstring {.cdecl,
    importc: "orxConfig_GetValueSource".}
proc getS32*(internal_zKey: cstring): orxS32 {.cdecl,
    importc: "orxConfig_GetS32".}
proc getU32*(internal_zKey: cstring): orxU32 {.cdecl,
    importc: "orxConfig_GetU32".}
proc getS64*(internal_zKey: cstring): orxS64 {.cdecl,
    importc: "orxConfig_GetS64".}
proc getU64*(internal_zKey: cstring): orxU64 {.cdecl,
    importc: "orxConfig_GetU64".}
proc getFloat*(internal_zKey: cstring): orxFLOAT {.cdecl,
    importc: "orxConfig_GetFloat".}
proc getString*(internal_zKey: cstring): cstring {.cdecl,
    importc: "orxConfig_GetString".}
proc getBool*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_GetBool".}
proc getVector*(internal_zKey: cstring; internal_pvVector: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxConfig_GetVector".}
proc getColorVector*(internal_zKey: cstring;
                     internal_eColorSpace: orxCOLORSPACE;
                     internal_pvVector: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxConfig_GetColorVector".}
proc duplicateRawValue*(internal_zKey: cstring): cstring {.cdecl,
    importc: "orxConfig_DuplicateRawValue".}
proc setS32*(internal_zKey: cstring; internal_s32Value: orxS32): orxSTATUS {.
    cdecl, importc: "orxConfig_SetS32".}
proc setU32*(internal_zKey: cstring; internal_u32Value: orxU32): orxSTATUS {.
    cdecl, importc: "orxConfig_SetU32".}
proc setS64*(internal_zKey: cstring; internal_s64Value: orxS64): orxSTATUS {.
    cdecl, importc: "orxConfig_SetS64".}
proc setU64*(internal_zKey: cstring; internal_u64Value: orxU64): orxSTATUS {.
    cdecl, importc: "orxConfig_SetU64".}
proc setFloat*(internal_zKey: cstring; internal_fValue: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxConfig_SetFloat".}
proc setString*(internal_zKey: cstring; internal_zValue: cstring): orxSTATUS {.
    cdecl, importc: "orxConfig_SetString".}
proc setStringBlock*(internal_zKey: cstring; internal_zValue: cstring): orxSTATUS {.
    cdecl, importc: "orxConfig_SetStringBlock".}
proc setBool*(internal_zKey: cstring; internal_bValue: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxConfig_SetBool".}
proc setVector*(internal_zKey: cstring; internal_pvValue: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxConfig_SetVector".}
proc isList*(internal_zKey: cstring): orxBOOL {.cdecl,
    importc: "orxConfig_IsList".}
proc getListCount*(internal_zKey: cstring): orxS32 {.cdecl,
    importc: "orxConfig_GetListCount".}
proc getListS32*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxS32 {.
    cdecl, importc: "orxConfig_GetListS32".}
proc getListU32*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxU32 {.
    cdecl, importc: "orxConfig_GetListU32".}
proc getListS64*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxS64 {.
    cdecl, importc: "orxConfig_GetListS64".}
proc getListU64*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxU64 {.
    cdecl, importc: "orxConfig_GetListU64".}
proc getListFloat*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxFLOAT {.
    cdecl, importc: "orxConfig_GetListFloat".}
proc getListString*(internal_zKey: cstring; internal_s32ListIndex: orxS32): cstring {.
    cdecl, importc: "orxConfig_GetListString".}
proc getListBool*(internal_zKey: cstring; internal_s32ListIndex: orxS32): orxBOOL {.
    cdecl, importc: "orxConfig_GetListBool".}
proc getListVector*(internal_zKey: cstring; internal_s32ListIndex: orxS32;
                    internal_pvVector: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxConfig_GetListVector".}
proc getListColorVector*(internal_zKey: cstring; internal_s32ListIndex: orxS32;
                         internal_eColorSpace: orxCOLORSPACE;
                         internal_pvVector: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxConfig_GetListColorVector".}
proc setListString*(internal_zKey: cstring;
                    internal_azValue: ptr UncheckedArray[cstring];
                    internal_u32Number: orxU32): orxSTATUS {.cdecl,
    importc: "orxConfig_SetListString".}
proc appendListString*(internal_zKey: cstring;
                       internal_azValue: ptr UncheckedArray[cstring];
                       internal_u32Number: orxU32): orxSTATUS {.cdecl,
    importc: "orxConfig_AppendListString".}
proc getKeyCount*(): orxU32 {.cdecl, importc: "orxConfig_GetKeyCount".}
proc getKey*(internal_u32KeyIndex: orxU32): cstring {.cdecl,
    importc: "orxConfig_GetKey".}
proc internal_registerFunction_DISPLAY*(): void {.cdecl,
    importc: "_registerFunction_DISPLAY".}
proc internal_registerFunction_JOYSTICK*(): void {.cdecl,
    importc: "_registerFunction_JOYSTICK".}
proc internal_registerFunction_KEYBOARD*(): void {.cdecl,
    importc: "_registerFunction_KEYBOARD".}
proc internal_registerFunction_MOUSE*(): void {.cdecl,
    importc: "_registerFunction_MOUSE".}
proc internal_registerFunction_PHYSICS*(): void {.cdecl,
    importc: "_registerFunction_PHYSICS".}
proc internal_registerFunction_RENDER*(): void {.cdecl,
    importc: "_registerFunction_RENDER".}
proc internal_registerFunction_SOUNDSYSTEM*(): void {.cdecl,
    importc: "_registerFunction_SOUNDSYSTEM".}
proc addCoreInfo*(internal_ePluginCoreID: orxPLUGIN_CORE_ID;
                  internal_eModuleID: orxMODULE_ID;
                  internal_astCoreFunction: ptr orxPLUGIN_CORE_FUNCTION;
                  internal_u32CoreFunctionNumber: orxU32): void {.cdecl,
    importc: "orxPlugin_AddCoreInfo".}
proc defaultCoreFunction*(internal_zFunctionName: cstring;
                          internal_zFileName: cstring; internal_u32Line: orxU32): pointer {.
    cdecl, importc: "orxPlugin_DefaultCoreFunction".}
proc bankSetup*(): void {.cdecl, importc: "orxBank_Setup".}
proc bankInit*(): orxSTATUS {.cdecl, importc: "orxBank_Init".}
proc bankExit*(): void {.cdecl, importc: "orxBank_Exit".}
proc bankCreate*(internal_u32Count: orxU32; internal_u32Size: orxU32;
                 internal_u32Flags: orxU32; internal_eMemType: orxMEMORY_TYPE): ptr orxBANK {.
    cdecl, importc: "orxBank_Create".}
proc bankDelete*(internal_pstBank: ptr orxBANK): void {.cdecl,
    importc: "orxBank_Delete".}
proc allocate*(internal_pstBank: ptr orxBANK): pointer {.cdecl,
    importc: "orxBank_Allocate".}
proc allocateIndexed*(internal_pstBank: ptr orxBANK;
                      internal_pu32ItemIndex: ptr orxU32;
                      internal_ppPrevious: ptr pointer): pointer {.cdecl,
    importc: "orxBank_AllocateIndexed".}
proc free*(internal_pstBank: ptr orxBANK; internal_pCell: pointer): void {.
    cdecl, importc: "orxBank_Free".}
proc freeAtIndex*(internal_pstBank: ptr orxBANK; internal_u32Index: orxU32): void {.
    cdecl, importc: "orxBank_FreeAtIndex".}
proc clear*(internal_pstBank: ptr orxBANK): void {.cdecl,
    importc: "orxBank_Clear".}
proc compact*(internal_pstBank: ptr orxBANK): void {.cdecl,
    importc: "orxBank_Compact".}
proc compactAll*(): void {.cdecl, importc: "orxBank_CompactAll".}
proc getNext*(internal_pstBank: ptr orxBANK; internal_pCell: pointer): pointer {.
    cdecl, importc: "orxBank_GetNext".}
proc getIndex*(internal_pstBank: ptr orxBANK; internal_pCell: pointer): orxU32 {.
    cdecl, importc: "orxBank_GetIndex".}
proc getAtIndex*(internal_pstBank: ptr orxBANK; internal_u32Index: orxU32): pointer {.
    cdecl, importc: "orxBank_GetAtIndex".}
proc getCount*(internal_pstBank: ptr orxBANK): orxU32 {.cdecl,
    importc: "orxBank_GetCount".}
proc hashTableCreate*(internal_u32NbKey: orxU32; internal_u32Flags: orxU32;
                      internal_eMemType: orxMEMORY_TYPE): ptr orxHASHTABLE {.
    cdecl, importc: "orxHashTable_Create".}
proc hashTableDelete*(internal_pstHashTable: ptr orxHASHTABLE): orxSTATUS {.
    cdecl, importc: "orxHashTable_Delete".}
proc clear*(internal_pstHashTable: ptr orxHASHTABLE): orxSTATUS {.cdecl,
    importc: "orxHashTable_Clear".}
proc getCount*(internal_pstHashTable: ptr orxHASHTABLE): orxU32 {.cdecl,
    importc: "orxHashTable_GetCount".}
proc hashTableGet*(internal_pstHashTable: ptr orxHASHTABLE;
                   internal_u64Key: orxU64): pointer {.cdecl,
    importc: "orxHashTable_Get".}
proc retrieve*(internal_pstHashTable: ptr orxHASHTABLE; internal_u64Key: orxU64): ptr pointer {.
    cdecl, importc: "orxHashTable_Retrieve".}
proc hashTableSet*(internal_pstHashTable: ptr orxHASHTABLE;
                   internal_u64Key: orxU64; internal_pData: pointer): orxSTATUS {.
    cdecl, importc: "orxHashTable_Set".}
proc add*(internal_pstHashTable: ptr orxHASHTABLE; internal_u64Key: orxU64;
          internal_pData: pointer): orxSTATUS {.cdecl,
    importc: "orxHashTable_Add".}
proc remove*(internal_pstHashTable: ptr orxHASHTABLE; internal_u64Key: orxU64): orxSTATUS {.
    cdecl, importc: "orxHashTable_Remove".}
proc getNext*(internal_pstHashTable: ptr orxHASHTABLE;
              internal_hIterator: orxHANDLE; internal_pu64Key: ptr orxU64;
              internal_ppData: ptr pointer): orxHANDLE {.cdecl,
    importc: "orxHashTable_GetNext".}
proc optimize*(internal_pstHashTable: ptr orxHASHTABLE): orxSTATUS {.cdecl,
    importc: "orxHashTable_Optimize".}
proc displaySetup*(): void {.cdecl, importc: "orxDisplay_Setup".}
proc fromRGBToHSL*(internal_pstDst: ptr orxCOLOR; internal_pstSrc: ptr orxCOLOR): ptr orxCOLOR {.
    cdecl, importc: "orxColor_FromRGBToHSL".}
proc fromHSLToRGB*(internal_pstDst: ptr orxCOLOR; internal_pstSrc: ptr orxCOLOR): ptr orxCOLOR {.
    cdecl, importc: "orxColor_FromHSLToRGB".}
proc fromRGBToHSV*(internal_pstDst: ptr orxCOLOR; internal_pstSrc: ptr orxCOLOR): ptr orxCOLOR {.
    cdecl, importc: "orxColor_FromRGBToHSV".}
proc fromHSVToRGB*(internal_pstDst: ptr orxCOLOR; internal_pstSrc: ptr orxCOLOR): ptr orxCOLOR {.
    cdecl, importc: "orxColor_FromHSVToRGB".}
proc getBlendModeFromString*(internal_zBlendMode: cstring): orxDISPLAY_BLEND_MODE {.
    cdecl, importc: "orxDisplay_GetBlendModeFromString".}
proc displayInit*(): orxSTATUS {.cdecl, importc: "orxDisplay_Init".}
proc displayExit*(): void {.cdecl, importc: "orxDisplay_Exit".}
proc swap*(): orxSTATUS {.cdecl, importc: "orxDisplay_Swap".}
proc getScreenBitmap*(): ptr orxBITMAP {.cdecl,
    importc: "orxDisplay_GetScreenBitmap".}
proc getScreenSize*(internal_pfWidth: ptr orxFLOAT;
                    internal_pfHeight: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxDisplay_GetScreenSize".}
proc createBitmap*(internal_u32Width: orxU32; internal_u32Height: orxU32): ptr orxBITMAP {.
    cdecl, importc: "orxDisplay_CreateBitmap".}
proc deleteBitmap*(internal_pstBitmap: ptr orxBITMAP): void {.cdecl,
    importc: "orxDisplay_DeleteBitmap".}
proc loadBitmap*(internal_zFileName: cstring): ptr orxBITMAP {.cdecl,
    importc: "orxDisplay_LoadBitmap".}
proc saveBitmap*(internal_pstBitmap: ptr orxBITMAP; internal_zFileName: cstring): orxSTATUS {.
    cdecl, importc: "orxDisplay_SaveBitmap".}
proc setTempBitmap*(internal_pstBitmap: ptr orxBITMAP): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetTempBitmap".}
proc getTempBitmap*(): ptr orxBITMAP {.cdecl,
                                       importc: "orxDisplay_GetTempBitmap".}
proc setDestinationBitmaps*(internal_apstBitmapList: ptr ptr orxBITMAP;
                            internal_u32Number: orxU32): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetDestinationBitmaps".}
proc clearBitmap*(internal_pstBitmap: ptr orxBITMAP; internal_stColor: orxRGBA): orxSTATUS {.
    cdecl, importc: "orxDisplay_ClearBitmap".}
proc setBlendMode*(internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxDisplay_SetBlendMode".}
proc setBitmapClipping*(internal_pstBitmap: ptr orxBITMAP;
                        internal_u32TLX: orxU32; internal_u32TLY: orxU32;
                        internal_u32BRX: orxU32; internal_u32BRY: orxU32): orxSTATUS {.
    cdecl, importc: "orxDisplay_SetBitmapClipping".}
proc setBitmapData*(internal_pstBitmap: ptr orxBITMAP;
                    internal_au8Data: ptr orxU8; internal_u32ByteNumber: orxU32): orxSTATUS {.
    cdecl, importc: "orxDisplay_SetBitmapData".}
proc getBitmapData*(internal_pstBitmap: ptr orxBITMAP;
                    internal_au8Data: ptr orxU8; internal_u32ByteNumber: orxU32): orxSTATUS {.
    cdecl, importc: "orxDisplay_GetBitmapData".}
proc setPartialBitmapData*(internal_pstBitmap: ptr orxBITMAP;
                           internal_au8Data: ptr orxU8; internal_u32X: orxU32;
                           internal_u32Y: orxU32; internal_u32Width: orxU32;
                           internal_u32Height: orxU32): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetPartialBitmapData".}
proc getBitmapSize*(internal_pstBitmap: ptr orxBITMAP;
                    internal_pfWidth: ptr orxFLOAT;
                    internal_pfHeight: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxDisplay_GetBitmapSize".}
proc getBitmapID*(internal_pstBitmap: ptr orxBITMAP): orxU32 {.cdecl,
    importc: "orxDisplay_GetBitmapID".}
proc transformBitmap*(internal_pstSrc: ptr orxBITMAP;
                      internal_pstTransform: ptr orxDISPLAY_TRANSFORM;
                      internal_stColor: orxRGBA;
                      internal_eSmoothing: orxDISPLAY_SMOOTHING;
                      internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxDisplay_TransformBitmap".}
proc transformText*(internal_zString: cstring; internal_pstFont: ptr orxBITMAP;
                    internal_pstMap: ptr orxCHARACTER_MAP;
                    internal_pstTransform: ptr orxDISPLAY_TRANSFORM;
                    internal_stColor: orxRGBA;
                    internal_eSmoothing: orxDISPLAY_SMOOTHING;
                    internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxDisplay_TransformText".}
proc drawLine*(internal_pvStart: ptr orxVECTOR; internal_pvEnd: ptr orxVECTOR;
               internal_stColor: orxRGBA): orxSTATUS {.cdecl,
    importc: "orxDisplay_DrawLine".}
proc drawPolyline*(internal_avVertexList: ptr orxVECTOR;
                   internal_u32VertexNumber: orxU32; internal_stColor: orxRGBA): orxSTATUS {.
    cdecl, importc: "orxDisplay_DrawPolyline".}
proc drawPolygon*(internal_avVertexList: ptr orxVECTOR;
                  internal_u32VertexNumber: orxU32; internal_stColor: orxRGBA;
                  internal_bFill: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxDisplay_DrawPolygon".}
proc drawCircle*(internal_pvCenter: ptr orxVECTOR; internal_fRadius: orxFLOAT;
                 internal_stColor: orxRGBA; internal_bFill: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxDisplay_DrawCircle".}
proc drawOBox*(internal_pstBox: ptr orxOBOX; internal_stColor: orxRGBA;
               internal_bFill: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxDisplay_DrawOBox".}
proc drawMesh*(internal_pstMesh: ptr orxDISPLAY_MESH;
               internal_pstBitmap: ptr orxBITMAP;
               internal_eSmoothing: orxDISPLAY_SMOOTHING;
               internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.cdecl,
    importc: "orxDisplay_DrawMesh".}
proc hasShaderSupport*(): orxBOOL {.cdecl,
                                    importc: "orxDisplay_HasShaderSupport".}
proc createShader*(internal_azCodeList: ptr cstring; internal_u32Size: orxU32;
                   internal_pstParamList: ptr orxLINKLIST;
                   internal_bUseCustomParam: orxBOOL): orxHANDLE {.cdecl,
    importc: "orxDisplay_CreateShader".}
proc deleteShader*(internal_hShader: orxHANDLE): void {.cdecl,
    importc: "orxDisplay_DeleteShader".}
proc startShader*(internal_hShader: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxDisplay_StartShader".}
proc stopShader*(internal_hShader: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxDisplay_StopShader".}
proc getParameterID*(internal_hShader: orxHANDLE; internal_zParam: cstring;
                     internal_s32Index: orxS32; internal_bIsTexture: orxBOOL): orxS32 {.
    cdecl, importc: "orxDisplay_GetParameterID".}
proc setShaderBitmap*(internal_hShader: orxHANDLE; internal_s32ID: orxS32;
                      internal_pstValue: ptr orxBITMAP): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetShaderBitmap".}
proc setShaderFloat*(internal_hShader: orxHANDLE; internal_s32ID: orxS32;
                     internal_fValue: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetShaderFloat".}
proc setShaderVector*(internal_hShader: orxHANDLE; internal_s32ID: orxS32;
                      internal_pvValue: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetShaderVector".}
proc getShaderID*(internal_hShader: orxHANDLE): orxU32 {.cdecl,
    importc: "orxDisplay_GetShaderID".}
proc enableVSync*(internal_bEnable: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxDisplay_EnableVSync".}
proc isVSyncEnabled*(): orxBOOL {.cdecl, importc: "orxDisplay_IsVSyncEnabled".}
proc setFullScreen*(internal_bFullScreen: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxDisplay_SetFullScreen".}
proc isFullScreen*(): orxBOOL {.cdecl, importc: "orxDisplay_IsFullScreen".}
proc getVideoModeCount*(): orxU32 {.cdecl,
                                    importc: "orxDisplay_GetVideoModeCount".}
proc getVideoMode*(internal_u32Index: orxU32;
                   internal_pstVideoMode: ptr orxDISPLAY_VIDEO_MODE): ptr orxDISPLAY_VIDEO_MODE {.
    cdecl, importc: "orxDisplay_GetVideoMode".}
proc setVideoMode*(internal_pstVideoMode: ptr orxDISPLAY_VIDEO_MODE): orxSTATUS {.
    cdecl, importc: "orxDisplay_SetVideoMode".}
proc isVideoModeAvailable*(internal_pstVideoMode: ptr orxDISPLAY_VIDEO_MODE): orxBOOL {.
    cdecl, importc: "orxDisplay_IsVideoModeAvailable".}
proc textureSetup*(): void {.cdecl, importc: "orxTexture_Setup".}
proc textureInit*(): orxSTATUS {.cdecl, importc: "orxTexture_Init".}
proc textureExit*(): void {.cdecl, importc: "orxTexture_Exit".}
proc textureCreate*(): ptr orxTEXTURE {.cdecl, importc: "orxTexture_Create".}
proc textureLoad*(internal_zFileName: cstring; internal_bKeepInCache: orxBOOL): ptr orxTEXTURE {.
    cdecl, importc: "orxTexture_Load".}
proc textureDelete*(internal_pstTexture: ptr orxTEXTURE): orxSTATUS {.cdecl,
    importc: "orxTexture_Delete".}
proc textureClearCache*(): orxSTATUS {.cdecl, importc: "orxTexture_ClearCache".}
proc linkBitmap*(internal_pstTexture: ptr orxTEXTURE;
                 internal_pstBitmap: ptr orxBITMAP; internal_zDataName: cstring;
                 internal_bTransferOwnership: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxTexture_LinkBitmap".}
proc unlinkBitmap*(internal_pstTexture: ptr orxTEXTURE): orxSTATUS {.cdecl,
    importc: "orxTexture_UnlinkBitmap".}
proc getBitmap*(internal_pstTexture: ptr orxTEXTURE): ptr orxBITMAP {.cdecl,
    importc: "orxTexture_GetBitmap".}
proc getSize*(internal_pstTexture: ptr orxTEXTURE;
              internal_pfWidth: ptr orxFLOAT; internal_pfHeight: ptr orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxTexture_GetSize".}
proc textureGet*(internal_zName: cstring): ptr orxTEXTURE {.cdecl,
    importc: "orxTexture_Get".}
proc getName*(internal_pstTexture: ptr orxTEXTURE): cstring {.cdecl,
    importc: "orxTexture_GetName".}
proc getScreenTexture*(): ptr orxTEXTURE {.cdecl,
    importc: "orxTexture_GetScreenTexture".}
proc getLoadCount*(): orxU32 {.cdecl, importc: "orxTexture_GetLoadCount".}
proc fontSetup*(): void {.cdecl, importc: "orxFont_Setup".}
proc fontInit*(): orxSTATUS {.cdecl, importc: "orxFont_Init".}
proc fontExit*(): void {.cdecl, importc: "orxFont_Exit".}
proc fontCreate*(): ptr orxFONT {.cdecl, importc: "orxFont_Create".}
proc fontCreateFromConfig*(internal_zConfigID: cstring): ptr orxFONT {.cdecl,
    importc: "orxFont_CreateFromConfig".}
proc fontDelete*(internal_pstFont: ptr orxFONT): orxSTATUS {.cdecl,
    importc: "orxFont_Delete".}
proc getDefaultFont*(): ptr orxFONT {.cdecl, importc: "orxFont_GetDefaultFont".}
proc setTexture*(internal_pstFont: ptr orxFONT;
                 internal_pstTexture: ptr orxTEXTURE): orxSTATUS {.cdecl,
    importc: "orxFont_SetTexture".}
proc setCharacterList*(internal_pstFont: ptr orxFONT; internal_zList: cstring): orxSTATUS {.
    cdecl, importc: "orxFont_SetCharacterList".}
proc setCharacterHeight*(internal_pstFont: ptr orxFONT;
                         internal_fCharacterHeight: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFont_SetCharacterHeight".}
proc setCharacterWidthList*(internal_pstFont: ptr orxFONT;
                            internal_u32CharacterNumber: orxU32;
                            internal_afCharacterWidthList: ptr orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFont_SetCharacterWidthList".}
proc setCharacterSpacing*(internal_pstFont: ptr orxFONT;
                          internal_pvSpacing: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxFont_SetCharacterSpacing".}
proc setOrigin*(internal_pstFont: ptr orxFONT; internal_pvOrigin: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxFont_SetOrigin".}
proc setSize*(internal_pstFont: ptr orxFONT; internal_pvSize: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxFont_SetSize".}
proc getTexture*(internal_pstFont: ptr orxFONT): ptr orxTEXTURE {.cdecl,
    importc: "orxFont_GetTexture".}
proc getCharacterList*(internal_pstFont: ptr orxFONT): cstring {.cdecl,
    importc: "orxFont_GetCharacterList".}
proc getCharacterHeight*(internal_pstFont: ptr orxFONT): orxFLOAT {.cdecl,
    importc: "orxFont_GetCharacterHeight".}
proc getCharacterWidth*(internal_pstFont: ptr orxFONT;
                        internal_u32CharacterCodePoint: orxU32): orxFLOAT {.
    cdecl, importc: "orxFont_GetCharacterWidth".}
proc getCharacterSpacing*(internal_pstFont: ptr orxFONT;
                          internal_pvSpacing: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxFont_GetCharacterSpacing".}
proc getOrigin*(internal_pstFont: ptr orxFONT; internal_pvOrigin: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxFont_GetOrigin".}
proc getSize*(internal_pstFont: ptr orxFONT; internal_pvSize: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxFont_GetSize".}
proc getMap*(internal_pstFont: ptr orxFONT): ptr orxCHARACTER_MAP {.cdecl,
    importc: "orxFont_GetMap".}
proc getName*(internal_pstFont: ptr orxFONT): cstring {.cdecl,
    importc: "orxFont_GetName".}
proc joystickSetup*(): void {.cdecl, importc: "orxJoystick_Setup".}
proc joystickInit*(): orxSTATUS {.cdecl, importc: "orxJoystick_Init".}
proc joystickExit*(): void {.cdecl, importc: "orxJoystick_Exit".}
proc getAxisValue*(internal_eAxis: orxJOYSTICK_AXIS): orxFLOAT {.cdecl,
    importc: "orxJoystick_GetAxisValue".}
proc isButtonPressed*(internal_eButton: orxJOYSTICK_BUTTON): orxBOOL {.cdecl,
    importc: "orxJoystick_IsButtonPressed".}
proc getButtonName*(internal_eButton: orxJOYSTICK_BUTTON): cstring {.cdecl,
    importc: "orxJoystick_GetButtonName".}
proc getAxisName*(internal_eAxis: orxJOYSTICK_AXIS): cstring {.cdecl,
    importc: "orxJoystick_GetAxisName".}
proc isConnected*(internal_u32ID: orxU32): orxBOOL {.cdecl,
    importc: "orxJoystick_IsConnected".}
proc keyboardSetup*(): void {.cdecl, importc: "orxKeyboard_Setup".}
proc keyboardInit*(): orxSTATUS {.cdecl, importc: "orxKeyboard_Init".}
proc keyboardExit*(): void {.cdecl, importc: "orxKeyboard_Exit".}
proc isKeyPressed*(internal_eKey: orxKEYBOARD_KEY): orxBOOL {.cdecl,
    importc: "orxKeyboard_IsKeyPressed".}
proc getKeyDisplayName*(internal_eKey: orxKEYBOARD_KEY): cstring {.cdecl,
    importc: "orxKeyboard_GetKeyDisplayName".}
proc readKey*(): orxKEYBOARD_KEY {.cdecl, importc: "orxKeyboard_ReadKey".}
proc readString*(): cstring {.cdecl, importc: "orxKeyboard_ReadString".}
proc clearBuffer*(): void {.cdecl, importc: "orxKeyboard_ClearBuffer".}
proc getKeyName*(internal_eKey: orxKEYBOARD_KEY): cstring {.cdecl,
    importc: "orxKeyboard_GetKeyName".}
proc show*(internal_bShow: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxKeyboard_Show".}
proc mouseSetup*(): void {.cdecl, importc: "orxMouse_Setup".}
proc mouseInit*(): orxSTATUS {.cdecl, importc: "orxMouse_Init".}
proc mouseExit*(): void {.cdecl, importc: "orxMouse_Exit".}
proc setPosition*(internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxMouse_SetPosition".}
proc getPosition*(internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxMouse_GetPosition".}
proc isButtonPressed*(internal_eButton: orxMOUSE_BUTTON): orxBOOL {.cdecl,
    importc: "orxMouse_IsButtonPressed".}
proc getMoveDelta*(internal_pvMoveDelta: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxMouse_GetMoveDelta".}
proc getWheelDelta*(): orxFLOAT {.cdecl, importc: "orxMouse_GetWheelDelta".}
proc showCursor*(internal_bShow: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxMouse_ShowCursor".}
proc grab*(internal_bGrab: orxBOOL): orxSTATUS {.cdecl, importc: "orxMouse_Grab".}
proc setCursor*(internal_zName: cstring; internal_pvPivot: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxMouse_SetCursor".}
proc getButtonName*(internal_eButton: orxMOUSE_BUTTON): cstring {.cdecl,
    importc: "orxMouse_GetButtonName".}
proc getAxisName*(internal_eAxis: orxMOUSE_AXIS): cstring {.cdecl,
    importc: "orxMouse_GetAxisName".}
proc inputSetup*(): void {.cdecl, importc: "orxInput_Setup".}
proc inputInit*(): orxSTATUS {.cdecl, importc: "orxInput_Init".}
proc inputExit*(): void {.cdecl, importc: "orxInput_Exit".}
proc inputLoad*(internal_zFileName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_Load".}
proc save*(internal_zFileName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_Save".}
proc selectSet*(internal_zSetName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_SelectSet".}
proc getCurrentSet*(): cstring {.cdecl, importc: "orxInput_GetCurrentSet".}
proc getNextSet*(internal_zSetName: cstring): cstring {.cdecl,
    importc: "orxInput_GetNextSet".}
proc pushSet*(internal_zSetName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_PushSet".}
proc popSet*(): orxSTATUS {.cdecl, importc: "orxInput_PopSet".}
proc removeSet*(internal_zSetName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_RemoveSet".}
proc enableSet*(internal_zSetName: cstring; internal_bEnable: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxInput_EnableSet".}
proc isSetEnabled*(internal_zSetName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_IsSetEnabled".}
proc clearSet*(internal_zSetName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_ClearSet".}
proc setTypeFlags*(internal_u32AddTypeFlags: orxU32;
                   internal_u32RemoveTypeFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxInput_SetTypeFlags".}
proc getNext*(internal_zInputName: cstring): cstring {.cdecl,
    importc: "orxInput_GetNext".}
proc isActive*(internal_zInputName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_IsActive".}
proc hasBeenActivated*(internal_zInputName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_HasBeenActivated".}
proc hasBeenDeactivated*(internal_zInputName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_HasBeenDeactivated".}
proc hasNewStatus*(internal_zInputName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_HasNewStatus".}
proc getValue*(internal_zInputName: cstring): orxFLOAT {.cdecl,
    importc: "orxInput_GetValue".}
proc setValue*(internal_zInputName: cstring; internal_fValue: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxInput_SetValue".}
proc setPermanentValue*(internal_zInputName: cstring; internal_fValue: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxInput_SetPermanentValue".}
proc resetValue*(internal_zInputName: cstring): orxSTATUS {.cdecl,
    importc: "orxInput_ResetValue".}
proc getThreshold*(internal_zInputName: cstring): orxFLOAT {.cdecl,
    importc: "orxInput_GetThreshold".}
proc setThreshold*(internal_zInputName: cstring; internal_fThreshold: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxInput_SetThreshold".}
proc getMultiplier*(internal_zInputName: cstring): orxFLOAT {.cdecl,
    importc: "orxInput_GetMultiplier".}
proc setMultiplier*(internal_zInputName: cstring; internal_fMultiplier: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxInput_SetMultiplier".}
proc setCombineMode*(internal_zName: cstring; internal_bCombine: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxInput_SetCombineMode".}
proc isInCombineMode*(internal_zName: cstring): orxBOOL {.cdecl,
    importc: "orxInput_IsInCombineMode".}
proc inputBind*(internal_zName: cstring; internal_eType: orxINPUT_TYPE;
                internal_eID: orxENUM; internal_eMode: orxINPUT_MODE;
                internal_s32BindingIndex: orxS32): orxSTATUS {.cdecl,
    importc: "orxInput_Bind".}
proc inputUnbind*(internal_zName: cstring; internal_s32BindingIndex: orxS32): orxSTATUS {.
    cdecl, importc: "orxInput_Unbind".}
proc getBoundInputCount*(internal_eType: orxINPUT_TYPE; internal_eID: orxENUM;
                         internal_eMode: orxINPUT_MODE): orxU32 {.cdecl,
    importc: "orxInput_GetBoundInputCount".}
proc getBoundInput*(internal_eType: orxINPUT_TYPE; internal_eID: orxENUM;
                    internal_eMode: orxINPUT_MODE;
                    internal_u32InputIndex: orxU32;
                    internal_pzName: ptr cstring;
                    internal_pu32BindingIndex: ptr orxU32): orxSTATUS {.cdecl,
    importc: "orxInput_GetBoundInput".}
proc getBinding*(internal_zName: cstring; internal_u32BindingIndex: orxU32;
                 internal_peType: ptr orxINPUT_TYPE; internal_peID: ptr orxENUM;
                 internal_peMode: ptr orxINPUT_MODE): orxSTATUS {.cdecl,
    importc: "orxInput_GetBinding".}
proc getBindingList*(internal_zName: cstring;
                     internal_aeTypeList: array[16'i64, orxINPUT_TYPE];
                     internal_aeIDList: array[16'i64, orxENUM];
                     internal_aeModeList: array[16'i64, orxINPUT_MODE]): orxSTATUS {.
    cdecl, importc: "orxInput_GetBindingList".}
proc getBindingName*(internal_eType: orxINPUT_TYPE; internal_eID: orxENUM;
                     internal_eMode: orxINPUT_MODE): cstring {.cdecl,
    importc: "orxInput_GetBindingName".}
proc getBindingType*(internal_zName: cstring;
                     internal_peType: ptr orxINPUT_TYPE;
                     internal_peID: ptr orxENUM;
                     internal_peMode: ptr orxINPUT_MODE): orxSTATUS {.cdecl,
    importc: "orxInput_GetBindingType".}
proc getActiveBinding*(internal_peType: ptr orxINPUT_TYPE;
                       internal_peID: ptr orxENUM;
                       internal_pfValue: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxInput_GetActiveBinding".}
proc consoleSetup*(): void {.cdecl, importc: "orxConsole_Setup".}
proc consoleInit*(): orxSTATUS {.cdecl, importc: "orxConsole_Init".}
proc consoleExit*(): void {.cdecl, importc: "orxConsole_Exit".}
proc enable*(internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxConsole_Enable".}
proc isEnabled*(): orxBOOL {.cdecl, importc: "orxConsole_IsEnabled".}
proc isInsertMode*(): orxBOOL {.cdecl, importc: "orxConsole_IsInsertMode".}
proc setToggle*(internal_eInputType: orxINPUT_TYPE; internal_eInputID: orxENUM;
                internal_eInputMode: orxINPUT_MODE): orxSTATUS {.cdecl,
    importc: "orxConsole_SetToggle".}
proc log*(internal_zText: cstring): orxSTATUS {.cdecl, importc: "orxConsole_Log".}
proc setFont*(internal_pstFont: ptr orxFONT): orxSTATUS {.cdecl,
    importc: "orxConsole_SetFont".}
proc getFont*(): ptr orxFONT {.cdecl, importc: "orxConsole_GetFont".}
proc setLogLineLength*(internal_u32LineLength: orxU32): orxSTATUS {.cdecl,
    importc: "orxConsole_SetLogLineLength".}
proc getLogLineLength*(): orxU32 {.cdecl, importc: "orxConsole_GetLogLineLength".}
proc getCompletionCount*(internal_pu32MaxLength: ptr orxU32): orxU32 {.cdecl,
    importc: "orxConsole_GetCompletionCount".}
proc getCompletion*(internal_u32Index: orxU32; internal_pbActive: ptr orxBOOL): cstring {.
    cdecl, importc: "orxConsole_GetCompletion".}
proc getTrailLogLine*(internal_u32TrailLineIndex: orxU32): cstring {.cdecl,
    importc: "orxConsole_GetTrailLogLine".}
proc getTrailLogLineOffset*(): orxU32 {.cdecl, importc: "orxConsole_GetTrailLogLineOffset".}
proc getInput*(internal_pu32CursorIndex: ptr orxU32): cstring {.cdecl,
    importc: "orxConsole_GetInput".}
proc eventSetup*(): void {.cdecl, importc: "orxEvent_Setup".}
proc eventInit*(): orxSTATUS {.cdecl, importc: "orxEvent_Init".}
proc eventExit*(): void {.cdecl, importc: "orxEvent_Exit".}
proc addHandler*(internal_eEventType: orxEVENT_TYPE;
                 internal_pfnEventHandler: orxEVENT_HANDLER): orxSTATUS {.cdecl,
    importc: "orxEvent_AddHandler".}
proc addHandlerWithContext*(internal_eEventType: orxEVENT_TYPE;
                            internal_pfnEventHandler: orxEVENT_HANDLER;
                            internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxEvent_AddHandlerWithContext".}
proc removeHandler*(internal_eEventType: orxEVENT_TYPE;
                    internal_pfnEventHandler: orxEVENT_HANDLER): orxSTATUS {.
    cdecl, importc: "orxEvent_RemoveHandler".}
proc removeHandlerWithContext*(internal_eEventType: orxEVENT_TYPE;
                               internal_pfnEventHandler: orxEVENT_HANDLER;
                               internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxEvent_RemoveHandlerWithContext".}
proc setHandlerIDFlags*(internal_pfnEventHandler: orxEVENT_HANDLER;
                        internal_eEventType: orxEVENT_TYPE;
                        internal_pContext: pointer;
                        internal_u32AddIDFlags: orxU32;
                        internal_u32RemoveIDFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxEvent_SetHandlerIDFlags".}
proc eventSend*(internal_pstEvent: ptr orxEVENT): orxSTATUS {.cdecl,
    importc: "orxEvent_Send".}
proc eventSendShort*(internal_eEventType: orxEVENT_TYPE;
                     internal_eEventID: orxENUM): orxSTATUS {.cdecl,
    importc: "orxEvent_SendShort".}
proc isSending*(): orxBOOL {.cdecl, importc: "orxEvent_IsSending".}
proc localeSetup*(): void {.cdecl, importc: "orxLocale_Setup".}
proc localeInit*(): orxSTATUS {.cdecl, importc: "orxLocale_Init".}
proc localeExit*(): void {.cdecl, importc: "orxLocale_Exit".}
proc selectLanguage*(internal_zLanguage: cstring; internal_zGroup: cstring): orxSTATUS {.
    cdecl, importc: "orxLocale_SelectLanguage".}
proc getCurrentLanguage*(internal_zGroup: cstring): cstring {.cdecl,
    importc: "orxLocale_GetCurrentLanguage".}
proc hasLanguage*(internal_zLanguage: cstring): orxBOOL {.cdecl,
    importc: "orxLocale_HasLanguage".}
proc getLanguageCount*(): orxU32 {.cdecl, importc: "orxLocale_GetLanguageCount".}
proc getLanguage*(internal_u32LanguageIndex: orxU32): cstring {.cdecl,
    importc: "orxLocale_GetLanguage".}
proc hasString*(internal_zKey: cstring; internal_zGroup: cstring): orxBOOL {.
    cdecl, importc: "orxLocale_HasString".}
proc getString*(internal_zKey: cstring; internal_zGroup: cstring): cstring {.
    cdecl, importc: "orxLocale_GetString".}
proc setString*(internal_zKey: cstring; internal_zValue: cstring;
                internal_zGroup: cstring): orxSTATUS {.cdecl,
    importc: "orxLocale_SetString".}
proc getKeyCount*(internal_zGroup: cstring): orxU32 {.cdecl,
    importc: "orxLocale_GetKeyCount".}
proc getKey*(internal_u32KeyIndex: orxU32; internal_zGroup: cstring): cstring {.
    cdecl, importc: "orxLocale_GetKey".}
proc resourceSetup*(): void {.cdecl, importc: "orxResource_Setup".}
proc resourceInit*(): orxSTATUS {.cdecl, importc: "orxResource_Init".}
proc resourceExit*(): void {.cdecl, importc: "orxResource_Exit".}
proc getGroupCount*(): orxU32 {.cdecl, importc: "orxResource_GetGroupCount".}
proc getGroup*(internal_u32Index: orxU32): cstring {.cdecl,
    importc: "orxResource_GetGroup".}
proc addStorage*(internal_zGroup: cstring; internal_zStorage: cstring;
                 internal_bAddFirst: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxResource_AddStorage".}
proc removeStorage*(internal_zGroup: cstring; internal_zStorage: cstring): orxSTATUS {.
    cdecl, importc: "orxResource_RemoveStorage".}
proc getStorageCount*(internal_zGroup: cstring): orxU32 {.cdecl,
    importc: "orxResource_GetStorageCount".}
proc getStorage*(internal_zGroup: cstring; internal_u32Index: orxU32): cstring {.
    cdecl, importc: "orxResource_GetStorage".}
proc reloadStorage*(): orxSTATUS {.cdecl, importc: "orxResource_ReloadStorage".}
proc locate*(internal_zGroup: cstring; internal_zName: cstring): cstring {.
    cdecl, importc: "orxResource_Locate".}
proc locateInStorage*(internal_zGroup: cstring; internal_zStorage: cstring;
                      internal_zName: cstring): cstring {.cdecl,
    importc: "orxResource_LocateInStorage".}
proc getPath*(internal_zLocation: cstring): cstring {.cdecl,
    importc: "orxResource_GetPath".}
proc getType*(internal_zLocation: cstring): ptr orxRESOURCE_TYPE_INFO {.cdecl,
    importc: "orxResource_GetType".}
proc getTime*(internal_zLocation: cstring): orxS64 {.cdecl,
    importc: "orxResource_GetTime".}
proc open*(internal_zLocation: cstring; internal_bEraseMode: orxBOOL): orxHANDLE {.
    cdecl, importc: "orxResource_Open".}
proc close*(internal_hResource: orxHANDLE): void {.cdecl,
    importc: "orxResource_Close".}
proc getLocation*(internal_hResource: orxHANDLE): cstring {.cdecl,
    importc: "orxResource_GetLocation".}
proc getSize*(internal_hResource: orxHANDLE): orxS64 {.cdecl,
    importc: "orxResource_GetSize".}
proc seek*(internal_hResource: orxHANDLE; internal_s64Offset: orxS64;
           internal_eWhence: orxSEEK_OFFSET_WHENCE): orxS64 {.cdecl,
    importc: "orxResource_Seek".}
proc tell*(internal_hResource: orxHANDLE): orxS64 {.cdecl,
    importc: "orxResource_Tell".}
proc read*(internal_hResource: orxHANDLE; internal_s64Size: orxS64;
           internal_pBuffer: pointer;
           internal_pfnCallback: orxRESOURCE_OP_FUNCTION;
           internal_pContext: pointer): orxS64 {.cdecl,
    importc: "orxResource_Read".}
proc write*(internal_hResource: orxHANDLE; internal_s64Size: orxS64;
            internal_pBuffer: pointer;
            internal_pfnCallback: orxRESOURCE_OP_FUNCTION;
            internal_pContext: pointer): orxS64 {.cdecl,
    importc: "orxResource_Write".}
proc resourceDelete*(internal_zLocation: cstring): orxSTATUS {.cdecl,
    importc: "orxResource_Delete".}
proc getPendingOpCount*(internal_hResource: orxHANDLE): orxU32 {.cdecl,
    importc: "orxResource_GetPendingOpCount".}
proc getTotalPendingOpCount*(): orxU32 {.cdecl,
    importc: "orxResource_GetTotalPendingOpCount".}
proc registerType*(internal_pstInfo: ptr orxRESOURCE_TYPE_INFO): orxSTATUS {.
    cdecl, importc: "orxResource_RegisterType".}
proc unregisterType*(internal_zTypeTag: cstring): orxSTATUS {.cdecl,
    importc: "orxResource_UnregisterType".}
proc getTypeCount*(): orxU32 {.cdecl, importc: "orxResource_GetTypeCount".}
proc getTypeTag*(internal_u32Index: orxU32): cstring {.cdecl,
    importc: "orxResource_GetTypeTag".}
proc sync*(internal_zGroup: cstring): orxSTATUS {.cdecl,
    importc: "orxResource_Sync".}
proc resourceClearCache*(internal_zGroup: cstring): orxSTATUS {.cdecl,
    importc: "orxResource_ClearCache".}
proc getCacheCount*(internal_zGroup: cstring): orxU32 {.cdecl,
    importc: "orxResource_GetCacheCount".}
proc getNextCachedLocation*(internal_zGroup: cstring;
                            internal_hIterator: orxHANDLE;
                            internal_pzLocation: ptr cstring;
                            internal_pzStorage: ptr cstring;
                            internal_pzName: ptr cstring): orxHANDLE {.cdecl,
    importc: "orxResource_GetNextCachedLocation".}
proc setMemoryResource*(internal_zName: cstring; internal_s64Size: orxS64;
                        internal_pBuffer: pointer): orxSTATUS {.cdecl,
    importc: "orxResource_SetMemoryResource".}
proc threadSetup*(): void {.cdecl, importc: "orxThread_Setup".}
proc threadInit*(): orxSTATUS {.cdecl, importc: "orxThread_Init".}
proc threadExit*(): void {.cdecl, importc: "orxThread_Exit".}
proc start*(internal_pfnRun: orxTHREAD_FUNCTION; internal_zName: cstring;
            internal_pContext: pointer): orxU32 {.cdecl,
    importc: "orxThread_Start".}
proc join*(internal_u32ThreadID: orxU32): orxSTATUS {.cdecl,
    importc: "orxThread_Join".}
proc joinAll*(): orxSTATUS {.cdecl, importc: "orxThread_JoinAll".}
proc getName*(internal_u32ThreadID: orxU32): cstring {.cdecl,
    importc: "orxThread_GetName".}
proc enable*(internal_u32EnableThreads: orxU32;
             internal_u32DisableThreads: orxU32): orxSTATUS {.cdecl,
    importc: "orxThread_Enable".}
proc getCurrent*(): orxU32 {.cdecl, importc: "orxThread_GetCurrent".}
proc threadYield*(): void {.cdecl, importc: "orxThread_Yield".}
proc createSemaphore*(internal_u32Value: orxU32): ptr orxTHREAD_SEMAPHORE {.
    cdecl, importc: "orxThread_CreateSemaphore".}
proc deleteSemaphore*(internal_pstSemaphore: ptr orxTHREAD_SEMAPHORE): orxSTATUS {.
    cdecl, importc: "orxThread_DeleteSemaphore".}
proc waitSemaphore*(internal_pstSemaphore: ptr orxTHREAD_SEMAPHORE): orxSTATUS {.
    cdecl, importc: "orxThread_WaitSemaphore".}
proc signalSemaphore*(internal_pstSemaphore: ptr orxTHREAD_SEMAPHORE): orxSTATUS {.
    cdecl, importc: "orxThread_SignalSemaphore".}
proc runTask*(internal_pfnRun: orxTHREAD_FUNCTION;
              internal_pfnThen: orxTHREAD_FUNCTION;
              internal_pfnElse: orxTHREAD_FUNCTION; internal_pContext: pointer): orxSTATUS {.
    cdecl, importc: "orxThread_RunTask".}
proc getTaskCount*(): orxU32 {.cdecl, importc: "orxThread_GetTaskCount".}
proc setCallbacks*(internal_pfnStart: orxTHREAD_FUNCTION;
                   internal_pfnStop: orxTHREAD_FUNCTION;
                   internal_pContext: pointer): orxSTATUS {.cdecl,
    importc: "orxThread_SetCallbacks".}
proc fPSSetup*(): void {.cdecl, importc: "orxFPS_Setup".}
proc fPSInit*(): orxSTATUS {.cdecl, importc: "orxFPS_Init".}
proc fPSExit*(): void {.cdecl, importc: "orxFPS_Exit".}
proc increaseFrameCount*(): void {.cdecl, importc: "orxFPS_IncreaseFrameCount".}
proc getFPS*(): orxU32 {.cdecl, importc: "orxFPS_GetFPS".}
proc profilerSetup*(): void {.cdecl, importc: "orxProfiler_Setup".}
proc profilerInit*(): orxSTATUS {.cdecl, importc: "orxProfiler_Init".}
proc profilerExit*(): void {.cdecl, importc: "orxProfiler_Exit".}
proc getIDFromName*(internal_zName: cstring): orxS32 {.cdecl,
    importc: "orxProfiler_GetIDFromName".}
proc isMarkerIDValid*(internal_s32MarkerID: orxS32): orxBOOL {.cdecl,
    importc: "orxProfiler_IsMarkerIDValid".}
proc pushMarker*(internal_s32MarkerID: orxS32): void {.cdecl,
    importc: "orxProfiler_PushMarker".}
proc popMarker*(): void {.cdecl, importc: "orxProfiler_PopMarker".}
proc enableMarkerOperations*(internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxProfiler_EnableMarkerOperations".}
proc areMarkerOperationsEnabled*(): orxBOOL {.cdecl,
    importc: "orxProfiler_AreMarkerOperationsEnabled".}
proc pause*(internal_bPause: orxBOOL): void {.cdecl,
    importc: "orxProfiler_Pause".}
proc isPaused*(): orxBOOL {.cdecl, importc: "orxProfiler_IsPaused".}
proc resetAllMarkers*(): void {.cdecl, importc: "orxProfiler_ResetAllMarkers".}
proc resetAllMaxima*(): void {.cdecl, importc: "orxProfiler_ResetAllMaxima".}
proc getResetTime*(): orxDOUBLE {.cdecl, importc: "orxProfiler_GetResetTime".}
proc getMaxResetTime*(): orxDOUBLE {.cdecl,
                                     importc: "orxProfiler_GetMaxResetTime".}
proc getMarkerCount*(): orxS32 {.cdecl, importc: "orxProfiler_GetMarkerCount".}
proc getNextMarkerID*(internal_s32MarkerID: orxS32): orxS32 {.cdecl,
    importc: "orxProfiler_GetNextMarkerID".}
proc getNextSortedMarkerID*(internal_s32MarkerID: orxS32): orxS32 {.cdecl,
    importc: "orxProfiler_GetNextSortedMarkerID".}
proc selectQueryFrame*(internal_u32QueryFrame: orxU32;
                       internal_u32ThreadID: orxU32): orxSTATUS {.cdecl,
    importc: "orxProfiler_SelectQueryFrame".}
proc getMarkerTime*(internal_s32MarkerID: orxS32): orxDOUBLE {.cdecl,
    importc: "orxProfiler_GetMarkerTime".}
proc getMarkerMaxTime*(internal_s32MarkerID: orxS32): orxDOUBLE {.cdecl,
    importc: "orxProfiler_GetMarkerMaxTime".}
proc getMarkerName*(internal_s32MarkerID: orxS32): cstring {.cdecl,
    importc: "orxProfiler_GetMarkerName".}
proc getMarkerPushCount*(internal_s32MarkerID: orxS32): orxU32 {.cdecl,
    importc: "orxProfiler_GetMarkerPushCount".}
proc isUniqueMarker*(internal_s32MarkerID: orxS32): orxBOOL {.cdecl,
    importc: "orxProfiler_IsUniqueMarker".}
proc getUniqueMarkerStartTime*(internal_s32MarkerID: orxS32): orxDOUBLE {.cdecl,
    importc: "orxProfiler_GetUniqueMarkerStartTime".}
proc getUniqueMarkerDepth*(internal_s32MarkerID: orxS32): orxU32 {.cdecl,
    importc: "orxProfiler_GetUniqueMarkerDepth".}
proc graphicSetup*(): void {.cdecl, importc: "orxGraphic_Setup".}
proc graphicInit*(): orxSTATUS {.cdecl, importc: "orxGraphic_Init".}
proc graphicExit*(): void {.cdecl, importc: "orxGraphic_Exit".}
proc getAlignFlags*(internal_zAlign: cstring): orxU32 {.cdecl,
    importc: "orxGraphic_GetAlignFlags".}
proc alignVector*(internal_u32AlignFlags: orxU32; internal_pstBox: ptr orxAABOX;
                  internal_pvValue: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxGraphic_AlignVector".}
proc graphicCreate*(): ptr orxGRAPHIC {.cdecl, importc: "orxGraphic_Create".}
proc graphicCreateFromConfig*(internal_zConfigID: cstring): ptr orxGRAPHIC {.
    cdecl, importc: "orxGraphic_CreateFromConfig".}
proc graphicDelete*(internal_pstGraphic: ptr orxGRAPHIC): orxSTATUS {.cdecl,
    importc: "orxGraphic_Delete".}
proc clone*(internal_pstGraphic: ptr orxGRAPHIC): ptr orxGRAPHIC {.cdecl,
    importc: "orxGraphic_Clone".}
proc getName*(internal_pstGraphic: ptr orxGRAPHIC): cstring {.cdecl,
    importc: "orxGraphic_GetName".}
proc setData*(internal_pstGraphic: ptr orxGRAPHIC;
              internal_pstData: ptr orxSTRUCTURE): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetData".}
proc getData*(internal_pstGraphic: ptr orxGRAPHIC): ptr orxSTRUCTURE {.cdecl,
    importc: "orxGraphic_GetData".}
proc setFlip*(internal_pstGraphic: ptr orxGRAPHIC; internal_bFlipX: orxBOOL;
              internal_bFlipY: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetFlip".}
proc getFlip*(internal_pstGraphic: ptr orxGRAPHIC;
              internal_pbFlipX: ptr orxBOOL; internal_pbFlipY: ptr orxBOOL): orxSTATUS {.
    cdecl, importc: "orxGraphic_GetFlip".}
proc setPivot*(internal_pstGraphic: ptr orxGRAPHIC;
               internal_pvPivot: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetPivot".}
proc setRelativePivot*(internal_pstGraphic: ptr orxGRAPHIC;
                       internal_u32AlignFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetRelativePivot".}
proc getPivot*(internal_pstGraphic: ptr orxGRAPHIC;
               internal_pvPivot: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxGraphic_GetPivot".}
proc setSize*(internal_pstGraphic: ptr orxGRAPHIC;
              internal_pvSize: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetSize".}
proc getSize*(internal_pstGraphic: ptr orxGRAPHIC;
              internal_pvSize: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxGraphic_GetSize".}
proc setColor*(internal_pstGraphic: ptr orxGRAPHIC;
               internal_pstColor: ptr orxCOLOR): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetColor".}
proc setRepeat*(internal_pstGraphic: ptr orxGRAPHIC;
                internal_fRepeatX: orxFLOAT; internal_fRepeatY: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxGraphic_SetRepeat".}
proc clearColor*(internal_pstGraphic: ptr orxGRAPHIC): orxSTATUS {.cdecl,
    importc: "orxGraphic_ClearColor".}
proc hasColor*(internal_pstGraphic: ptr orxGRAPHIC): orxBOOL {.cdecl,
    importc: "orxGraphic_HasColor".}
proc getColor*(internal_pstGraphic: ptr orxGRAPHIC;
               internal_pstColor: ptr orxCOLOR): ptr orxCOLOR {.cdecl,
    importc: "orxGraphic_GetColor".}
proc getRepeat*(internal_pstGraphic: ptr orxGRAPHIC;
                internal_pfRepeatX: ptr orxFLOAT;
                internal_pfRepeatY: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxGraphic_GetRepeat".}
proc setOrigin*(internal_pstGraphic: ptr orxGRAPHIC;
                internal_pvOrigin: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxGraphic_SetOrigin".}
proc getOrigin*(internal_pstGraphic: ptr orxGRAPHIC;
                internal_pvOrigin: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxGraphic_GetOrigin".}
proc updateSize*(internal_pstGraphic: ptr orxGRAPHIC): orxSTATUS {.cdecl,
    importc: "orxGraphic_UpdateSize".}
proc setSmoothing*(internal_pstGraphic: ptr orxGRAPHIC;
                   internal_eSmoothing: orxDISPLAY_SMOOTHING): orxSTATUS {.
    cdecl, importc: "orxGraphic_SetSmoothing".}
proc getSmoothing*(internal_pstGraphic: ptr orxGRAPHIC): orxDISPLAY_SMOOTHING {.
    cdecl, importc: "orxGraphic_GetSmoothing".}
proc setBlendMode*(internal_pstGraphic: ptr orxGRAPHIC;
                   internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxGraphic_SetBlendMode".}
proc clearBlendMode*(internal_pstGraphic: ptr orxGRAPHIC): orxSTATUS {.cdecl,
    importc: "orxGraphic_ClearBlendMode".}
proc hasBlendMode*(internal_pstGraphic: ptr orxGRAPHIC): orxBOOL {.cdecl,
    importc: "orxGraphic_HasBlendMode".}
proc getBlendMode*(internal_pstGraphic: ptr orxGRAPHIC): orxDISPLAY_BLEND_MODE {.
    cdecl, importc: "orxGraphic_GetBlendMode".}
proc screenshotSetup*(): void {.cdecl, importc: "orxScreenshot_Setup".}
proc screenshotInit*(): orxSTATUS {.cdecl, importc: "orxScreenshot_Init".}
proc screenshotExit*(): void {.cdecl, importc: "orxScreenshot_Exit".}
proc capture*(): orxSTATUS {.cdecl, importc: "orxScreenshot_Capture".}
proc textSetup*(): void {.cdecl, importc: "orxText_Setup".}
proc textInit*(): orxSTATUS {.cdecl, importc: "orxText_Init".}
proc textExit*(): void {.cdecl, importc: "orxText_Exit".}
proc textCreate*(): ptr orxTEXT {.cdecl, importc: "orxText_Create".}
proc textCreateFromConfig*(internal_zConfigID: cstring): ptr orxTEXT {.cdecl,
    importc: "orxText_CreateFromConfig".}
proc textDelete*(internal_pstText: ptr orxTEXT): orxSTATUS {.cdecl,
    importc: "orxText_Delete".}
proc getName*(internal_pstText: ptr orxTEXT): cstring {.cdecl,
    importc: "orxText_GetName".}
proc getLineCount*(internal_pstText: ptr orxTEXT): orxU32 {.cdecl,
    importc: "orxText_GetLineCount".}
proc getLineSize*(internal_pstText: ptr orxTEXT; internal_u32Line: orxU32;
                  internal_pfWidth: ptr orxFLOAT;
                  internal_pfHeight: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxText_GetLineSize".}
proc isFixedSize*(internal_pstText: ptr orxTEXT): orxBOOL {.cdecl,
    importc: "orxText_IsFixedSize".}
proc getSize*(internal_pstText: ptr orxTEXT; internal_pfWidth: ptr orxFLOAT;
              internal_pfHeight: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxText_GetSize".}
proc getString*(internal_pstText: ptr orxTEXT): cstring {.cdecl,
    importc: "orxText_GetString".}
proc getFont*(internal_pstText: ptr orxTEXT): ptr orxFONT {.cdecl,
    importc: "orxText_GetFont".}
proc setSize*(internal_pstText: ptr orxTEXT; internal_fWidth: orxFLOAT;
              internal_fHeight: orxFLOAT; internal_pzExtra: ptr cstring): orxSTATUS {.
    cdecl, importc: "orxText_SetSize".}
proc setString*(internal_pstText: ptr orxTEXT; internal_zString: cstring): orxSTATUS {.
    cdecl, importc: "orxText_SetString".}
proc setFont*(internal_pstText: ptr orxTEXT; internal_pstFont: ptr orxFONT): orxSTATUS {.
    cdecl, importc: "orxText_SetFont".}
proc fileSetup*(): void {.cdecl, importc: "orxFile_Setup".}
proc fileInit*(): orxSTATUS {.cdecl, importc: "orxFile_Init".}
proc fileExit*(): void {.cdecl, importc: "orxFile_Exit".}
proc getHomeDirectory*(internal_zSubPath: cstring): cstring {.cdecl,
    importc: "orxFile_GetHomeDirectory".}
proc getApplicationSaveDirectory*(internal_zSubPath: cstring): cstring {.cdecl,
    importc: "orxFile_GetApplicationSaveDirectory".}
proc exists*(internal_zFileName: cstring): orxBOOL {.cdecl,
    importc: "orxFile_Exists".}
proc findFirst*(internal_zSearchPattern: cstring;
                internal_pstFileInfo: ptr orxFILE_INFO): orxSTATUS {.cdecl,
    importc: "orxFile_FindFirst".}
proc findNext*(internal_pstFileInfo: ptr orxFILE_INFO): orxSTATUS {.cdecl,
    importc: "orxFile_FindNext".}
proc findClose*(internal_pstFileInfo: ptr orxFILE_INFO): void {.cdecl,
    importc: "orxFile_FindClose".}
proc getInfo*(internal_zFileName: cstring;
              internal_pstFileInfo: ptr orxFILE_INFO): orxSTATUS {.cdecl,
    importc: "orxFile_GetInfo".}
proc remove*(internal_zFileName: cstring): orxSTATUS {.cdecl,
    importc: "orxFile_Remove".}
proc makeDirectory*(internal_zName: cstring): orxSTATUS {.cdecl,
    importc: "orxFile_MakeDirectory".}
proc open*(internal_zFileName: cstring; internal_u32OpenFlags: orxU32): ptr orxFILE {.
    cdecl, importc: "orxFile_Open".}
proc read*(internal_pReadData: pointer; internal_s64ElemSize: orxS64;
           internal_s64NbElem: orxS64; internal_pstFile: ptr orxFILE): orxS64 {.
    cdecl, importc: "orxFile_Read".}
proc write*(internal_pDataToWrite: pointer; internal_s64ElemSize: orxS64;
            internal_s64NbElem: orxS64; internal_pstFile: ptr orxFILE): orxS64 {.
    cdecl, importc: "orxFile_Write".}
proc fileDelete*(internal_zFileName: cstring): orxSTATUS {.cdecl,
    importc: "orxFile_Delete".}
proc seek*(internal_pstFile: ptr orxFILE; internal_s64Position: orxS64;
           internal_eWhence: orxSEEK_OFFSET_WHENCE): orxS64 {.cdecl,
    importc: "orxFile_Seek".}
proc tell*(internal_pstFile: ptr orxFILE): orxS64 {.cdecl,
    importc: "orxFile_Tell".}
proc getSize*(internal_pstFile: ptr orxFILE): orxS64 {.cdecl,
    importc: "orxFile_GetSize".}
proc getTime*(internal_pstFile: ptr orxFILE): orxS64 {.cdecl,
    importc: "orxFile_GetTime".}
proc print*(internal_pstFile: ptr orxFILE; internal_zString: cstring): orxS32 {.
    cdecl, varargs, importc: "orxFile_Print".}
proc close*(internal_pstFile: ptr orxFILE): orxSTATUS {.cdecl,
    importc: "orxFile_Close".}
proc paramSetup*(): void {.cdecl, importc: "orxParam_Setup".}
proc paramInit*(): orxSTATUS {.cdecl, importc: "orxParam_Init".}
proc paramExit*(): void {.cdecl, importc: "orxParam_Exit".}
proc paramRegister*(internal_pstParam: ptr orxPARAM): orxSTATUS {.cdecl,
    importc: "orxParam_Register".}
proc displayHelp*(): orxSTATUS {.cdecl, importc: "orxParam_DisplayHelp".}
proc setArgs*(internal_u32NbParams: orxU32;
              internal_azParams: ptr UncheckedArray[cstring]): orxSTATUS {.
    cdecl, importc: "orxParam_SetArgs".}
proc soundSystemSetup*(): void {.cdecl, importc: "orxSoundSystem_Setup".}
proc soundSystemInit*(): orxSTATUS {.cdecl, importc: "orxSoundSystem_Init".}
proc soundSystemExit*(): void {.cdecl, importc: "orxSoundSystem_Exit".}
proc createSample*(internal_u32ChannelNumber: orxU32;
                   internal_u32FrameNumber: orxU32;
                   internal_u32SampleRate: orxU32): ptr orxSOUNDSYSTEM_SAMPLE {.
    cdecl, importc: "orxSoundSystem_CreateSample".}
proc loadSample*(internal_zFilename: cstring): ptr orxSOUNDSYSTEM_SAMPLE {.
    cdecl, importc: "orxSoundSystem_LoadSample".}
proc deleteSample*(internal_pstSample: ptr orxSOUNDSYSTEM_SAMPLE): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_DeleteSample".}
proc getSampleInfo*(internal_pstSample: ptr orxSOUNDSYSTEM_SAMPLE;
                    internal_pu32ChannelNumber: ptr orxU32;
                    internal_pu32FrameNumber: ptr orxU32;
                    internal_pu32SampleRate: ptr orxU32): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_GetSampleInfo".}
proc setSampleData*(internal_pstSample: ptr orxSOUNDSYSTEM_SAMPLE;
                    internal_afData: ptr orxFLOAT;
                    internal_u32SampleNumber: orxU32): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetSampleData".}
proc createFromSample*(internal_hUserData: orxHANDLE;
                       internal_pstSample: ptr orxSOUNDSYSTEM_SAMPLE): ptr orxSOUNDSYSTEM_SOUND {.
    cdecl, importc: "orxSoundSystem_CreateFromSample".}
proc createStream*(internal_hUserData: orxHANDLE;
                   internal_eType: orxSOUNDSYSTEM_STREAM_TYPE;
                   internal_u32ChannelNumber: orxU32;
                   internal_u32SampleRate: orxU32): ptr orxSOUNDSYSTEM_SOUND {.
    cdecl, importc: "orxSoundSystem_CreateStream".}
proc loadStream*(internal_hUserData: orxHANDLE; internal_zFilename: cstring): ptr orxSOUNDSYSTEM_SOUND {.
    cdecl, importc: "orxSoundSystem_LoadStream".}
proc soundSystemDelete*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_Delete".}
proc play*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_Play".}
proc pause*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_Pause".}
proc stop*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_Stop".}
proc addFilter*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                internal_pstFilterData: ptr orxSOUND_FILTER_DATA;
                internal_bUseCustomParam: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_AddFilter".}
proc removeLastFilter*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_RemoveLastFilter".}
proc removeAllFilters*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_RemoveAllFilters".}
proc createBus*(internal_stBusID: orxSTRINGID): orxHANDLE {.cdecl,
    importc: "orxSoundSystem_CreateBus".}
proc deleteBus*(internal_hBus: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_DeleteBus".}
proc setBus*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
             internal_hBus: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetBus".}
proc setBusParent*(internal_hBus: orxHANDLE; internal_hParentBus: orxHANDLE): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_SetBusParent".}
proc addBusFilter*(internal_hBus: orxHANDLE;
                   internal_pstFilterData: ptr orxSOUND_FILTER_DATA;
                   internal_bUseCustomParam: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_AddBusFilter".}
proc removeLastBusFilter*(internal_hBus: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_RemoveLastBusFilter".}
proc removeAllBusFilters*(internal_hBus: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_RemoveAllBusFilters".}
proc soundSystemStartRecording*(internal_zName: cstring;
                                internal_bWriteToFile: orxBOOL;
                                internal_u32SampleRate: orxU32;
                                internal_u32ChannelNumber: orxU32): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_StartRecording".}
proc soundSystemStopRecording*(): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_StopRecording".}
proc soundSystemHasRecordingSupport*(): orxBOOL {.cdecl,
    importc: "orxSoundSystem_HasRecordingSupport".}
proc setVolume*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                internal_fVolume: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetVolume".}
proc setPitch*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
               internal_fPitch: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetPitch".}
proc setTime*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
              internal_fTime: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetTime".}
proc setPosition*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetPosition".}
proc setSpatialization*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                        internal_fMinDistance: orxFLOAT;
                        internal_fMaxDistance: orxFLOAT;
                        internal_fMinGain: orxFLOAT;
                        internal_fMaxGain: orxFLOAT; internal_fRollOff: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_SetSpatialization".}
proc setPanning*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                 internal_fPanning: orxFLOAT; internal_bMix: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_SetPanning".}
proc loop*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND; internal_bLoop: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_Loop".}
proc getVolume*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxFLOAT {.cdecl,
    importc: "orxSoundSystem_GetVolume".}
proc getPitch*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxFLOAT {.cdecl,
    importc: "orxSoundSystem_GetPitch".}
proc getTime*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxFLOAT {.cdecl,
    importc: "orxSoundSystem_GetTime".}
proc getPosition*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxSoundSystem_GetPosition".}
proc getSpatialization*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                        internal_pfMinDistance: ptr orxFLOAT;
                        internal_pfMaxDistance: ptr orxFLOAT;
                        internal_pfMinGain: ptr orxFLOAT;
                        internal_pfMaxGain: ptr orxFLOAT;
                        internal_pfRollOff: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_GetSpatialization".}
proc getPanning*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND;
                 internal_pfPanning: ptr orxFLOAT; internal_pbMix: ptr orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_GetPanning".}
proc isLooping*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxBOOL {.cdecl,
    importc: "orxSoundSystem_IsLooping".}
proc getDuration*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxFLOAT {.
    cdecl, importc: "orxSoundSystem_GetDuration".}
proc getStatus*(internal_pstSound: ptr orxSOUNDSYSTEM_SOUND): orxSOUNDSYSTEM_STATUS {.
    cdecl, importc: "orxSoundSystem_GetStatus".}
proc setGlobalVolume*(internal_fGlobalVolume: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundSystem_SetGlobalVolume".}
proc getGlobalVolume*(): orxFLOAT {.cdecl,
                                    importc: "orxSoundSystem_GetGlobalVolume".}
proc getListenerCount*(): orxU32 {.cdecl,
                                   importc: "orxSoundSystem_GetListenerCount".}
proc enableListener*(internal_u32ListenerIndex: orxU32;
                     internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxSoundSystem_EnableListener".}
proc isListenerEnabled*(internal_u32ListenerIndex: orxU32): orxBOOL {.cdecl,
    importc: "orxSoundSystem_IsListenerEnabled".}
proc setListenerPosition*(internal_u32Index: orxU32;
                          internal_pvPosition: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxSoundSystem_SetListenerPosition".}
proc getListenerPosition*(internal_u32Index: orxU32;
                          internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxSoundSystem_GetListenerPosition".}
proc soundSetup*(): void {.cdecl, importc: "orxSound_Setup".}
proc soundInit*(): orxSTATUS {.cdecl, importc: "orxSound_Init".}
proc soundExit*(): void {.cdecl, importc: "orxSound_Exit".}
proc soundCreate*(): ptr orxSOUND {.cdecl, importc: "orxSound_Create".}
proc soundCreateFromConfig*(internal_zConfigID: cstring): ptr orxSOUND {.cdecl,
    importc: "orxSound_CreateFromConfig".}
proc createWithEmptyStream*(internal_u32ChannelNumber: orxU32;
                            internal_u32SampleRate: orxU32;
                            internal_zName: cstring): ptr orxSOUND {.cdecl,
    importc: "orxSound_CreateWithEmptyStream".}
proc soundDelete*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_Delete".}
proc soundClearCache*(): orxSTATUS {.cdecl, importc: "orxSound_ClearCache".}
proc createSample*(internal_u32ChannelNumber: orxU32;
                   internal_u32FrameNumber: orxU32;
                   internal_u32SampleRate: orxU32; internal_zName: cstring): ptr orxSOUND_SAMPLE {.
    cdecl, importc: "orxSound_CreateSample".}
proc deleteSample*(internal_pstSample: ptr orxSOUND_SAMPLE): orxSTATUS {.cdecl,
    importc: "orxSound_DeleteSample".}
proc getSampleInfo*(internal_pstSample: ptr orxSOUND_SAMPLE;
                    internal_pu32ChannelNumber: ptr orxU32;
                    internal_pu32FrameNumber: ptr orxU32;
                    internal_pu32SampleRate: ptr orxU32): orxSTATUS {.cdecl,
    importc: "orxSound_GetSampleInfo".}
proc setSampleData*(internal_pstSample: ptr orxSOUND_SAMPLE;
                    internal_afData: ptr orxFLOAT;
                    internal_u32SampleNumber: orxU32): orxSTATUS {.cdecl,
    importc: "orxSound_SetSampleData".}
proc linkSample*(internal_pstSound: ptr orxSOUND; internal_zSampleName: cstring): orxSTATUS {.
    cdecl, importc: "orxSound_LinkSample".}
proc unlinkSample*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_UnlinkSample".}
proc isStream*(internal_pstSound: ptr orxSOUND): orxBOOL {.cdecl,
    importc: "orxSound_IsStream".}
proc play*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_Play".}
proc pause*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_Pause".}
proc stop*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_Stop".}
proc addFilter*(internal_pstSound: ptr orxSOUND;
                internal_pstFilterData: ptr orxSOUND_FILTER_DATA;
                internal_bUseCustomParam: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSound_AddFilter".}
proc removeLastFilter*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_RemoveLastFilter".}
proc removeAllFilters*(internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSound_RemoveAllFilters".}
proc addFilterFromConfig*(internal_pstSound: ptr orxSOUND;
                          internal_zFilterConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxSound_AddFilterFromConfig".}
proc soundStartRecording*(internal_zName: cstring;
                          internal_bWriteToFile: orxBOOL;
                          internal_u32SampleRate: orxU32;
                          internal_u32ChannelNumber: orxU32): orxSTATUS {.cdecl,
    importc: "orxSound_StartRecording".}
proc soundStopRecording*(): orxSTATUS {.cdecl, importc: "orxSound_StopRecording".}
proc soundHasRecordingSupport*(): orxBOOL {.cdecl,
    importc: "orxSound_HasRecordingSupport".}
proc setVolume*(internal_pstSound: ptr orxSOUND; internal_fVolume: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetVolume".}
proc setPitch*(internal_pstSound: ptr orxSOUND; internal_fPitch: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetPitch".}
proc setTime*(internal_pstSound: ptr orxSOUND; internal_fTime: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetTime".}
proc setPosition*(internal_pstSound: ptr orxSOUND;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxSound_SetPosition".}
proc setSpatialization*(internal_pstSound: ptr orxSOUND;
                        internal_fMinDistance: orxFLOAT;
                        internal_fMaxDistance: orxFLOAT;
                        internal_fMinGain: orxFLOAT;
                        internal_fMaxGain: orxFLOAT; internal_fRollOff: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetSpatialization".}
proc setPanning*(internal_pstSound: ptr orxSOUND; internal_fPanning: orxFLOAT;
                 internal_bMix: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSound_SetPanning".}
proc loop*(internal_pstSound: ptr orxSOUND; internal_bLoop: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSound_Loop".}
proc getVolume*(internal_pstSound: ptr orxSOUND): orxFLOAT {.cdecl,
    importc: "orxSound_GetVolume".}
proc getPitch*(internal_pstSound: ptr orxSOUND): orxFLOAT {.cdecl,
    importc: "orxSound_GetPitch".}
proc getTime*(internal_pstSound: ptr orxSOUND): orxFLOAT {.cdecl,
    importc: "orxSound_GetTime".}
proc getPosition*(internal_pstSound: ptr orxSOUND;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxSound_GetPosition".}
proc getSpatialization*(internal_pstSound: ptr orxSOUND;
                        internal_pfMinDistance: ptr orxFLOAT;
                        internal_pfMaxDistance: ptr orxFLOAT;
                        internal_pfMinGain: ptr orxFLOAT;
                        internal_pfMaxGain: ptr orxFLOAT;
                        internal_pfRollOff: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSound_GetSpatialization".}
proc getPanning*(internal_pstSound: ptr orxSOUND;
                 internal_pfPanning: ptr orxFLOAT; internal_pbMix: ptr orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSound_GetPanning".}
proc isLooping*(internal_pstSound: ptr orxSOUND): orxBOOL {.cdecl,
    importc: "orxSound_IsLooping".}
proc getDuration*(internal_pstSound: ptr orxSOUND): orxFLOAT {.cdecl,
    importc: "orxSound_GetDuration".}
proc getStatus*(internal_pstSound: ptr orxSOUND): orxSOUND_STATUS {.cdecl,
    importc: "orxSound_GetStatus".}
proc getName*(internal_pstSound: ptr orxSOUND): cstring {.cdecl,
    importc: "orxSound_GetName".}
proc getMasterBusID*(): orxSTRINGID {.cdecl, importc: "orxSound_GetMasterBusID".}
proc getBusID*(internal_pstSound: ptr orxSOUND): orxSTRINGID {.cdecl,
    importc: "orxSound_GetBusID".}
proc setBusID*(internal_pstSound: ptr orxSOUND; internal_stBusID: orxSTRINGID): orxSTATUS {.
    cdecl, importc: "orxSound_SetBusID".}
proc getNext*(internal_pstSound: ptr orxSOUND; internal_stBusID: orxSTRINGID): ptr orxSOUND {.
    cdecl, importc: "orxSound_GetNext".}
proc getBusParent*(internal_stBusID: orxSTRINGID): orxSTRINGID {.cdecl,
    importc: "orxSound_GetBusParent".}
proc getBusChild*(internal_stBusID: orxSTRINGID): orxSTRINGID {.cdecl,
    importc: "orxSound_GetBusChild".}
proc getBusSibling*(internal_stBusID: orxSTRINGID): orxSTRINGID {.cdecl,
    importc: "orxSound_GetBusSibling".}
proc setBusParent*(internal_stBusID: orxSTRINGID;
                   internal_stParentBusID: orxSTRINGID): orxSTATUS {.cdecl,
    importc: "orxSound_SetBusParent".}
proc getBusVolume*(internal_stBusID: orxSTRINGID): orxFLOAT {.cdecl,
    importc: "orxSound_GetBusVolume".}
proc getBusPitch*(internal_stBusID: orxSTRINGID): orxFLOAT {.cdecl,
    importc: "orxSound_GetBusPitch".}
proc setBusVolume*(internal_stBusID: orxSTRINGID; internal_fVolume: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetBusVolume".}
proc setBusPitch*(internal_stBusID: orxSTRINGID; internal_fPitch: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxSound_SetBusPitch".}
proc getBusGlobalVolume*(internal_stBusID: orxSTRINGID): orxFLOAT {.cdecl,
    importc: "orxSound_GetBusGlobalVolume".}
proc getBusGlobalPitch*(internal_stBusID: orxSTRINGID): orxFLOAT {.cdecl,
    importc: "orxSound_GetBusGlobalPitch".}
proc addBusFilter*(internal_stBusID: orxSTRINGID;
                   internal_pstFilterData: ptr orxSOUND_FILTER_DATA;
                   internal_bUseCustomParam: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSound_AddBusFilter".}
proc removeLastBusFilter*(internal_stBusID: orxSTRINGID): orxSTATUS {.cdecl,
    importc: "orxSound_RemoveLastBusFilter".}
proc removeAllBusFilters*(internal_stBusID: orxSTRINGID): orxSTATUS {.cdecl,
    importc: "orxSound_RemoveAllBusFilters".}
proc addBusFilterFromConfig*(internal_stBusID: orxSTRINGID;
                             internal_zFilterConfigID: cstring): orxSTATUS {.
    cdecl, importc: "orxSound_AddBusFilterFromConfig".}
proc objectSetup*(): void {.cdecl, importc: "orxObject_Setup".}
proc objectInit*(): orxSTATUS {.cdecl, importc: "orxObject_Init".}
proc objectExit*(): void {.cdecl, importc: "orxObject_Exit".}
proc objectCreate*(): ptr orxOBJECT {.cdecl, importc: "orxObject_Create".}
proc objectCreateFromConfig*(internal_zConfigID: cstring): ptr orxOBJECT {.
    cdecl, importc: "orxObject_CreateFromConfig".}
proc objectDelete*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_Delete".}
proc objectUpdate*(internal_pstObject: ptr orxOBJECT;
                   internal_pstClockInfo: ptr orxCLOCK_INFO): orxSTATUS {.cdecl,
    importc: "orxObject_Update".}
proc enable*(internal_pstObject: ptr orxOBJECT; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxObject_Enable".}
proc enableRecursive*(internal_pstObject: ptr orxOBJECT;
                      internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxObject_EnableRecursive".}
proc isEnabled*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_IsEnabled".}
proc pause*(internal_pstObject: ptr orxOBJECT; internal_bPause: orxBOOL): void {.
    cdecl, importc: "orxObject_Pause".}
proc pauseRecursive*(internal_pstObject: ptr orxOBJECT; internal_bPause: orxBOOL): void {.
    cdecl, importc: "orxObject_PauseRecursive".}
proc isPaused*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_IsPaused".}
proc setUserData*(internal_pstObject: ptr orxOBJECT; internal_pUserData: pointer): void {.
    cdecl, importc: "orxObject_SetUserData".}
proc getUserData*(internal_pstObject: ptr orxOBJECT): pointer {.cdecl,
    importc: "orxObject_GetUserData".}
proc setOwner*(internal_pstObject: ptr orxOBJECT; internal_pOwner: pointer): void {.
    cdecl, importc: "orxObject_SetOwner".}
proc getOwner*(internal_pstObject: ptr orxOBJECT): ptr orxSTRUCTURE {.cdecl,
    importc: "orxObject_GetOwner".}
proc getOwnedChild*(internal_pstObject: ptr orxOBJECT): ptr orxOBJECT {.cdecl,
    importc: "orxObject_GetOwnedChild".}
proc getOwnedSibling*(internal_pstObject: ptr orxOBJECT): ptr orxOBJECT {.cdecl,
    importc: "orxObject_GetOwnedSibling".}
proc findOwnedChild*(internal_pstObject: ptr orxOBJECT; internal_zPath: cstring): ptr orxOBJECT {.
    cdecl, importc: "orxObject_FindOwnedChild".}
proc setClock*(internal_pstObject: ptr orxOBJECT;
               internal_pstClock: ptr orxCLOCK): orxSTATUS {.cdecl,
    importc: "orxObject_SetClock".}
proc setClockRecursive*(internal_pstObject: ptr orxOBJECT;
                        internal_pstClock: ptr orxCLOCK): void {.cdecl,
    importc: "orxObject_SetClockRecursive".}
proc getClock*(internal_pstObject: ptr orxOBJECT): ptr orxCLOCK {.cdecl,
    importc: "orxObject_GetClock".}
proc linkStructure*(internal_pstObject: ptr orxOBJECT;
                    internal_pstStructure: ptr orxSTRUCTURE): orxSTATUS {.cdecl,
    importc: "orxObject_LinkStructure".}
proc unlinkStructure*(internal_pstObject: ptr orxOBJECT;
                      internal_eStructureID: orxSTRUCTURE_ID): void {.cdecl,
    importc: "orxObject_UnlinkStructure".}
proc internal_orxObject_GetStructure*(internal_pstObject: ptr orxOBJECT;
                                      internal_eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE {.
    cdecl, importc: "_orxObject_GetStructure".}
proc setFlip*(internal_pstObject: ptr orxOBJECT; internal_bFlipX: orxBOOL;
              internal_bFlipY: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxObject_SetFlip".}
proc getFlip*(internal_pstObject: ptr orxOBJECT; internal_pbFlipX: ptr orxBOOL;
              internal_pbFlipY: ptr orxBOOL): orxSTATUS {.cdecl,
    importc: "orxObject_GetFlip".}
proc setPivot*(internal_pstObject: ptr orxOBJECT;
               internal_pvPivot: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetPivot".}
proc setRelativePivot*(internal_pstObject: ptr orxOBJECT;
                       internal_u32AlignFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxObject_SetRelativePivot".}
proc setOrigin*(internal_pstObject: ptr orxOBJECT;
                internal_pvOrigin: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetOrigin".}
proc setSize*(internal_pstObject: ptr orxOBJECT; internal_pvSize: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxObject_SetSize".}
proc getPivot*(internal_pstObject: ptr orxOBJECT;
               internal_pvPivot: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetPivot".}
proc getOrigin*(internal_pstObject: ptr orxOBJECT;
                internal_pvOrigin: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetOrigin".}
proc getSize*(internal_pstObject: ptr orxOBJECT; internal_pvSize: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetSize".}
proc setPosition*(internal_pstObject: ptr orxOBJECT;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetPosition".}
proc setWorldPosition*(internal_pstObject: ptr orxOBJECT;
                       internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetWorldPosition".}
proc setRotation*(internal_pstObject: ptr orxOBJECT;
                  internal_fRotation: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetRotation".}
proc setWorldRotation*(internal_pstObject: ptr orxOBJECT;
                       internal_fRotation: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetWorldRotation".}
proc setScale*(internal_pstObject: ptr orxOBJECT;
               internal_pvScale: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetScale".}
proc setWorldScale*(internal_pstObject: ptr orxOBJECT;
                    internal_pvScale: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetWorldScale".}
proc getPosition*(internal_pstObject: ptr orxOBJECT;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetPosition".}
proc getWorldPosition*(internal_pstObject: ptr orxOBJECT;
                       internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetWorldPosition".}
proc getRotation*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetRotation".}
proc getWorldRotation*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetWorldRotation".}
proc getScale*(internal_pstObject: ptr orxOBJECT;
               internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetScale".}
proc getWorldScale*(internal_pstObject: ptr orxOBJECT;
                    internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetWorldScale".}
proc setParent*(internal_pstObject: ptr orxOBJECT; internal_pParent: pointer): orxSTATUS {.
    cdecl, importc: "orxObject_SetParent".}
proc getParent*(internal_pstObject: ptr orxOBJECT): ptr orxSTRUCTURE {.cdecl,
    importc: "orxObject_GetParent".}
proc getChild*(internal_pstObject: ptr orxOBJECT): ptr orxOBJECT {.cdecl,
    importc: "orxObject_GetChild".}
proc getSibling*(internal_pstObject: ptr orxOBJECT): ptr orxOBJECT {.cdecl,
    importc: "orxObject_GetSibling".}
proc getNextChild*(internal_pstObject: ptr orxOBJECT; internal_pChild: pointer;
                   internal_eStructureID: orxSTRUCTURE_ID): ptr orxSTRUCTURE {.
    cdecl, importc: "orxObject_GetNextChild".}
proc findChild*(internal_pstObject: ptr orxOBJECT; internal_zPath: cstring): ptr orxOBJECT {.
    cdecl, importc: "orxObject_FindChild".}
proc attach*(internal_pstObject: ptr orxOBJECT; internal_pParent: pointer): orxSTATUS {.
    cdecl, importc: "orxObject_Attach".}
proc detach*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_Detach".}
proc setIgnoreFlags*(internal_pstObject: ptr orxOBJECT;
                     internal_u32IgnoreFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxObject_SetIgnoreFlags".}
proc setLiteralIgnoreFlags*(internal_pstObject: ptr orxOBJECT;
                            internal_zIgnoreFlags: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_SetLiteralIgnoreFlags".}
proc getIgnoreFlags*(internal_pstObject: ptr orxOBJECT): orxU32 {.cdecl,
    importc: "orxObject_GetIgnoreFlags".}
proc getLiteralIgnoreFlags*(internal_pstObject: ptr orxOBJECT): cstring {.cdecl,
    importc: "orxObject_GetLiteralIgnoreFlags".}
proc logParents*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_LogParents".}
proc setAnimSet*(internal_pstObject: ptr orxOBJECT;
                 internal_pstAnimSet: ptr orxANIMSET): orxSTATUS {.cdecl,
    importc: "orxObject_SetAnimSet".}
proc setAnimFrequency*(internal_pstObject: ptr orxOBJECT;
                       internal_fFrequency: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetAnimFrequency".}
proc setAnimFrequencyRecursive*(internal_pstObject: ptr orxOBJECT;
                                internal_fFrequency: orxFLOAT): void {.cdecl,
    importc: "orxObject_SetAnimFrequencyRecursive".}
proc getAnimFrequency*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetAnimFrequency".}
proc setAnimTime*(internal_pstObject: ptr orxOBJECT; internal_fTime: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_SetAnimTime".}
proc setAnimTimeRecursive*(internal_pstObject: ptr orxOBJECT;
                           internal_fTime: orxFLOAT): void {.cdecl,
    importc: "orxObject_SetAnimTimeRecursive".}
proc getAnimTime*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetAnimTime".}
proc setCurrentAnim*(internal_pstObject: ptr orxOBJECT;
                     internal_zAnimName: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_SetCurrentAnim".}
proc setCurrentAnimRecursive*(internal_pstObject: ptr orxOBJECT;
                              internal_zAnimName: cstring): void {.cdecl,
    importc: "orxObject_SetCurrentAnimRecursive".}
proc setTargetAnim*(internal_pstObject: ptr orxOBJECT;
                    internal_zAnimName: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_SetTargetAnim".}
proc setTargetAnimRecursive*(internal_pstObject: ptr orxOBJECT;
                             internal_zAnimName: cstring): void {.cdecl,
    importc: "orxObject_SetTargetAnimRecursive".}
proc getCurrentAnim*(internal_pstObject: ptr orxOBJECT): cstring {.cdecl,
    importc: "orxObject_GetCurrentAnim".}
proc getTargetAnim*(internal_pstObject: ptr orxOBJECT): cstring {.cdecl,
    importc: "orxObject_GetTargetAnim".}
proc isCurrentAnim*(internal_pstObject: ptr orxOBJECT;
                    internal_zAnimName: cstring): orxBOOL {.cdecl,
    importc: "orxObject_IsCurrentAnim".}
proc isTargetAnim*(internal_pstObject: ptr orxOBJECT;
                   internal_zAnimName: cstring): orxBOOL {.cdecl,
    importc: "orxObject_IsTargetAnim".}
proc setSpeed*(internal_pstObject: ptr orxOBJECT;
               internal_pvSpeed: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetSpeed".}
proc setRelativeSpeed*(internal_pstObject: ptr orxOBJECT;
                       internal_pvRelativeSpeed: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxObject_SetRelativeSpeed".}
proc setAngularVelocity*(internal_pstObject: ptr orxOBJECT;
                         internal_fVelocity: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetAngularVelocity".}
proc setCustomGravity*(internal_pstObject: ptr orxOBJECT;
                       internal_pvCustomGravity: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxObject_SetCustomGravity".}
proc getSpeed*(internal_pstObject: ptr orxOBJECT;
               internal_pvSpeed: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxObject_GetSpeed".}
proc getRelativeSpeed*(internal_pstObject: ptr orxOBJECT;
                       internal_pvRelativeSpeed: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetRelativeSpeed".}
proc getAngularVelocity*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetAngularVelocity".}
proc getCustomGravity*(internal_pstObject: ptr orxOBJECT;
                       internal_pvCustomGravity: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetCustomGravity".}
proc getMass*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetMass".}
proc getMassCenter*(internal_pstObject: ptr orxOBJECT;
                    internal_pvMassCenter: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetMassCenter".}
proc applyTorque*(internal_pstObject: ptr orxOBJECT; internal_fTorque: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_ApplyTorque".}
proc applyForce*(internal_pstObject: ptr orxOBJECT;
                 internal_pvForce: ptr orxVECTOR;
                 internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_ApplyForce".}
proc applyImpulse*(internal_pstObject: ptr orxOBJECT;
                   internal_pvImpulse: ptr orxVECTOR;
                   internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxObject_ApplyImpulse".}
proc objectRaycast*(internal_pvBegin: ptr orxVECTOR;
                    internal_pvEnd: ptr orxVECTOR;
                    internal_u16SelfFlags: orxU16;
                    internal_u16CheckMask: orxU16; internal_bEarlyExit: orxBOOL;
                    internal_pvContact: ptr orxVECTOR;
                    internal_pvNormal: ptr orxVECTOR): ptr orxOBJECT {.cdecl,
    importc: "orxObject_Raycast".}
proc setTextString*(internal_pstObject: ptr orxOBJECT; internal_zString: cstring): orxSTATUS {.
    cdecl, importc: "orxObject_SetTextString".}
proc getTextString*(internal_pstObject: ptr orxOBJECT): cstring {.cdecl,
    importc: "orxObject_GetTextString".}
proc getBoundingBox*(internal_pstObject: ptr orxOBJECT;
                     internal_pstBoundingBox: ptr orxOBOX): ptr orxOBOX {.cdecl,
    importc: "orxObject_GetBoundingBox".}
proc addFX*(internal_pstObject: ptr orxOBJECT; internal_zFXConfigID: cstring): orxSTATUS {.
    cdecl, importc: "orxObject_AddFX".}
proc addFXRecursive*(internal_pstObject: ptr orxOBJECT;
                     internal_zFXConfigID: cstring;
                     internal_fPropagationDelay: orxFLOAT): void {.cdecl,
    importc: "orxObject_AddFXRecursive".}
proc addUniqueFX*(internal_pstObject: ptr orxOBJECT;
                  internal_zFXConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddUniqueFX".}
proc addUniqueFXRecursive*(internal_pstObject: ptr orxOBJECT;
                           internal_zFXConfigID: cstring;
                           internal_fPropagationDelay: orxFLOAT): void {.cdecl,
    importc: "orxObject_AddUniqueFXRecursive".}
proc removeFX*(internal_pstObject: ptr orxOBJECT; internal_zFXConfigID: cstring): orxSTATUS {.
    cdecl, importc: "orxObject_RemoveFX".}
proc removeFXRecursive*(internal_pstObject: ptr orxOBJECT;
                        internal_zFXConfigID: cstring): void {.cdecl,
    importc: "orxObject_RemoveFXRecursive".}
proc removeAllFXs*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveAllFXs".}
proc removeAllFXsRecursive*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.
    cdecl, importc: "orxObject_RemoveAllFXsRecursive".}
proc setFXFrequency*(internal_pstObject: ptr orxOBJECT;
                     internal_fFrequency: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetFXFrequency".}
proc setFXFrequencyRecursive*(internal_pstObject: ptr orxOBJECT;
                              internal_fFrequency: orxFLOAT): void {.cdecl,
    importc: "orxObject_SetFXFrequencyRecursive".}
proc getFXFrequency*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetFXFrequency".}
proc setFXTime*(internal_pstObject: ptr orxOBJECT; internal_fTime: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_SetFXTime".}
proc setFXTimeRecursive*(internal_pstObject: ptr orxOBJECT;
                         internal_fTime: orxFLOAT): void {.cdecl,
    importc: "orxObject_SetFXTimeRecursive".}
proc getFXTime*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetFXTime".}
proc synchronizeFX*(internal_pstObject: ptr orxOBJECT;
                    internal_pstModel: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_SynchronizeFX".}
proc addSound*(internal_pstObject: ptr orxOBJECT;
               internal_zSoundConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddSound".}
proc removeSound*(internal_pstObject: ptr orxOBJECT;
                  internal_zSoundConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveSound".}
proc removeAllSounds*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveAllSounds".}
proc getLastAddedSound*(internal_pstObject: ptr orxOBJECT): ptr orxSOUND {.
    cdecl, importc: "orxObject_GetLastAddedSound".}
proc setVolume*(internal_pstObject: ptr orxOBJECT; internal_fVolume: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_SetVolume".}
proc setPitch*(internal_pstObject: ptr orxOBJECT; internal_fPitch: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_SetPitch".}
proc setPanning*(internal_pstObject: ptr orxOBJECT; internal_fPanning: orxFLOAT;
                 internal_bMix: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxObject_SetPanning".}
proc play*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_Play".}
proc stop*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_Stop".}
proc addFilter*(internal_pstObject: ptr orxOBJECT;
                internal_zFilterConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddFilter".}
proc removeLastFilter*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveLastFilter".}
proc removeAllFilters*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveAllFilters".}
proc addShader*(internal_pstObject: ptr orxOBJECT;
                internal_zShaderConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddShader".}
proc addShaderRecursive*(internal_pstObject: ptr orxOBJECT;
                         internal_zShaderConfigID: cstring): void {.cdecl,
    importc: "orxObject_AddShaderRecursive".}
proc removeShader*(internal_pstObject: ptr orxOBJECT;
                   internal_zShaderConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveShader".}
proc removeShaderRecursive*(internal_pstObject: ptr orxOBJECT;
                            internal_zShaderConfigID: cstring): void {.cdecl,
    importc: "orxObject_RemoveShaderRecursive".}
proc enableShader*(internal_pstObject: ptr orxOBJECT; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxObject_EnableShader".}
proc isShaderEnabled*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_IsShaderEnabled".}
proc addTimeLineTrack*(internal_pstObject: ptr orxOBJECT;
                       internal_zTrackConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddTimeLineTrack".}
proc addTimeLineTrackRecursive*(internal_pstObject: ptr orxOBJECT;
                                internal_zTrackConfigID: cstring): void {.cdecl,
    importc: "orxObject_AddTimeLineTrackRecursive".}
proc removeTimeLineTrack*(internal_pstObject: ptr orxOBJECT;
                          internal_zTrackConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveTimeLineTrack".}
proc removeTimeLineTrackRecursive*(internal_pstObject: ptr orxOBJECT;
                                   internal_zTrackConfigID: cstring): void {.
    cdecl, importc: "orxObject_RemoveTimeLineTrackRecursive".}
proc enableTimeLine*(internal_pstObject: ptr orxOBJECT;
                     internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxObject_EnableTimeLine".}
proc isTimeLineEnabled*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_IsTimeLineEnabled".}
proc addTrigger*(internal_pstObject: ptr orxOBJECT;
                 internal_zTriggerConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_AddTrigger".}
proc addTriggerRecursive*(internal_pstObject: ptr orxOBJECT;
                          internal_zTriggerConfigID: cstring): void {.cdecl,
    importc: "orxObject_AddTriggerRecursive".}
proc removeTrigger*(internal_pstObject: ptr orxOBJECT;
                    internal_zTriggerConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_RemoveTrigger".}
proc removeTriggerRecursive*(internal_pstObject: ptr orxOBJECT;
                             internal_zTriggerConfigID: cstring): void {.cdecl,
    importc: "orxObject_RemoveTriggerRecursive".}
proc fireTrigger*(internal_pstObject: ptr orxOBJECT; internal_zEvent: cstring;
                  internal_azRefinementList: ptr cstring;
                  internal_u32Size: orxU32): orxSTATUS {.cdecl,
    importc: "orxObject_FireTrigger".}
proc fireTriggerRecursive*(internal_pstObject: ptr orxOBJECT;
                           internal_zEvent: cstring;
                           internal_azRefinementList: ptr cstring;
                           internal_u32Size: orxU32): void {.cdecl,
    importc: "orxObject_FireTriggerRecursive".}
proc getName*(internal_pstObject: ptr orxOBJECT): cstring {.cdecl,
    importc: "orxObject_GetName".}
proc createNeighborList*(internal_pstCheckBox: ptr orxOBOX;
                         internal_stGroupID: orxSTRINGID): ptr orxBANK {.cdecl,
    importc: "orxObject_CreateNeighborList".}
proc deleteNeighborList*(internal_pstObjectList: ptr orxBANK): void {.cdecl,
    importc: "orxObject_DeleteNeighborList".}
proc setSmoothing*(internal_pstObject: ptr orxOBJECT;
                   internal_eSmoothing: orxDISPLAY_SMOOTHING): orxSTATUS {.
    cdecl, importc: "orxObject_SetSmoothing".}
proc setSmoothingRecursive*(internal_pstObject: ptr orxOBJECT;
                            internal_eSmoothing: orxDISPLAY_SMOOTHING): void {.
    cdecl, importc: "orxObject_SetSmoothingRecursive".}
proc getSmoothing*(internal_pstObject: ptr orxOBJECT): orxDISPLAY_SMOOTHING {.
    cdecl, importc: "orxObject_GetSmoothing".}
proc getWorkingTexture*(internal_pstObject: ptr orxOBJECT): ptr orxTEXTURE {.
    cdecl, importc: "orxObject_GetWorkingTexture".}
proc getWorkingGraphic*(internal_pstObject: ptr orxOBJECT): ptr orxGRAPHIC {.
    cdecl, importc: "orxObject_GetWorkingGraphic".}
proc setColor*(internal_pstObject: ptr orxOBJECT;
               internal_pstColor: ptr orxCOLOR): orxSTATUS {.cdecl,
    importc: "orxObject_SetColor".}
proc setColorRecursive*(internal_pstObject: ptr orxOBJECT;
                        internal_pstColor: ptr orxCOLOR): void {.cdecl,
    importc: "orxObject_SetColorRecursive".}
proc hasColor*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_HasColor".}
proc getColor*(internal_pstObject: ptr orxOBJECT;
               internal_pstColor: ptr orxCOLOR): ptr orxCOLOR {.cdecl,
    importc: "orxObject_GetColor".}
proc setRGB*(internal_pstObject: ptr orxOBJECT; internal_pvRGB: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxObject_SetRGB".}
proc setRGBRecursive*(internal_pstObject: ptr orxOBJECT;
                      internal_pvRGB: ptr orxVECTOR): void {.cdecl,
    importc: "orxObject_SetRGBRecursive".}
proc getRGB*(internal_pstObject: ptr orxOBJECT; internal_pvRGB: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxObject_GetRGB".}
proc setAlpha*(internal_pstObject: ptr orxOBJECT; internal_fAlpha: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxObject_SetAlpha".}
proc setAlphaRecursive*(internal_pstObject: ptr orxOBJECT;
                        internal_fAlpha: orxFLOAT): void {.cdecl,
    importc: "orxObject_SetAlphaRecursive".}
proc getAlpha*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetAlpha".}
proc setRepeat*(internal_pstObject: ptr orxOBJECT; internal_fRepeatX: orxFLOAT;
                internal_fRepeatY: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetRepeat".}
proc getRepeat*(internal_pstObject: ptr orxOBJECT;
                internal_pfRepeatX: ptr orxFLOAT;
                internal_pfRepeatY: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_GetRepeat".}
proc setBlendMode*(internal_pstObject: ptr orxOBJECT;
                   internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxObject_SetBlendMode".}
proc setBlendModeRecursive*(internal_pstObject: ptr orxOBJECT;
                            internal_eBlendMode: orxDISPLAY_BLEND_MODE): void {.
    cdecl, importc: "orxObject_SetBlendModeRecursive".}
proc hasBlendMode*(internal_pstObject: ptr orxOBJECT): orxBOOL {.cdecl,
    importc: "orxObject_HasBlendMode".}
proc getBlendMode*(internal_pstObject: ptr orxOBJECT): orxDISPLAY_BLEND_MODE {.
    cdecl, importc: "orxObject_GetBlendMode".}
proc setLiteralLifeTime*(internal_pstObject: ptr orxOBJECT;
                         internal_zLifeTime: cstring): orxSTATUS {.cdecl,
    importc: "orxObject_SetLiteralLifeTime".}
proc setLifeTime*(internal_pstObject: ptr orxOBJECT;
                  internal_fLifeTime: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxObject_SetLifeTime".}
proc getLifeTime*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetLifeTime".}
proc getActiveTime*(internal_pstObject: ptr orxOBJECT): orxFLOAT {.cdecl,
    importc: "orxObject_GetActiveTime".}
proc resetActiveTime*(internal_pstObject: ptr orxOBJECT): orxSTATUS {.cdecl,
    importc: "orxObject_ResetActiveTime".}
proc resetActiveTimeRecursive*(internal_pstObject: ptr orxOBJECT): void {.cdecl,
    importc: "orxObject_ResetActiveTimeRecursive".}
proc getDefaultGroupID*(): orxSTRINGID {.cdecl,
    importc: "orxObject_GetDefaultGroupID".}
proc getGroupID*(internal_pstObject: ptr orxOBJECT): orxSTRINGID {.cdecl,
    importc: "orxObject_GetGroupID".}
proc setGroupID*(internal_pstObject: ptr orxOBJECT;
                 internal_stGroupID: orxSTRINGID): orxSTATUS {.cdecl,
    importc: "orxObject_SetGroupID".}
proc setGroupIDRecursive*(internal_pstObject: ptr orxOBJECT;
                          internal_stGroupID: orxSTRINGID): void {.cdecl,
    importc: "orxObject_SetGroupIDRecursive".}
proc getNext*(internal_pstObject: ptr orxOBJECT; internal_stGroupID: orxSTRINGID): ptr orxOBJECT {.
    cdecl, importc: "orxObject_GetNext".}
proc getNextEnabled*(internal_pstObject: ptr orxOBJECT;
                     internal_stGroupID: orxSTRINGID): ptr orxOBJECT {.cdecl,
    importc: "orxObject_GetNextEnabled".}
proc pick*(internal_pvPosition: ptr orxVECTOR; internal_stGroupID: orxSTRINGID): ptr orxOBJECT {.
    cdecl, importc: "orxObject_Pick".}
proc boxPick*(internal_pstBox: ptr orxOBOX; internal_stGroupID: orxSTRINGID): ptr orxOBJECT {.
    cdecl, importc: "orxObject_BoxPick".}
proc fXSetup*(): void {.cdecl, importc: "orxFX_Setup".}
proc fXInit*(): orxSTATUS {.cdecl, importc: "orxFX_Init".}
proc fXExit*(): void {.cdecl, importc: "orxFX_Exit".}
proc fXCreate*(): ptr orxFX {.cdecl, importc: "orxFX_Create".}
proc fXCreateFromConfig*(internal_zConfigID: cstring): ptr orxFX {.cdecl,
    importc: "orxFX_CreateFromConfig".}
proc fXDelete*(internal_pstFX: ptr orxFX): orxSTATUS {.cdecl,
    importc: "orxFX_Delete".}
proc fXClearCache*(): orxSTATUS {.cdecl, importc: "orxFX_ClearCache".}
proc apply*(internal_pstFX: ptr orxFX; internal_pstObject: ptr orxOBJECT;
            internal_fPreviousTime: orxFLOAT; internal_fTime: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFX_Apply".}
proc getFloat*(internal_pstFX: ptr orxFX; internal_fPreviousTime: orxFLOAT;
               internal_fTime: orxFLOAT): orxFLOAT {.cdecl,
    importc: "orxFX_GetFloat".}
proc getVector*(internal_pstFX: ptr orxFX; internal_fPreviousTime: orxFLOAT;
                internal_fTime: orxFLOAT; internal_pvVector: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxFX_GetVector".}
proc enable*(internal_pstFX: ptr orxFX; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxFX_Enable".}
proc isEnabled*(internal_pstFX: ptr orxFX): orxBOOL {.cdecl,
    importc: "orxFX_IsEnabled".}
proc addSlot*(internal_pstFX: ptr orxFX; internal_eType: orxFX_TYPE;
              internal_eCurve: orxFX_CURVE;
              internal_pstCurveParam: ptr orxFX_CURVE_PARAM;
              internal_u32Flags: orxU32): orxSTATUS {.cdecl,
    importc: "orxFX_AddSlot".}
proc addSlotFromConfig*(internal_pstFX: ptr orxFX; internal_zSlotID: cstring): orxSTATUS {.
    cdecl, importc: "orxFX_AddSlotFromConfig".}
proc getDuration*(internal_pstFX: ptr orxFX): orxFLOAT {.cdecl,
    importc: "orxFX_GetDuration".}
proc getName*(internal_pstFX: ptr orxFX): cstring {.cdecl,
    importc: "orxFX_GetName".}
proc loop*(internal_pstFX: ptr orxFX; internal_bLoop: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxFX_Loop".}
proc isLooping*(internal_pstFX: ptr orxFX): orxBOOL {.cdecl,
    importc: "orxFX_IsLooping".}
proc setStagger*(internal_pstFX: ptr orxFX; internal_bStagger: orxBOOL;
                 internal_fOffset: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxFX_SetStagger".}
proc getStagger*(internal_pstFX: ptr orxFX; internal_pfOffset: ptr orxFLOAT): orxBOOL {.
    cdecl, importc: "orxFX_GetStagger".}
proc fXPointerSetup*(): void {.cdecl, importc: "orxFXPointer_Setup".}
proc fXPointerInit*(): orxSTATUS {.cdecl, importc: "orxFXPointer_Init".}
proc fXPointerExit*(): void {.cdecl, importc: "orxFXPointer_Exit".}
proc fXPointerCreate*(): ptr orxFXPOINTER {.cdecl,
    importc: "orxFXPointer_Create".}
proc fXPointerDelete*(internal_pstFXPointer: ptr orxFXPOINTER): orxSTATUS {.
    cdecl, importc: "orxFXPointer_Delete".}
proc enable*(internal_pstFXPointer: ptr orxFXPOINTER; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxFXPointer_Enable".}
proc isEnabled*(internal_pstFXPointer: ptr orxFXPOINTER): orxBOOL {.cdecl,
    importc: "orxFXPointer_IsEnabled".}
proc addFX*(internal_pstFXPointer: ptr orxFXPOINTER; internal_pstFX: ptr orxFX): orxSTATUS {.
    cdecl, importc: "orxFXPointer_AddFX".}
proc addDelayedFX*(internal_pstFXPointer: ptr orxFXPOINTER;
                   internal_pstFX: ptr orxFX; internal_fDelay: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFXPointer_AddDelayedFX".}
proc removeFX*(internal_pstFXPointer: ptr orxFXPOINTER;
               internal_pstFX: ptr orxFX): orxSTATUS {.cdecl,
    importc: "orxFXPointer_RemoveFX".}
proc removeAllFXs*(internal_pstFXPointer: ptr orxFXPOINTER): orxSTATUS {.cdecl,
    importc: "orxFXPointer_RemoveAllFXs".}
proc addFXFromConfig*(internal_pstFXPointer: ptr orxFXPOINTER;
                      internal_zFXConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxFXPointer_AddFXFromConfig".}
proc addUniqueFXFromConfig*(internal_pstFXPointer: ptr orxFXPOINTER;
                            internal_zFXConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxFXPointer_AddUniqueFXFromConfig".}
proc addDelayedFXFromConfig*(internal_pstFXPointer: ptr orxFXPOINTER;
                             internal_zFXConfigID: cstring;
                             internal_fDelay: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxFXPointer_AddDelayedFXFromConfig".}
proc addUniqueDelayedFXFromConfig*(internal_pstFXPointer: ptr orxFXPOINTER;
                                   internal_zFXConfigID: cstring;
                                   internal_fDelay: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFXPointer_AddUniqueDelayedFXFromConfig".}
proc removeFXFromConfig*(internal_pstFXPointer: ptr orxFXPOINTER;
                         internal_zFXConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxFXPointer_RemoveFXFromConfig".}
proc synchronize*(internal_pstFXPointer: ptr orxFXPOINTER;
                  internal_pstModel: ptr orxFXPOINTER): orxSTATUS {.cdecl,
    importc: "orxFXPointer_Synchronize".}
proc getTime*(internal_pstFXPointer: ptr orxFXPOINTER): orxFLOAT {.cdecl,
    importc: "orxFXPointer_GetTime".}
proc getCount*(internal_pstFXPointer: ptr orxFXPOINTER): orxU32 {.cdecl,
    importc: "orxFXPointer_GetCount".}
proc getFrequency*(internal_pstFXPointer: ptr orxFXPOINTER): orxFLOAT {.cdecl,
    importc: "orxFXPointer_GetFrequency".}
proc setTime*(internal_pstFXPointer: ptr orxFXPOINTER; internal_fTime: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxFXPointer_SetTime".}
proc setFrequency*(internal_pstFXPointer: ptr orxFXPOINTER;
                   internal_fFrequency: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxFXPointer_SetFrequency".}
proc getIgnoreFlagValues*(internal_zFlags: cstring): orxU32 {.cdecl,
    importc: "orxFrame_GetIgnoreFlagValues".}
proc getIgnoreFlagNames*(internal_u32Flags: orxU32): cstring {.cdecl,
    importc: "orxFrame_GetIgnoreFlagNames".}
proc frameSetup*(): void {.cdecl, importc: "orxFrame_Setup".}
proc frameInit*(): orxSTATUS {.cdecl, importc: "orxFrame_Init".}
proc frameExit*(): void {.cdecl, importc: "orxFrame_Exit".}
proc frameCreate*(internal_u32Flags: orxU32): ptr orxFRAME {.cdecl,
    importc: "orxFrame_Create".}
proc frameDelete*(internal_pstFrame: ptr orxFRAME): orxSTATUS {.cdecl,
    importc: "orxFrame_Delete".}
proc setParent*(internal_pstFrame: ptr orxFRAME;
                internal_pstParent: ptr orxFRAME): void {.cdecl,
    importc: "orxFrame_SetParent".}
proc getParent*(internal_pstFrame: ptr orxFRAME): ptr orxFRAME {.cdecl,
    importc: "orxFrame_GetParent".}
proc getChild*(internal_pstFrame: ptr orxFRAME): ptr orxFRAME {.cdecl,
    importc: "orxFrame_GetChild".}
proc getSibling*(internal_pstFrame: ptr orxFRAME): ptr orxFRAME {.cdecl,
    importc: "orxFrame_GetSibling".}
proc isRootChild*(internal_pstFrame: ptr orxFRAME): orxBOOL {.cdecl,
    importc: "orxFrame_IsRootChild".}
proc setPosition*(internal_pstFrame: ptr orxFRAME;
                  internal_eSpace: orxFRAME_SPACE; internal_pvPos: ptr orxVECTOR): void {.
    cdecl, importc: "orxFrame_SetPosition".}
proc setRotation*(internal_pstFrame: ptr orxFRAME;
                  internal_eSpace: orxFRAME_SPACE; internal_fRotation: orxFLOAT): void {.
    cdecl, importc: "orxFrame_SetRotation".}
proc setScale*(internal_pstFrame: ptr orxFRAME; internal_eSpace: orxFRAME_SPACE;
               internal_pvScale: ptr orxVECTOR): void {.cdecl,
    importc: "orxFrame_SetScale".}
proc getPosition*(internal_pstFrame: ptr orxFRAME;
                  internal_eSpace: orxFRAME_SPACE; internal_pvPos: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxFrame_GetPosition".}
proc getRotation*(internal_pstFrame: ptr orxFRAME;
                  internal_eSpace: orxFRAME_SPACE): orxFLOAT {.cdecl,
    importc: "orxFrame_GetRotation".}
proc getScale*(internal_pstFrame: ptr orxFRAME; internal_eSpace: orxFRAME_SPACE;
               internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxFrame_GetScale".}
proc transformPosition*(internal_pstFrame: ptr orxFRAME;
                        internal_eSpace: orxFRAME_SPACE;
                        internal_pvPos: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxFrame_TransformPosition".}
proc transformRotation*(internal_pstFrame: ptr orxFRAME;
                        internal_eSpace: orxFRAME_SPACE;
                        internal_fRotation: orxFLOAT): orxFLOAT {.cdecl,
    importc: "orxFrame_TransformRotation".}
proc transformScale*(internal_pstFrame: ptr orxFRAME;
                     internal_eSpace: orxFRAME_SPACE;
                     internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxFrame_TransformScale".}
proc spawnerSetup*(): void {.cdecl, importc: "orxSpawner_Setup".}
proc spawnerInit*(): orxSTATUS {.cdecl, importc: "orxSpawner_Init".}
proc spawnerExit*(): void {.cdecl, importc: "orxSpawner_Exit".}
proc spawnerCreate*(): ptr orxSPAWNER {.cdecl, importc: "orxSpawner_Create".}
proc spawnerCreateFromConfig*(internal_zConfigID: cstring): ptr orxSPAWNER {.
    cdecl, importc: "orxSpawner_CreateFromConfig".}
proc spawnerDelete*(internal_pstSpawner: ptr orxSPAWNER): orxSTATUS {.cdecl,
    importc: "orxSpawner_Delete".}
proc enable*(internal_pstSpawner: ptr orxSPAWNER; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxSpawner_Enable".}
proc isEnabled*(internal_pstSpawner: ptr orxSPAWNER): orxBOOL {.cdecl,
    importc: "orxSpawner_IsEnabled".}
proc reset*(internal_pstSpawner: ptr orxSPAWNER): void {.cdecl,
    importc: "orxSpawner_Reset".}
proc setTotalObjectLimit*(internal_pstSpawner: ptr orxSPAWNER;
                          internal_u32TotalObjectLimit: orxU32): orxSTATUS {.
    cdecl, importc: "orxSpawner_SetTotalObjectLimit".}
proc setActiveObjectLimit*(internal_pstSpawner: ptr orxSPAWNER;
                           internal_u32ActiveObjectLimit: orxU32): orxSTATUS {.
    cdecl, importc: "orxSpawner_SetActiveObjectLimit".}
proc getTotalObjectLimit*(internal_pstSpawner: ptr orxSPAWNER): orxU32 {.cdecl,
    importc: "orxSpawner_GetTotalObjectLimit".}
proc getActiveObjectLimit*(internal_pstSpawner: ptr orxSPAWNER): orxU32 {.cdecl,
    importc: "orxSpawner_GetActiveObjectLimit".}
proc getTotalObjectCount*(internal_pstSpawner: ptr orxSPAWNER): orxU32 {.cdecl,
    importc: "orxSpawner_GetTotalObjectCount".}
proc getActiveObjectCount*(internal_pstSpawner: ptr orxSPAWNER): orxU32 {.cdecl,
    importc: "orxSpawner_GetActiveObjectCount".}
proc setWaveSize*(internal_pstSpawner: ptr orxSPAWNER;
                  internal_u32WaveSize: orxU32): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetWaveSize".}
proc setWaveDelay*(internal_pstSpawner: ptr orxSPAWNER;
                   internal_fWaveDelay: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetWaveDelay".}
proc setNextWaveDelay*(internal_pstSpawner: ptr orxSPAWNER;
                       internal_fWaveDelay: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetNextWaveDelay".}
proc getWaveSize*(internal_pstSpawner: ptr orxSPAWNER): orxU32 {.cdecl,
    importc: "orxSpawner_GetWaveSize".}
proc getWaveDelay*(internal_pstSpawner: ptr orxSPAWNER): orxFLOAT {.cdecl,
    importc: "orxSpawner_GetWaveDelay".}
proc getNextWaveDelay*(internal_pstSpawner: ptr orxSPAWNER): orxFLOAT {.cdecl,
    importc: "orxSpawner_GetNextWaveDelay".}
proc setObjectSpeed*(internal_pstSpawner: ptr orxSPAWNER;
                     internal_pvObjectSpeed: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetObjectSpeed".}
proc getObjectSpeed*(internal_pstSpawner: ptr orxSPAWNER;
                     internal_pvObjectSpeed: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxSpawner_GetObjectSpeed".}
proc spawn*(internal_pstSpawner: ptr orxSPAWNER; internal_u32Number: orxU32): orxU32 {.
    cdecl, importc: "orxSpawner_Spawn".}
proc getFrame*(internal_pstSpawner: ptr orxSPAWNER): ptr orxFRAME {.cdecl,
    importc: "orxSpawner_GetFrame".}
proc setPosition*(internal_pstSpawner: ptr orxSPAWNER;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetPosition".}
proc setRotation*(internal_pstSpawner: ptr orxSPAWNER;
                  internal_fRotation: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetRotation".}
proc setScale*(internal_pstSpawner: ptr orxSPAWNER;
               internal_pvScale: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxSpawner_SetScale".}
proc getPosition*(internal_pstSpawner: ptr orxSPAWNER;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxSpawner_GetPosition".}
proc getWorldPosition*(internal_pstSpawner: ptr orxSPAWNER;
                       internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxSpawner_GetWorldPosition".}
proc getRotation*(internal_pstSpawner: ptr orxSPAWNER): orxFLOAT {.cdecl,
    importc: "orxSpawner_GetRotation".}
proc getWorldRotation*(internal_pstSpawner: ptr orxSPAWNER): orxFLOAT {.cdecl,
    importc: "orxSpawner_GetWorldRotation".}
proc getScale*(internal_pstSpawner: ptr orxSPAWNER;
               internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxSpawner_GetScale".}
proc getWorldScale*(internal_pstSpawner: ptr orxSPAWNER;
                    internal_pvScale: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxSpawner_GetWorldScale".}
proc setParent*(internal_pstSpawner: ptr orxSPAWNER; internal_pParent: pointer): orxSTATUS {.
    cdecl, importc: "orxSpawner_SetParent".}
proc getParent*(internal_pstSpawner: ptr orxSPAWNER): ptr orxSTRUCTURE {.cdecl,
    importc: "orxSpawner_GetParent".}
proc getName*(internal_pstSpawner: ptr orxSPAWNER): cstring {.cdecl,
    importc: "orxSpawner_GetName".}
proc timeLineSetup*(): void {.cdecl, importc: "orxTimeLine_Setup".}
proc timeLineInit*(): orxSTATUS {.cdecl, importc: "orxTimeLine_Init".}
proc timeLineExit*(): void {.cdecl, importc: "orxTimeLine_Exit".}
proc timeLineCreate*(): ptr orxTIMELINE {.cdecl, importc: "orxTimeLine_Create".}
proc timeLineDelete*(internal_pstTimeLine: ptr orxTIMELINE): orxSTATUS {.cdecl,
    importc: "orxTimeLine_Delete".}
proc timeLineClearCache*(): orxSTATUS {.cdecl, importc: "orxTimeLine_ClearCache".}
proc enable*(internal_pstTimeLine: ptr orxTIMELINE; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxTimeLine_Enable".}
proc isEnabled*(internal_pstTimeLine: ptr orxTIMELINE): orxBOOL {.cdecl,
    importc: "orxTimeLine_IsEnabled".}
proc addTrackFromConfig*(internal_pstTimeLine: ptr orxTIMELINE;
                         internal_zTrackID: cstring): orxSTATUS {.cdecl,
    importc: "orxTimeLine_AddTrackFromConfig".}
proc removeTrackFromConfig*(internal_pstTimeLine: ptr orxTIMELINE;
                            internal_zTrackID: cstring): orxSTATUS {.cdecl,
    importc: "orxTimeLine_RemoveTrackFromConfig".}
proc getCount*(internal_pstTimeLine: ptr orxTIMELINE): orxU32 {.cdecl,
    importc: "orxTimeLine_GetCount".}
proc getTrackDuration*(internal_zTrackID: cstring): orxFLOAT {.cdecl,
    importc: "orxTimeLine_GetTrackDuration".}
proc triggerSetup*(): void {.cdecl, importc: "orxTrigger_Setup".}
proc triggerInit*(): orxSTATUS {.cdecl, importc: "orxTrigger_Init".}
proc triggerExit*(): void {.cdecl, importc: "orxTrigger_Exit".}
proc triggerCreate*(): ptr orxTRIGGER {.cdecl, importc: "orxTrigger_Create".}
proc triggerDelete*(internal_pstTrigger: ptr orxTRIGGER): orxSTATUS {.cdecl,
    importc: "orxTrigger_Delete".}
proc triggerClearCache*(): orxSTATUS {.cdecl, importc: "orxTrigger_ClearCache".}
proc enable*(internal_pstTrigger: ptr orxTRIGGER; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxTrigger_Enable".}
proc isEnabled*(internal_pstTrigger: ptr orxTRIGGER): orxBOOL {.cdecl,
    importc: "orxTrigger_IsEnabled".}
proc addSetFromConfig*(internal_pstTrigger: ptr orxTRIGGER;
                       internal_zConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxTrigger_AddSetFromConfig".}
proc removeSetFromConfig*(internal_pstTrigger: ptr orxTRIGGER;
                          internal_zConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxTrigger_RemoveSetFromConfig".}
proc getCount*(internal_pstTrigger: ptr orxTRIGGER): orxU32 {.cdecl,
    importc: "orxTrigger_GetCount".}
proc fire*(internal_pstTrigger: ptr orxTRIGGER; internal_zEvent: cstring;
           internal_azRefinementList: ptr cstring; internal_u32Size: orxU32): orxSTATUS {.
    cdecl, importc: "orxTrigger_Fire".}
proc pluginSetup*(): void {.cdecl, importc: "orxPlugin_Setup".}
proc pluginInit*(): orxSTATUS {.cdecl, importc: "orxPlugin_Init".}
proc pluginExit*(): void {.cdecl, importc: "orxPlugin_Exit".}
proc pluginLoad*(internal_zPluginFileName: cstring;
                 internal_zPluginName: cstring): orxHANDLE {.cdecl,
    importc: "orxPlugin_Load".}
proc loadUsingExt*(internal_zPluginFileName: cstring;
                   internal_zPluginName: cstring): orxHANDLE {.cdecl,
    importc: "orxPlugin_LoadUsingExt".}
proc unload*(internal_hPluginHandle: orxHANDLE): orxSTATUS {.cdecl,
    importc: "orxPlugin_Unload".}
proc getFunction*(internal_hPluginHandle: orxHANDLE;
                  internal_zFunctionName: cstring): orxPLUGIN_FUNCTION {.cdecl,
    importc: "orxPlugin_GetFunction".}
proc getHandle*(internal_zPluginName: cstring): orxHANDLE {.cdecl,
    importc: "orxPlugin_GetHandle".}
proc getName*(internal_hPluginHandle: orxHANDLE): cstring {.cdecl,
    importc: "orxPlugin_GetName".}
proc physicsSetup*(): void {.cdecl, importc: "orxPhysics_Setup".}
proc getCollisionFlagName*(internal_u32Flag: orxU32): cstring {.cdecl,
    importc: "orxPhysics_GetCollisionFlagName".}
proc getCollisionFlagValue*(internal_zFlag: cstring): orxU32 {.cdecl,
    importc: "orxPhysics_GetCollisionFlagValue".}
proc physicsInit*(): orxSTATUS {.cdecl, importc: "orxPhysics_Init".}
proc physicsExit*(): void {.cdecl, importc: "orxPhysics_Exit".}
proc setGravity*(internal_pvGravity: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetGravity".}
proc getGravity*(internal_pvGravity: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxPhysics_GetGravity".}
proc createBody*(internal_hUserData: orxHANDLE;
                 internal_pstBodyDef: ptr orxBODY_DEF): ptr orxPHYSICS_BODY {.
    cdecl, importc: "orxPhysics_CreateBody".}
proc deleteBody*(internal_pstBody: ptr orxPHYSICS_BODY): void {.cdecl,
    importc: "orxPhysics_DeleteBody".}
proc createPart*(internal_pstBody: ptr orxPHYSICS_BODY;
                 internal_hUserData: orxHANDLE;
                 internal_pstBodyPartDef: ptr orxBODY_PART_DEF): ptr orxPHYSICS_BODY_PART {.
    cdecl, importc: "orxPhysics_CreatePart".}
proc deletePart*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): void {.cdecl,
    importc: "orxPhysics_DeletePart".}
proc createJoint*(internal_pstSrcBody: ptr orxPHYSICS_BODY;
                  internal_pstDstBody: ptr orxPHYSICS_BODY;
                  internal_hUserData: orxHANDLE;
                  internal_pstBodyJointDef: ptr orxBODY_JOINT_DEF): ptr orxPHYSICS_BODY_JOINT {.
    cdecl, importc: "orxPhysics_CreateJoint".}
proc deleteJoint*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT): void {.
    cdecl, importc: "orxPhysics_DeleteJoint".}
proc setPosition*(internal_pstBody: ptr orxPHYSICS_BODY;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPosition".}
proc setRotation*(internal_pstBody: ptr orxPHYSICS_BODY;
                  internal_fRotation: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetRotation".}
proc setSpeed*(internal_pstBody: ptr orxPHYSICS_BODY;
               internal_pvSpeed: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetSpeed".}
proc setAngularVelocity*(internal_pstBody: ptr orxPHYSICS_BODY;
                         internal_fVelocity: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetAngularVelocity".}
proc setCustomGravity*(internal_pstBody: ptr orxPHYSICS_BODY;
                       internal_pvCustomGravity: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxPhysics_SetCustomGravity".}
proc setFixedRotation*(internal_pstBody: ptr orxPHYSICS_BODY;
                       internal_bFixed: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetFixedRotation".}
proc setDynamic*(internal_pstBody: ptr orxPHYSICS_BODY;
                 internal_bDynamic: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetDynamic".}
proc setAllowMoving*(internal_pstBody: ptr orxPHYSICS_BODY;
                     internal_bAllowMoving: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetAllowMoving".}
proc getPosition*(internal_pstBody: ptr orxPHYSICS_BODY;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxPhysics_GetPosition".}
proc getRotation*(internal_pstBody: ptr orxPHYSICS_BODY): orxFLOAT {.cdecl,
    importc: "orxPhysics_GetRotation".}
proc getSpeed*(internal_pstBody: ptr orxPHYSICS_BODY;
               internal_pvSpeed: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxPhysics_GetSpeed".}
proc getSpeedAtWorldPosition*(internal_pstBody: ptr orxPHYSICS_BODY;
                              internal_pvPosition: ptr orxVECTOR;
                              internal_pvSpeed: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxPhysics_GetSpeedAtWorldPosition".}
proc getAngularVelocity*(internal_pstBody: ptr orxPHYSICS_BODY): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetAngularVelocity".}
proc getCustomGravity*(internal_pstBody: ptr orxPHYSICS_BODY;
                       internal_pvCustomGravity: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxPhysics_GetCustomGravity".}
proc isFixedRotation*(internal_pstBody: ptr orxPHYSICS_BODY): orxBOOL {.cdecl,
    importc: "orxPhysics_IsFixedRotation".}
proc getMass*(internal_pstBody: ptr orxPHYSICS_BODY): orxFLOAT {.cdecl,
    importc: "orxPhysics_GetMass".}
proc getMassCenter*(internal_pstBody: ptr orxPHYSICS_BODY;
                    internal_pvMassCenter: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxPhysics_GetMassCenter".}
proc setLinearDamping*(internal_pstBody: ptr orxPHYSICS_BODY;
                       internal_fDamping: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetLinearDamping".}
proc setAngularDamping*(internal_pstBody: ptr orxPHYSICS_BODY;
                        internal_fDamping: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetAngularDamping".}
proc getLinearDamping*(internal_pstBody: ptr orxPHYSICS_BODY): orxFLOAT {.cdecl,
    importc: "orxPhysics_GetLinearDamping".}
proc getAngularDamping*(internal_pstBody: ptr orxPHYSICS_BODY): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetAngularDamping".}
proc applyTorque*(internal_pstBody: ptr orxPHYSICS_BODY;
                  internal_fTorque: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_ApplyTorque".}
proc applyForce*(internal_pstBody: ptr orxPHYSICS_BODY;
                 internal_pvForce: ptr orxVECTOR;
                 internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxPhysics_ApplyForce".}
proc applyImpulse*(internal_pstBody: ptr orxPHYSICS_BODY;
                   internal_pvImpulse: ptr orxVECTOR;
                   internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxPhysics_ApplyImpulse".}
proc setPartSelfFlags*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                       internal_u16SelfFlags: orxU16): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartSelfFlags".}
proc setPartCheckMask*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                       internal_u16CheckMask: orxU16): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartCheckMask".}
proc getPartSelfFlags*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxU16 {.
    cdecl, importc: "orxPhysics_GetPartSelfFlags".}
proc getPartCheckMask*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxU16 {.
    cdecl, importc: "orxPhysics_GetPartCheckMask".}
proc setPartSolid*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                   internal_bSolid: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartSolid".}
proc isPartSolid*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxBOOL {.
    cdecl, importc: "orxPhysics_IsPartSolid".}
proc setPartFriction*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                      internal_fFriction: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartFriction".}
proc getPartFriction*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetPartFriction".}
proc setPartRestitution*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                         internal_fRestitution: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartRestitution".}
proc getPartRestitution*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetPartRestitution".}
proc setPartDensity*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                     internal_fDensity: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxPhysics_SetPartDensity".}
proc getPartDensity*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetPartDensity".}
proc isInsidePart*(internal_pstBodyPart: ptr orxPHYSICS_BODY_PART;
                   internal_pvPosition: ptr orxVECTOR): orxBOOL {.cdecl,
    importc: "orxPhysics_IsInsidePart".}
proc enableMotor*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT;
                  internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxPhysics_EnableMotor".}
proc setJointMotorSpeed*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT;
                         internal_fSpeed: orxFLOAT): void {.cdecl,
    importc: "orxPhysics_SetJointMotorSpeed".}
proc setJointMaxMotorTorque*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT;
                             internal_fMaxTorque: orxFLOAT): void {.cdecl,
    importc: "orxPhysics_SetJointMaxMotorTorque".}
proc getJointReactionForce*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT;
                            internal_pvForce: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxPhysics_GetJointReactionForce".}
proc getJointReactionTorque*(internal_pstBodyJoint: ptr orxPHYSICS_BODY_JOINT): orxFLOAT {.
    cdecl, importc: "orxPhysics_GetJointReactionTorque".}
proc physicsRaycast*(internal_pvBegin: ptr orxVECTOR;
                     internal_pvEnd: ptr orxVECTOR;
                     internal_u16SelfFlags: orxU16;
                     internal_u16CheckMask: orxU16;
                     internal_bEarlyExit: orxBOOL;
                     internal_pvContact: ptr orxVECTOR;
                     internal_pvNormal: ptr orxVECTOR): orxHANDLE {.cdecl,
    importc: "orxPhysics_Raycast".}
proc boxPick*(internal_pstBox: ptr orxAABOX; internal_u16SelfFlags: orxU16;
              internal_u16CheckMask: orxU16;
              internal_ahUserDataList: ptr UncheckedArray[orxHANDLE];
              internal_u32Number: orxU32): orxU32 {.cdecl,
    importc: "orxPhysics_BoxPick".}
proc enableSimulation*(internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxPhysics_EnableSimulation".}
proc bodySetup*(): void {.cdecl, importc: "orxBody_Setup".}
proc bodyInit*(): orxSTATUS {.cdecl, importc: "orxBody_Init".}
proc bodyExit*(): void {.cdecl, importc: "orxBody_Exit".}
proc bodyCreate*(internal_pstOwner: ptr orxSTRUCTURE;
                 internal_pstBodyDef: ptr orxBODY_DEF): ptr orxBODY {.cdecl,
    importc: "orxBody_Create".}
proc bodyCreateFromConfig*(internal_pstOwner: ptr orxSTRUCTURE;
                           internal_zConfigID: cstring): ptr orxBODY {.cdecl,
    importc: "orxBody_CreateFromConfig".}
proc bodyDelete*(internal_pstBody: ptr orxBODY): orxSTATUS {.cdecl,
    importc: "orxBody_Delete".}
proc getName*(internal_pstBody: ptr orxBODY): cstring {.cdecl,
    importc: "orxBody_GetName".}
proc testDefFlags*(internal_pstBody: ptr orxBODY; internal_u32Flags: orxU32): orxBOOL {.
    cdecl, importc: "orxBody_TestDefFlags".}
proc testAllDefFlags*(internal_pstBody: ptr orxBODY; internal_u32Flags: orxU32): orxBOOL {.
    cdecl, importc: "orxBody_TestAllDefFlags".}
proc getDefFlags*(internal_pstBody: ptr orxBODY; internal_u32Mask: orxU32): orxU32 {.
    cdecl, importc: "orxBody_GetDefFlags".}
proc addPart*(internal_pstBody: ptr orxBODY;
              internal_pstBodyPartDef: ptr orxBODY_PART_DEF): ptr orxBODY_PART {.
    cdecl, importc: "orxBody_AddPart".}
proc addPartFromConfig*(internal_pstBody: ptr orxBODY;
                        internal_zConfigID: cstring): ptr orxBODY_PART {.cdecl,
    importc: "orxBody_AddPartFromConfig".}
proc removePartFromConfig*(internal_pstBody: ptr orxBODY;
                           internal_zConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxBody_RemovePartFromConfig".}
proc getNextPart*(internal_pstBody: ptr orxBODY;
                  internal_pstBodyPart: ptr orxBODY_PART): ptr orxBODY_PART {.
    cdecl, importc: "orxBody_GetNextPart".}
proc getPartName*(internal_pstBodyPart: ptr orxBODY_PART): cstring {.cdecl,
    importc: "orxBody_GetPartName".}
proc getPartDef*(internal_pstBodyPart: ptr orxBODY_PART): ptr orxBODY_PART_DEF {.
    cdecl, importc: "orxBody_GetPartDef".}
proc getPartBody*(internal_pstBodyPart: ptr orxBODY_PART): ptr orxBODY {.cdecl,
    importc: "orxBody_GetPartBody".}
proc removePart*(internal_pstBodyPart: ptr orxBODY_PART): orxSTATUS {.cdecl,
    importc: "orxBody_RemovePart".}
proc addJoint*(internal_pstSrcBody: ptr orxBODY;
               internal_pstDstBody: ptr orxBODY;
               internal_pstBodyJointDef: ptr orxBODY_JOINT_DEF): ptr orxBODY_JOINT {.
    cdecl, importc: "orxBody_AddJoint".}
proc addJointFromConfig*(internal_pstSrcBody: ptr orxBODY;
                         internal_pstDstBody: ptr orxBODY;
                         internal_zConfigID: cstring): ptr orxBODY_JOINT {.
    cdecl, importc: "orxBody_AddJointFromConfig".}
proc getNextJoint*(internal_pstBody: ptr orxBODY;
                   internal_pstBodyJoint: ptr orxBODY_JOINT): ptr orxBODY_JOINT {.
    cdecl, importc: "orxBody_GetNextJoint".}
proc getJointName*(internal_pstBodyJoint: ptr orxBODY_JOINT): cstring {.cdecl,
    importc: "orxBody_GetJointName".}
proc removeJoint*(internal_pstBodyJoint: ptr orxBODY_JOINT): orxSTATUS {.cdecl,
    importc: "orxBody_RemoveJoint".}
proc setPosition*(internal_pstBody: ptr orxBODY;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxBody_SetPosition".}
proc setRotation*(internal_pstBody: ptr orxBODY; internal_fRotation: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxBody_SetRotation".}
proc setScale*(internal_pstBody: ptr orxBODY; internal_pvScale: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxBody_SetScale".}
proc setSpeed*(internal_pstBody: ptr orxBODY; internal_pvSpeed: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxBody_SetSpeed".}
proc setAngularVelocity*(internal_pstBody: ptr orxBODY;
                         internal_fVelocity: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetAngularVelocity".}
proc setCustomGravity*(internal_pstBody: ptr orxBODY;
                       internal_pvCustomGravity: ptr orxVECTOR): orxSTATUS {.
    cdecl, importc: "orxBody_SetCustomGravity".}
proc setFixedRotation*(internal_pstBody: ptr orxBODY; internal_bFixed: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxBody_SetFixedRotation".}
proc setDynamic*(internal_pstBody: ptr orxBODY; internal_bDynamic: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxBody_SetDynamic".}
proc setAllowMoving*(internal_pstBody: ptr orxBODY;
                     internal_bAllowMoving: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxBody_SetAllowMoving".}
proc getPosition*(internal_pstBody: ptr orxBODY;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxBody_GetPosition".}
proc getRotation*(internal_pstBody: ptr orxBODY): orxFLOAT {.cdecl,
    importc: "orxBody_GetRotation".}
proc getSpeed*(internal_pstBody: ptr orxBODY; internal_pvSpeed: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxBody_GetSpeed".}
proc getSpeedAtWorldPosition*(internal_pstBody: ptr orxBODY;
                              internal_pvPosition: ptr orxVECTOR;
                              internal_pvSpeed: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxBody_GetSpeedAtWorldPosition".}
proc getAngularVelocity*(internal_pstBody: ptr orxBODY): orxFLOAT {.cdecl,
    importc: "orxBody_GetAngularVelocity".}
proc getCustomGravity*(internal_pstBody: ptr orxBODY;
                       internal_pvCustomGravity: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxBody_GetCustomGravity".}
proc isFixedRotation*(internal_pstBody: ptr orxBODY): orxBOOL {.cdecl,
    importc: "orxBody_IsFixedRotation".}
proc isDynamic*(internal_pstBody: ptr orxBODY): orxBOOL {.cdecl,
    importc: "orxBody_IsDynamic".}
proc getAllowMoving*(internal_pstBody: ptr orxBODY): orxBOOL {.cdecl,
    importc: "orxBody_GetAllowMoving".}
proc getMass*(internal_pstBody: ptr orxBODY): orxFLOAT {.cdecl,
    importc: "orxBody_GetMass".}
proc getMassCenter*(internal_pstBody: ptr orxBODY;
                    internal_pvMassCenter: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxBody_GetMassCenter".}
proc setLinearDamping*(internal_pstBody: ptr orxBODY;
                       internal_fDamping: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetLinearDamping".}
proc setAngularDamping*(internal_pstBody: ptr orxBODY;
                        internal_fDamping: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetAngularDamping".}
proc getLinearDamping*(internal_pstBody: ptr orxBODY): orxFLOAT {.cdecl,
    importc: "orxBody_GetLinearDamping".}
proc getAngularDamping*(internal_pstBody: ptr orxBODY): orxFLOAT {.cdecl,
    importc: "orxBody_GetAngularDamping".}
proc isInside*(internal_pstBody: ptr orxBODY; internal_pvPosition: ptr orxVECTOR): orxBOOL {.
    cdecl, importc: "orxBody_IsInside".}
proc applyTorque*(internal_pstBody: ptr orxBODY; internal_fTorque: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxBody_ApplyTorque".}
proc applyForce*(internal_pstBody: ptr orxBODY; internal_pvForce: ptr orxVECTOR;
                 internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxBody_ApplyForce".}
proc applyImpulse*(internal_pstBody: ptr orxBODY;
                   internal_pvImpulse: ptr orxVECTOR;
                   internal_pvPoint: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxBody_ApplyImpulse".}
proc setPartSelfFlags*(internal_pstBodyPart: ptr orxBODY_PART;
                       internal_u16SelfFlags: orxU16): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartSelfFlags".}
proc setPartCheckMask*(internal_pstBodyPart: ptr orxBODY_PART;
                       internal_u16CheckMask: orxU16): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartCheckMask".}
proc getPartSelfFlags*(internal_pstBodyPart: ptr orxBODY_PART): orxU16 {.cdecl,
    importc: "orxBody_GetPartSelfFlags".}
proc getPartCheckMask*(internal_pstBodyPart: ptr orxBODY_PART): orxU16 {.cdecl,
    importc: "orxBody_GetPartCheckMask".}
proc setPartSolid*(internal_pstBodyPart: ptr orxBODY_PART;
                   internal_bSolid: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartSolid".}
proc isPartSolid*(internal_pstBodyPart: ptr orxBODY_PART): orxBOOL {.cdecl,
    importc: "orxBody_IsPartSolid".}
proc setPartFriction*(internal_pstBodyPart: ptr orxBODY_PART;
                      internal_fFriction: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartFriction".}
proc getPartFriction*(internal_pstBodyPart: ptr orxBODY_PART): orxFLOAT {.cdecl,
    importc: "orxBody_GetPartFriction".}
proc setPartRestitution*(internal_pstBodyPart: ptr orxBODY_PART;
                         internal_fRestitution: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartRestitution".}
proc getPartRestitution*(internal_pstBodyPart: ptr orxBODY_PART): orxFLOAT {.
    cdecl, importc: "orxBody_GetPartRestitution".}
proc setPartDensity*(internal_pstBodyPart: ptr orxBODY_PART;
                     internal_fDensity: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetPartDensity".}
proc getPartDensity*(internal_pstBodyPart: ptr orxBODY_PART): orxFLOAT {.cdecl,
    importc: "orxBody_GetPartDensity".}
proc isInsidePart*(internal_pstBodyPart: ptr orxBODY_PART;
                   internal_pvPosition: ptr orxVECTOR): orxBOOL {.cdecl,
    importc: "orxBody_IsInsidePart".}
proc enableMotor*(internal_pstBodyJoint: ptr orxBODY_JOINT;
                  internal_bEnable: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxBody_EnableMotor".}
proc setJointMotorSpeed*(internal_pstBodyJoint: ptr orxBODY_JOINT;
                         internal_fSpeed: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetJointMotorSpeed".}
proc setJointMaxMotorTorque*(internal_pstBodyJoint: ptr orxBODY_JOINT;
                             internal_fMaxTorque: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxBody_SetJointMaxMotorTorque".}
proc getJointReactionForce*(internal_pstBodyJoint: ptr orxBODY_JOINT;
                            internal_pvForce: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxBody_GetJointReactionForce".}
proc getJointReactionTorque*(internal_pstBodyJoint: ptr orxBODY_JOINT): orxFLOAT {.
    cdecl, importc: "orxBody_GetJointReactionTorque".}
proc bodyRaycast*(internal_pvBegin: ptr orxVECTOR;
                  internal_pvEnd: ptr orxVECTOR; internal_u16SelfFlags: orxU16;
                  internal_u16CheckMask: orxU16; internal_bEarlyExit: orxBOOL;
                  internal_pvContact: ptr orxVECTOR;
                  internal_pvNormal: ptr orxVECTOR): ptr orxBODY {.cdecl,
    importc: "orxBody_Raycast".}
proc boxPick*(internal_pstBox: ptr orxAABOX; internal_u16SelfFlags: orxU16;
              internal_u16CheckMask: orxU16;
              internal_apstBodyList: ptr UncheckedArray[ptr orxBODY];
              internal_u32Number: orxU32): orxU32 {.cdecl,
    importc: "orxBody_BoxPick".}
proc cameraSetup*(): void {.cdecl, importc: "orxCamera_Setup".}
proc cameraInit*(): orxSTATUS {.cdecl, importc: "orxCamera_Init".}
proc cameraExit*(): void {.cdecl, importc: "orxCamera_Exit".}
proc cameraCreate*(internal_u32Flags: orxU32): ptr orxCAMERA {.cdecl,
    importc: "orxCamera_Create".}
proc cameraCreateFromConfig*(internal_zConfigID: cstring): ptr orxCAMERA {.
    cdecl, importc: "orxCamera_CreateFromConfig".}
proc cameraDelete*(internal_pstCamera: ptr orxCAMERA): orxSTATUS {.cdecl,
    importc: "orxCamera_Delete".}
proc addGroupID*(internal_pstCamera: ptr orxCAMERA;
                 internal_stGroupID: orxSTRINGID; internal_bAddFirst: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxCamera_AddGroupID".}
proc removeGroupID*(internal_pstCamera: ptr orxCAMERA;
                    internal_stGroupID: orxSTRINGID): orxSTATUS {.cdecl,
    importc: "orxCamera_RemoveGroupID".}
proc getGroupIDCount*(internal_pstCamera: ptr orxCAMERA): orxU32 {.cdecl,
    importc: "orxCamera_GetGroupIDCount".}
proc getGroupID*(internal_pstCamera: ptr orxCAMERA; internal_u32Index: orxU32): orxSTRINGID {.
    cdecl, importc: "orxCamera_GetGroupID".}
proc enableGroupIDSorting*(internal_pstCamera: ptr orxCAMERA;
                           internal_u32Index: orxU32; internal_bEnable: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxCamera_EnableGroupIDSorting".}
proc isGroupIDSortingEnabled*(internal_pstCamera: ptr orxCAMERA;
                              internal_u32Index: orxU32): orxBOOL {.cdecl,
    importc: "orxCamera_IsGroupIDSortingEnabled".}
proc setFrustum*(internal_pstCamera: ptr orxCAMERA; internal_fWidth: orxFLOAT;
                 internal_fHeight: orxFLOAT; internal_fNear: orxFLOAT;
                 internal_fFar: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxCamera_SetFrustum".}
proc setPosition*(internal_pstCamera: ptr orxCAMERA;
                  internal_pvPosition: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxCamera_SetPosition".}
proc setRotation*(internal_pstCamera: ptr orxCAMERA;
                  internal_fRotation: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxCamera_SetRotation".}
proc setZoom*(internal_pstCamera: ptr orxCAMERA; internal_fZoom: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxCamera_SetZoom".}
proc getFrustum*(internal_pstCamera: ptr orxCAMERA;
                 internal_pstFrustum: ptr orxAABOX): ptr orxAABOX {.cdecl,
    importc: "orxCamera_GetFrustum".}
proc getPosition*(internal_pstCamera: ptr orxCAMERA;
                  internal_pvPosition: ptr orxVECTOR): ptr orxVECTOR {.cdecl,
    importc: "orxCamera_GetPosition".}
proc getRotation*(internal_pstCamera: ptr orxCAMERA): orxFLOAT {.cdecl,
    importc: "orxCamera_GetRotation".}
proc getZoom*(internal_pstCamera: ptr orxCAMERA): orxFLOAT {.cdecl,
    importc: "orxCamera_GetZoom".}
proc getName*(internal_pstCamera: ptr orxCAMERA): cstring {.cdecl,
    importc: "orxCamera_GetName".}
proc cameraGet*(internal_zName: cstring): ptr orxCAMERA {.cdecl,
    importc: "orxCamera_Get".}
proc getFrame*(internal_pstCamera: ptr orxCAMERA): ptr orxFRAME {.cdecl,
    importc: "orxCamera_GetFrame".}
proc setParent*(internal_pstCamera: ptr orxCAMERA; internal_pParent: pointer): orxSTATUS {.
    cdecl, importc: "orxCamera_SetParent".}
proc getParent*(internal_pstCamera: ptr orxCAMERA): ptr orxSTRUCTURE {.cdecl,
    importc: "orxCamera_GetParent".}
proc shaderSetup*(): void {.cdecl, importc: "orxShader_Setup".}
proc shaderInit*(): orxSTATUS {.cdecl, importc: "orxShader_Init".}
proc shaderExit*(): void {.cdecl, importc: "orxShader_Exit".}
proc shaderCreate*(): ptr orxSHADER {.cdecl, importc: "orxShader_Create".}
proc shaderCreateFromConfig*(internal_zConfigID: cstring): ptr orxSHADER {.
    cdecl, importc: "orxShader_CreateFromConfig".}
proc shaderDelete*(internal_pstShader: ptr orxSHADER): orxSTATUS {.cdecl,
    importc: "orxShader_Delete".}
proc shaderClearCache*(): orxSTATUS {.cdecl, importc: "orxShader_ClearCache".}
proc start*(internal_pstShader: ptr orxSHADER;
            internal_pstOwner: ptr orxSTRUCTURE): orxSTATUS {.cdecl,
    importc: "orxShader_Start".}
proc stop*(internal_pstShader: ptr orxSHADER): orxSTATUS {.cdecl,
    importc: "orxShader_Stop".}
proc addFloatParam*(internal_pstShader: ptr orxSHADER; internal_zName: cstring;
                    internal_u32ArraySize: orxU32;
                    internal_afValueList: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxShader_AddFloatParam".}
proc addTextureParam*(internal_pstShader: ptr orxSHADER;
                      internal_zName: cstring; internal_u32ArraySize: orxU32;
                      internal_apstValueList: ptr ptr orxTEXTURE): orxSTATUS {.
    cdecl, importc: "orxShader_AddTextureParam".}
proc addVectorParam*(internal_pstShader: ptr orxSHADER; internal_zName: cstring;
                     internal_u32ArraySize: orxU32;
                     internal_avValueList: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxShader_AddVectorParam".}
proc addTimeParam*(internal_pstShader: ptr orxSHADER; internal_zName: cstring;
                   internal_fWrap: orxFLOAT; internal_zFXName: cstring): orxSTATUS {.
    cdecl, importc: "orxShader_AddTimeParam".}
proc setFloatParam*(internal_pstShader: ptr orxSHADER; internal_zName: cstring;
                    internal_u32ArraySize: orxU32;
                    internal_afValueList: ptr orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxShader_SetFloatParam".}
proc setTextureParam*(internal_pstShader: ptr orxSHADER;
                      internal_zName: cstring; internal_u32ArraySize: orxU32;
                      internal_apstValueList: ptr ptr orxTEXTURE): orxSTATUS {.
    cdecl, importc: "orxShader_SetTextureParam".}
proc setVectorParam*(internal_pstShader: ptr orxSHADER; internal_zName: cstring;
                     internal_u32ArraySize: orxU32;
                     internal_avValueList: ptr orxVECTOR): orxSTATUS {.cdecl,
    importc: "orxShader_SetVectorParam".}
proc compileCode*(internal_pstShader: ptr orxSHADER;
                  internal_azCodeList: ptr cstring; internal_u32Size: orxU32): orxSTATUS {.
    cdecl, importc: "orxShader_CompileCode".}
proc enable*(internal_pstShader: ptr orxSHADER; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxShader_Enable".}
proc isEnabled*(internal_pstShader: ptr orxSHADER): orxBOOL {.cdecl,
    importc: "orxShader_IsEnabled".}
proc getName*(internal_pstShader: ptr orxSHADER): cstring {.cdecl,
    importc: "orxShader_GetName".}
proc getID*(internal_pstShader: ptr orxSHADER): orxU32 {.cdecl,
    importc: "orxShader_GetID".}
proc shaderPointerSetup*(): void {.cdecl, importc: "orxShaderPointer_Setup".}
proc shaderPointerInit*(): orxSTATUS {.cdecl, importc: "orxShaderPointer_Init".}
proc shaderPointerExit*(): void {.cdecl, importc: "orxShaderPointer_Exit".}
proc shaderPointerCreate*(): ptr orxSHADERPOINTER {.cdecl,
    importc: "orxShaderPointer_Create".}
proc shaderPointerDelete*(internal_pstShaderPointer: ptr orxSHADERPOINTER): orxSTATUS {.
    cdecl, importc: "orxShaderPointer_Delete".}
proc start*(internal_pstShaderPointer: ptr orxSHADERPOINTER): orxSTATUS {.cdecl,
    importc: "orxShaderPointer_Start".}
proc stop*(internal_pstShaderPointer: ptr orxSHADERPOINTER): orxSTATUS {.cdecl,
    importc: "orxShaderPointer_Stop".}
proc enable*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
             internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxShaderPointer_Enable".}
proc isEnabled*(internal_pstShaderPointer: ptr orxSHADERPOINTER): orxBOOL {.
    cdecl, importc: "orxShaderPointer_IsEnabled".}
proc addShader*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
                internal_pstShader: ptr orxSHADER): orxSTATUS {.cdecl,
    importc: "orxShaderPointer_AddShader".}
proc removeShader*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
                   internal_pstShader: ptr orxSHADER): orxSTATUS {.cdecl,
    importc: "orxShaderPointer_RemoveShader".}
proc getShader*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
                internal_u32Index: orxU32): ptr orxSHADER {.cdecl,
    importc: "orxShaderPointer_GetShader".}
proc addShaderFromConfig*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
                          internal_zShaderConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxShaderPointer_AddShaderFromConfig".}
proc removeShaderFromConfig*(internal_pstShaderPointer: ptr orxSHADERPOINTER;
                             internal_zShaderConfigID: cstring): orxSTATUS {.
    cdecl, importc: "orxShaderPointer_RemoveShaderFromConfig".}
proc viewportSetup*(): void {.cdecl, importc: "orxViewport_Setup".}
proc viewportInit*(): orxSTATUS {.cdecl, importc: "orxViewport_Init".}
proc viewportExit*(): void {.cdecl, importc: "orxViewport_Exit".}
proc viewportCreate*(): ptr orxVIEWPORT {.cdecl, importc: "orxViewport_Create".}
proc viewportCreateFromConfig*(internal_zConfigID: cstring): ptr orxVIEWPORT {.
    cdecl, importc: "orxViewport_CreateFromConfig".}
proc viewportDelete*(internal_pstViewport: ptr orxVIEWPORT): orxSTATUS {.cdecl,
    importc: "orxViewport_Delete".}
proc setTextureList*(internal_pstViewport: ptr orxVIEWPORT;
                     internal_u32TextureNumber: orxU32;
                     internal_apstTextureList: ptr ptr orxTEXTURE): void {.
    cdecl, importc: "orxViewport_SetTextureList".}
proc getTextureList*(internal_pstViewport: ptr orxVIEWPORT;
                     internal_u32TextureNumber: orxU32;
                     internal_apstTextureList: ptr ptr orxTEXTURE): orxSTATUS {.
    cdecl, importc: "orxViewport_GetTextureList".}
proc getTextureCount*(internal_pstViewport: ptr orxVIEWPORT): orxU32 {.cdecl,
    importc: "orxViewport_GetTextureCount".}
proc setBackgroundColor*(internal_pstViewport: ptr orxVIEWPORT;
                         internal_pstColor: ptr orxCOLOR): orxSTATUS {.cdecl,
    importc: "orxViewport_SetBackgroundColor".}
proc clearBackgroundColor*(internal_pstViewport: ptr orxVIEWPORT): orxSTATUS {.
    cdecl, importc: "orxViewport_ClearBackgroundColor".}
proc hasBackgroundColor*(internal_pstViewport: ptr orxVIEWPORT): orxBOOL {.
    cdecl, importc: "orxViewport_HasBackgroundColor".}
proc getBackgroundColor*(internal_pstViewport: ptr orxVIEWPORT;
                         internal_pstColor: ptr orxCOLOR): ptr orxCOLOR {.cdecl,
    importc: "orxViewport_GetBackgroundColor".}
proc enable*(internal_pstViewport: ptr orxVIEWPORT; internal_bEnable: orxBOOL): void {.
    cdecl, importc: "orxViewport_Enable".}
proc isEnabled*(internal_pstViewport: ptr orxVIEWPORT): orxBOOL {.cdecl,
    importc: "orxViewport_IsEnabled".}
proc setCamera*(internal_pstViewport: ptr orxVIEWPORT;
                internal_pstCamera: ptr orxCAMERA): void {.cdecl,
    importc: "orxViewport_SetCamera".}
proc getCamera*(internal_pstViewport: ptr orxVIEWPORT): ptr orxCAMERA {.cdecl,
    importc: "orxViewport_GetCamera".}
proc addShader*(internal_pstViewport: ptr orxVIEWPORT;
                internal_zShaderConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxViewport_AddShader".}
proc removeShader*(internal_pstViewport: ptr orxVIEWPORT;
                   internal_zShaderConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxViewport_RemoveShader".}
proc enableShader*(internal_pstViewport: ptr orxVIEWPORT;
                   internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxViewport_EnableShader".}
proc isShaderEnabled*(internal_pstViewport: ptr orxVIEWPORT): orxBOOL {.cdecl,
    importc: "orxViewport_IsShaderEnabled".}
proc getShaderPointer*(internal_pstViewport: ptr orxVIEWPORT): ptr orxSHADERPOINTER {.
    cdecl, importc: "orxViewport_GetShaderPointer".}
proc setBlendMode*(internal_pstViewport: ptr orxVIEWPORT;
                   internal_eBlendMode: orxDISPLAY_BLEND_MODE): orxSTATUS {.
    cdecl, importc: "orxViewport_SetBlendMode".}
proc getBlendMode*(internal_pstViewport: ptr orxVIEWPORT): orxDISPLAY_BLEND_MODE {.
    cdecl, importc: "orxViewport_GetBlendMode".}
proc setPosition*(internal_pstViewport: ptr orxVIEWPORT; internal_fX: orxFLOAT;
                  internal_fY: orxFLOAT): void {.cdecl,
    importc: "orxViewport_SetPosition".}
proc setRelativePosition*(internal_pstViewport: ptr orxVIEWPORT;
                          internal_u32AlignFlags: orxU32): orxSTATUS {.cdecl,
    importc: "orxViewport_SetRelativePosition".}
proc getPosition*(internal_pstViewport: ptr orxVIEWPORT;
                  internal_pfX: ptr orxFLOAT; internal_pfY: ptr orxFLOAT): void {.
    cdecl, importc: "orxViewport_GetPosition".}
proc setSize*(internal_pstViewport: ptr orxVIEWPORT; internal_fWidth: orxFLOAT;
              internal_fHeight: orxFLOAT): void {.cdecl,
    importc: "orxViewport_SetSize".}
proc setRelativeSize*(internal_pstViewport: ptr orxVIEWPORT;
                      internal_fWidth: orxFLOAT; internal_fHeight: orxFLOAT): orxSTATUS {.
    cdecl, importc: "orxViewport_SetRelativeSize".}
proc getSize*(internal_pstViewport: ptr orxVIEWPORT;
              internal_pfWidth: ptr orxFLOAT; internal_pfHeight: ptr orxFLOAT): void {.
    cdecl, importc: "orxViewport_GetSize".}
proc getRelativeSize*(internal_pstViewport: ptr orxVIEWPORT;
                      internal_pfWidth: ptr orxFLOAT;
                      internal_pfHeight: ptr orxFLOAT): void {.cdecl,
    importc: "orxViewport_GetRelativeSize".}
proc getBox*(internal_pstViewport: ptr orxVIEWPORT;
             internal_pstBox: ptr orxAABOX): ptr orxAABOX {.cdecl,
    importc: "orxViewport_GetBox".}
proc getCorrectionRatio*(internal_pstViewport: ptr orxVIEWPORT): orxFLOAT {.
    cdecl, importc: "orxViewport_GetCorrectionRatio".}
proc getName*(internal_pstViewport: ptr orxVIEWPORT): cstring {.cdecl,
    importc: "orxViewport_GetName".}
proc viewportGet*(internal_zName: cstring): ptr orxVIEWPORT {.cdecl,
    importc: "orxViewport_Get".}
proc renderSetup*(): void {.cdecl, importc: "orxRender_Setup".}
proc renderInit*(): orxSTATUS {.cdecl, importc: "orxRender_Init".}
proc renderExit*(): void {.cdecl, importc: "orxRender_Exit".}
proc getWorldPosition*(internal_pvScreenPosition: ptr orxVECTOR;
                       internal_pstViewport: ptr orxVIEWPORT;
                       internal_pvWorldPosition: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxRender_GetWorldPosition".}
proc getScreenPosition*(internal_pvWorldPosition: ptr orxVECTOR;
                        internal_pstViewport: ptr orxVIEWPORT;
                        internal_pvScreenPosition: ptr orxVECTOR): ptr orxVECTOR {.
    cdecl, importc: "orxRender_GetScreenPosition".}
proc soundPointerSetup*(): void {.cdecl, importc: "orxSoundPointer_Setup".}
proc soundPointerInit*(): orxSTATUS {.cdecl, importc: "orxSoundPointer_Init".}
proc soundPointerExit*(): void {.cdecl, importc: "orxSoundPointer_Exit".}
proc soundPointerCreate*(): ptr orxSOUNDPOINTER {.cdecl,
    importc: "orxSoundPointer_Create".}
proc soundPointerDelete*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_Delete".}
proc enable*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
             internal_bEnable: orxBOOL): void {.cdecl,
    importc: "orxSoundPointer_Enable".}
proc isEnabled*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxBOOL {.cdecl,
    importc: "orxSoundPointer_IsEnabled".}
proc setVolume*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                internal_fVolume: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_SetVolume".}
proc setPitch*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
               internal_fPitch: orxFLOAT): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_SetPitch".}
proc setPanning*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                 internal_fPanning: orxFLOAT; internal_bMix: orxBOOL): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_SetPanning".}
proc play*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_Play".}
proc pause*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_Pause".}
proc stop*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_Stop".}
proc addSound*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
               internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_AddSound".}
proc removeSound*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                  internal_pstSound: ptr orxSOUND): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_RemoveSound".}
proc removeAllSounds*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_RemoveAllSounds".}
proc addSoundFromConfig*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                         internal_zSoundConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_AddSoundFromConfig".}
proc removeSoundFromConfig*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                            internal_zSoundConfigID: cstring): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_RemoveSoundFromConfig".}
proc getLastAddedSound*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): ptr orxSOUND {.
    cdecl, importc: "orxSoundPointer_GetLastAddedSound".}
proc addFilter*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                internal_pstFilterData: ptr orxSOUND_FILTER_DATA;
                internal_bUseCustomParam: orxBOOL): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_AddFilter".}
proc removeLastFilter*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_RemoveLastFilter".}
proc removeAllFilters*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxSTATUS {.
    cdecl, importc: "orxSoundPointer_RemoveAllFilters".}
proc addFilterFromConfig*(internal_pstSoundPointer: ptr orxSOUNDPOINTER;
                          internal_zFilterConfigID: cstring): orxSTATUS {.cdecl,
    importc: "orxSoundPointer_AddFilterFromConfig".}
proc getCount*(internal_pstSoundPointer: ptr orxSOUNDPOINTER): orxU32 {.cdecl,
    importc: "orxSoundPointer_GetCount".}
var sbStopByEvent*: orxBOOL
proc defaultEventHandler*(internal_pstEvent: ptr orxEVENT): orxSTATUS {.cdecl,
    importc: "orx_DefaultEventHandler".}
proc mainSetup*(): void {.cdecl, importc: "orx_MainSetup".}